<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Selenium Webdriver之Chrome浏览器操作小记]]></title>
    <url>%2Falex.d-blog%2Fposts%2F6b28b742%2F</url>
    <content type="text"><![CDATA[SeleniumSelenium 是一套跨平台的浏览器自动化测试框架（工具），支持在多种系统环境、多种浏览器环境下使用，还可以使用多种编程语言来编写测试。Selenium 有多个项目构成，形成了一个多功能的测试系统:Selenium Core：支持DHTML 的测试案例（效果类似数据驱动测试），它是Selenium IDE 和Selenium RC的引擎。Selenium Grid - 允许您在不同的计算机上并行运行不同浏览器的测试。也就是说，针对运行不同浏览器和操作系统的不同计算机同时运行多个测试。从本质上讲，Selenium-Grid支持分布式测试执行。它允许在分布式测试执行环境中运行测试。Selenium IDE - 用于开发Selenium测试用例的工具。它是一个易于使用的Chrome和Firefox扩展，通常是开发测试用例的最有效方式。它使用现有的Selenium命令为您在浏览器中记录用户操作，并使用该元素的上下文定义参数。这不仅节省了时间，而且是学习Selenium脚本语法的绝佳方式。Selenium RC (Selenium Remote Control) - 是一个客户端/服务器系统，允许您使用几乎任何编程语言和测试框架在本地或其他计算机上控制Web浏览器。Selenium WebDriver - 主要新功能是集成WebDriver API。除了解决Selenium-RC API中的一些限制之外，WebDriver还旨在提供更简单，更简洁的编程接口。Selenium-WebDriver的开发是为了更好地支持动态网页，页面元素可能会在不重新加载页面的情况下发生变化。WebDriver的目标是提供精心设计的面向对象的API，为现代高级Web应用程序测试问题提供改进的支持。注意：如出现Selenium官网访问缓慢，可以在 C:\Windows\System32\drivers\etc\hosts 文件内添加如下内容后尝试1172.217.31.243 www.seleniumhq.orgSelenium 1.0Selenium 1.0（又名，Selenium RC 或 Selenium Remote Control） 发布于2004年，基本构成如下：主要的两个组件为：Selenium RC Server - 解释并运行从测试程序传递的 Selenese 命令（Selenese 是 Selenium命令集合），并充当HTTP代理，拦截和验证在浏览器和AUT之间传递的HTTP消息。Client libraries - 提供每种编程语言和Selenium RC Server之间的接口。简化的架构图如下：Selenium 2.0Selenium 2 = WebDriver + Selenium 1Selenium 2.0发布于2011年，是Selenium 1.0与Selenium WebDriver合并而成的一款性能更佳的产品。WebDriver是一种用于自动化Web应用程序测试的工具，尤其是用于验证它们是否按预期工作。它旨在提供一个易于探索和理解的友好API，比Selenium-RC（1.0）API更易于使用，这将有助于使您的测试更易于阅读和维护。它不依赖于任何特定的测试框架，因此它可以在单元测试项目中使用。关于 Webdriver更多内容，可以查看w3c文档 2013版 2018版Selenium 2.0 具有来自 WebDriver 的清晰面向对象 API，并能以最佳的方式与浏览器进行交互，更多Selenium WebDriver的API接口操作可以查看此处。该版本中主推WebDriver，可以将其看做 Selenium RC 的替代。因为要保持向下兼容，Selenium 2.0 中并没有彻底放弃 Selenium RC。Selenium 3.0Selenium 3.0首次发布于 2016年5月，主要有如下更新：停止使用 Selenium core （放弃Selenium RC）需要更高的Java版本支持（Java 8+）不再默认支持Firefox驱动程序（Mozilla推出Gecko Driver）使用W3C新标准的WebDriver浏览器供应商自己的WebDriver实现三个版本关系大致如下：Selenium与浏览器driver为了实现Selenium对浏览器的操作，针对几款主流的浏览器，提供了对应的 driver浏览器driver地址Chrome - ChromeDrivergithub 下载地址1 下载地址2Firefox - GeckoDrivergithub 下载地址Edge - Microsoft WebDrivergithub 下载地址Safari - WebDriversource其他浏览器Driver此处下载Selenium webdriver 模拟 Chrome 浏览器操作对于 Selenium 的这里仅作简略介绍，大家可以参看官方文档或类似书籍来学习。下面通过一些小示例，简单记录在 Windows 10、Python 2.7.15、Selenium 3.14.1、Chrome 71.0.3578.80环境下，Selenium webdriver API 驱动 Chrome 浏览器操作的过程。Chrome浏览器及chromedriver版本对应要 Selenium 可以操作对应版本的浏览器，就要下载对应的 Driver ，下面为 ChromeDriver 对应的 Chrome 版本chromedriver版本支持的Chrome版本v2.44v69-71v2.43v69-71v2.42v68-70v2.41v67-69v2.40v66-68v2.39v66-68v2.38v65-67v2.37v64-66v2.36v63-65v2.35v62-64v2.34v61-63v2.33v60-62v2.32v59-61v2.31v58-60v2.30v58-60v2.29v56-58v2.28v55-57v2.27v54-56v2.26v53-55v2.25v53-55注意：Chrome 70+ 版本后出现对应小版本的chromedriver，如本文浏览器版本为 71.0.3578.80 ，则下载对应该版本的chromedriver。更多版本查看此处。Python安装SeleniumSelenium Python bindings 是Selenium WebDriver的Python绑定版本，用于Python的自动化浏览器交互操作。支持 Python 2.7 及 Python 3.4+ 版本。Python安装Selenium可以通过如下命令123pip install selenium或easy_install selenium如果使用 Anaconda 或 Miniconda ，则使用如下命令安装1conda install seleiumchromedriver 下载及配置下载对应当前 Chrome 浏览器版本的 chromedriver ，在任意目录解压后，将解压后的路径配置到环境变量中方便程序中直接引用。注意：64位浏览器下载32位driver即可。注意： 操作不同浏览器，需要下载对应浏览器版本的driver，并添加driver路径到环境变量中，否则运行代码时，会出现类似selenium.common.exceptions.WebDriverException: Message: &#39;xxxdriver&#39; executable needs to be in PATH. 的异常提示Selenium webdriver实例化及页面访问以下演示 Selenium 操控 Chrome 浏览器，打开百度页面12345678from selenium import webdriverchromedriver = "D:\ProgramData\pkgs\chromedriver"driver = webdriver.Chrome(chromedriver)# driver = webdriver.Chrome() # 设置了chromedriver的环境变量，则此行代码等效于上面两行代码driver.get("https://www.baidu.com")driver.maximize_window() # 好像没有效果。。。driver.quit()get 方法会在页面 onload 完成后显示页面，并继续执行后续代码，如页面内存在大量Ajax请求时，为了保证页面完整加载，可以考虑使用waits来等待页面加载完成。Selenium webdriver API 获取页面元素要定位一个元素，Selenium提供了下列的查找元素的方法:find_element_by_id - 查找对应id的元素find_element_by_name - 查找对应名称的元素find_element_by_xpath - 查找对应xpath的元素find_element_by_link_text - 查找对应超链接文本的元素find_element_by_partial_link_text - 查找含有超链接文本的元素find_element_by_tag_name - 查找对应标签名的元素find_element_by_class_name - 查找对应类名的元素find_element_by_css_selector - 查找对应css选择器的元素如果要获取多个相同元素（返回list列表），find_elements_by_namefind_elements_by_xpathfind_elements_by_link_textfind_elements_by_partial_link_textfind_elements_by_tag_namefind_elements_by_class_namefind_elements_by_css_selector除了上述的公共方法，还提供了两个私有方法find_elementfind_elements配合 By 类也可以用来实现上面方法的功能，By 类提供了一组支持的定位策略属性：CLASS_NAME = ‘class name’CSS_SELECTOR = ‘css selector’ID = ‘id’LINK_TEXT = ‘link text’NAME = ‘name’PARTIAL_LINK_TEXT = ‘partial link text’TAG_NAME = ‘tag name’XPATH = ‘xpath’上述方法使用参看此处 （对应Selenium WebDriver API参看此处）以下演示 selenium 查找百度首页按钮元素，边获取元素值1234567891011121314151617181920212223242526from selenium import webdriverchromedriver = "D:\ProgramData\pkgs\chromedriver"driver = webdriver.Chrome(chromedriver)# driver = webdriver.Chrome() # 设置了chromedriver的环境变量，则此行代码等效于上面两行代码driver.get("https://www.baidu.com")# 查找元素search_btn = driver.find_element_by_id('su') #获取百度首页“百度一下”按钮元素print search_btnprint search_btn.idprint search_btn.sizeprint search_btn.tag_nameprint search_btn.text# 获取元素属性值print search_btn.get_property('type')print search_btn.get_attribute('class')print search_btn.get_property('value')# 获取元素状态print search_btn.is_displayed()print search_btn.is_enabled()print search_btn.is_selected()# 获取元素css样式print search_btn.value_of_css_property('font')print search_btn.value_of_css_property('color')print search_btn.value_of_css_property('background')driver.quit()Selenium webdriver API 页面表单操作以下演示 Selenium 实现百度一下操作（用百度查找 “selenium” 相关内容）1234567891011121314151617from selenium import webdriverfrom selenium.webdriver.common.by import Bychromedriver = "D:\ProgramData\pkgs\chromedriver"driver = webdriver.Chrome(chromedriver)# driver = webdriver.Chrome() # 设置了chromedriver的环境变量，则此行代码等效于上面两行代码driver.get("https://www.baidu.com")# 获取百度首页输入框search_input = driver.find_element(By.NAME, 'wd')# 输入框内填写 “selenium”search_input.send_keys("selenium")# 获取百度首页“百度一下”按钮search_btn = driver.find_element(By.ID, 'su')# 点击按钮，实现表单提交search_btn.click()# driver.quit()获取输入框元素后，使用 send_keys() 方法模拟输入需要查找的内容，之后获取按钮元素，并触发 click() 方法模拟点击事件，以此模拟完成百度搜索功能参考阅读Selenium - 百度百科Selenium - 维基百科)Selenium Python APISelenium-Python中文文档Selenium 3.14文档Selenium 2自动化测试实战 基于Python语言 - 某东直链 | PDF]]></content>
      <categories>
        <category>Python</category>
        <category>Selenium</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Selenium</tag>
        <tag>Webdriver</tag>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python学习笔记 - 函数式编程之高阶函数]]></title>
    <url>%2Falex.d-blog%2Fposts%2F736330a0%2F</url>
    <content type="text"><![CDATA[函数式编程函数式编程（Functional Programming），是一种抽象程度很高的编程范式，纯粹的函数式编程语言编写的函数没有变量。因此，任意一个函数，只要输入是确定的，输出就是确定的。函数式编程是一种“编程范式”（programming paradigm）。它属于“结构化编程”的一种，主要思想是把运算过程尽量写成一系列嵌套的函数调用。函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！Python对函数式编程提供部分支持。由于Python允许使用变量，因此，Python不是纯函数式编程语言。更多内容廖雪峰Python教程 函数式编程函数式编程初探 - 阮一峰函数式编程 - 看云函数式编程 - 百度百科高阶函数函数式编程中，可以将函数当作变量一样使用。接受函数为参数，或者把函数作为结果返回的函数称为高阶函数（Higher-order Functions） 。123456789101112131415def double(x): return 2 * xdef square(x): return x * xdef func(g, arr): return [g(x) for x in arr]&gt;&gt;&gt; arr1 = func(double, [1, 2, 3, 4])&gt;&gt;&gt; arr2 = func(square, [1, 2, 3, 4])&gt;&gt;&gt; arr1[2, 4, 6, 8]&gt;&gt;&gt; arr2[1, 4, 9, 16]map()/reduce()/filter()/sorted() /apply() 是 Python 中较为常用的高阶函数，它们为函数式编程提供了不少便利。Python 3 中，map 和 filter 还是内置函数，但是由于引入了列表推导和生成器表达式，它们变得没那么重要了。列表推导或生成器表达式具有 map 和 filter 两个函数的功能，而且更易于阅读。apply 函数在Python 2.3 中标记为过时，在Python 3 中移除了，因为不再需要它了。如果想使用不定量的参数调用函数，可以编写 fn(*args, **keywords)，不用再编写 apply(fn, args,kwargs)。map()map 函数将传入的函数依次作用到序列的每个元素，并把结果作为新的 Iterator 返回。map 函数语法：1234567891011121314151617181920212223242526272829303132# map(function, iterable, ...)## 参数 —— function : 函数 ; iterable : 一个或多个序列## 返回值 —— Python 2.x 返回列表； Python 3.x 返回迭代器（map）def square(x): # 计算平方数 return x ** 2&gt;&gt;&gt; map(square, [1,2,3,4,5]) # 计算列表各个元素的平方&lt;map object at 0x000001B9F81ADEB8&gt;&gt;&gt;&gt; map(lambda x: x ** 2, [1, 2, 3, 4, 5]) # 使用 lambda 匿名函数# [1, 4, 9, 16, 25] # python2输出结果&lt;map object at 0x000001B9F81ADEB8&gt; # python3输出结果（可使用list()函数对map函数返回结果进行转换）&gt;&gt;&gt; list(map(lambda x: x ** 2, [1, 2, 3, 4, 5]))[1, 4, 9, 16, 25]# map实现list的值的格式批量转换&gt;&gt;&gt; list(map(str, [1, 2, 3, 4]))['1', '2', '3', '4']&gt;&gt;&gt; list(map(int, ['1', '2', '3', '4']))[1, 2, 3, 4]# 提供了两个列表，对相同位置的列表数据进行相加&gt;&gt;&gt; map(lambda x, y: x + y, [1, 3, 5, 7, 9], [2, 4, 6, 8, 10])[3, 7, 11, 15, 19]# -------- 列表推导式实现上述功能 -----------&gt;&gt;&gt; [square(n) for n in [1,2,3,4,5]][1, 4, 9, 16, 25]&gt;&gt;&gt; [str(n) for n in [1,2,3,4]]['1', '2', '3', '4']&gt;&gt;&gt; [int(n) for n in ['1', '2', '3', '4']][1, 2, 3, 4]reduce()reduce() 函数会对参数序列中元素进行累积。函数将一个数据集合（链表，元组等）中的所有数据进行下列操作：用传给 reduce() 中的函数 function（有两个参数）先对集合中的第 1、2 个元素进行操作，得到的结果后继续和序列的下一个元素做累积计算，直到累积到列表最后一个数据。Python 2 中，reduce 是内置函数，但是在Python 3 中放到functools 模块里了。reduce() 函数语法：123456789101112131415161718192021222324# reduce(function, iterable[, initializer])## 参数 —— function：函数，有两个参数； iterable ： 可迭代对象； initializer：可选，初始参数## 返回值 —— 返回函数计算结果。# 序列求和实现from functools import reduce # Python3 需要引入def add(x, y) : # 两数相加（或使用 from operator import add） return x + y&gt;&gt;&gt; reduce(add, [1,2,3,4,5]) # 计算列表和：1+2+3+4+515&gt;&gt;&gt; reduce(lambda x, y: x * y, [1, 2, 3, 4]) # 相当于 ((1 * 2) * 3) * 424&gt;&gt;&gt; reduce(lambda x, y: x * y, [1, 2, 3, 4], 5) # ((((5 * 1) * 2) * 3)) * 4120&gt;&gt;&gt; reduce(lambda x, y: x / y, [2, 3, 4], 72) # (((72 / 2) / 3)) / 43&gt;&gt;&gt; reduce(lambda x, y: x + y, [1, 2, 3, 4], 5) # ((((5 + 1) + 2) + 3)) + 415&gt;&gt;&gt; reduce(lambda x, y: x - y, [8, 5, 1], 20) # ((20 - 8) - 5) - 16&gt;&gt;&gt; f = lambda a, b: a if (a &gt; b) else b # 两两比较，取最大值&gt;&gt;&gt; reduce(f, [5, 8, 1, 10])10注意： 在 Python3 中，reduce() 函数已经被从全局名字空间里移除了，它现在被放置在 fucntools 模块里，如果想要使用它，则需要通过引入 functools 模块来调用 reduce() 函数：1from functools import reducefilter()filter() 函数用于过滤序列，过滤掉不符合条件的元素，Python2返回过滤后的列表，Python3返回迭代器对象（filter），如果要转换为列表，可以使用 list() 来转换。123456789101112131415161718# filter(function, iterable)## 参数 —— function : 判断函数; iterable : 可迭代对象## 返回值 —— 返回一个迭代器对象# 过滤出列表中的所有奇数def is_odd(n) : return n % 2 == 1&gt;&gt;&gt; list(filter(is_odd, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))[1, 3, 5, 7, 9]# 过滤出1~100中平方根是整数的数import mathdef is_sqr(n) : return math.sqrt(n) % 1 == 0&gt;&gt;&gt; list(filter(is_sqr, range(1, 101)))[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]注意：Python3 中返回到是一个 filter 类，filter 类实现了 __iter__ 和 __next__ 方法，可以看成是一个迭代器, 有惰性运算的特性，相对 Python2提升了性能，可以节约内存。sorted()sorted() 函数对所有可迭代的对象进行排序操作。sort 与 sorted 区别：sort 是应用在 list 上的方法，sorted 可以对所有可迭代的对象进行排序操作。list 的 sort 方法返回的是对已经存在的列表进行操作，而内建函数 sorted 方法返回的是一个新的 list，而不是在原来的基础上进行的操作。sorted() 语法：12345678910111213141516171819202122232425262728293031323334# sorted(iterable, key=None, reverse=False)## 参数 —— iterable -- 可迭代对象； key -- 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序； reverse -- 排序规则，reverse = True 降序 ， reverse = False 升序（默认）## 返回值 —— 重新排序的列表&gt;&gt;&gt;sorted([5, 2, 3, 1, 4])[1, 2, 3, 4, 5]# 使用集合的sort()方法，实现类似结果&gt;&gt;&gt;a = [5,2,3,1,4]&gt;&gt;&gt; a.sort()&gt;&gt;&gt; a[1,2,3,4,5]# sort()及sorted()的区别在于， sort()返回None，排序操作直接作用在原list上，而sorted()排序后会返回新的list&gt;&gt;&gt; a = [1,3,2,4];id(a); a.sort(); id(a)17349598424401734959842440&gt;&gt;&gt; b = [4,3,1,2]; id(b);id(sorted(b));17349599538641734959953672# sort()和sorted() 另一个区别在于list.sort() 方法只为 list 定义。而 sorted() 函数可以接收任何的 iterable。&gt;&gt;&gt; sorted(&#123;1: 'D', 2: 'B', 3: 'B', 4: 'E', 5: 'A'&#125;)[1, 2, 3, 4, 5]# 利用key进行倒序排序&gt;&gt;&gt; example_list = [5, 0, 6, 1, 2, 7, 3, 4]&gt;&gt;&gt; result_list = sorted(example_list, key=lambda x: x * -1)&gt;&gt;&gt; print(result_list)[7, 6, 5, 4, 3, 2, 1, 0]# 进行反向排序，也可传入第三个参数 reverse=True：&gt;&gt;&gt;example_list = [5, 0, 6, 1, 2, 7, 3, 4]&gt;&gt;&gt; sorted(example_list, reverse=True)[7, 6, 5, 4, 3, 2, 1, 0]返回函数高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。1234567891011121314151617181920# 返回累加函数变量def lazy_sum(*args): # 外部函数 def sum(): #内部函数 可以引用外部函数lazy_sum的参数和局部变量 ax = 0 for n in args: ax = ax + n return ax return sum # 返回函数变量（返回函数sum时，lazy_sum相关参数和变量都保存在返回的函数中，闭包）&gt;&gt;&gt; f = lazy_sum(1, 3, 5, 7, 9)&gt;&gt;&gt; f&lt;function lazy_sum.&lt;locals&gt;.sum at 0x00000193F3C89048&gt;&gt;&gt;&gt; f() # 返回的函数并没有立刻执行，而是直到调用了f()才执行25# 调用lazy_sum()时，每次调用都会返回一个新的函数&gt;&gt;&gt; f1 = lazy_sum(1, 3, 5, 7, 9)&gt;&gt;&gt; f2 = lazy_sum(1, 3, 5, 7, 9)&gt;&gt;&gt; f1==f2 # f1()和f2()的调用结果互不影响False闭包一个函数返回了一个内部函数，该内部函数引用了外部函数的相关参数和变量，我们把该返回的内部函数称为闭包（Closure）闭包的最大特点就是引用了自由变量，即使生成闭包的环境已经释放，闭包仍然存在。闭包在运行时可以有多个实例，即使传入的参数相同。12345# 调用lazy_sum()时，每次调用都会返回一个新的函数&gt;&gt;&gt; f1 = lazy_sum(1, 3, 5, 7, 9)&gt;&gt;&gt; f2 = lazy_sum(1, 3, 5, 7, 9)&gt;&gt;&gt; f1 == f2 # f1()和f2()的调用结果互不影响False利用闭包，还可以模拟类的实例。12345678910111213141516171819202122232425# 构造一个类，用于求一个点到另一个点的距离：from math import sqrt&gt;&gt;&gt; class Point(object): def __init__(self, x, y): self.x, self.y = x, y def get_distance(self, u, v): distance = sqrt((self.x - u) ** 2 + (self.y - v) ** 2) return distance&gt;&gt;&gt; pt = Point(7, 2) # 创建一个点&gt;&gt;&gt; pt.get_distance(10, 6) # 求到另一个点的距离5.0# 用闭包来实现：def point(x, y): def get_distance(u, v): return sqrt((x - u) ** 2 + (y - v) ** 2) return get_distance&gt;&gt;&gt; pt = point(7, 2)&gt;&gt;&gt; pt(10, 6)5.0注意： 尽量避免在闭包中引用循环变量，或者后续会发生变化的变量。12345678910111213141516171819202122232425262728293031323334def count(): funcs = [] for i in [1, 2, 3]: def f(): return i funcs.append(f) return funcs&gt;&gt;&gt; f1, f2, f3 = count()&gt;&gt;&gt; f1()3&gt;&gt;&gt; f2()3&gt;&gt;&gt; f3()3# 原因在于上面的函数 f 引用了变量 i，但函数 f 并非立刻执行，当 for 循环结束时，此时变量 i 的值是3，funcs 里面的函数引用的变量都是 3，最终结果也就全为 3。# 可以再创建一个函数，并将循环变量的值传给该函数def count(): funcs = [] for i in [1, 2, 3]: def g(param): f = lambda : param # 这里创建了一个匿名函数 return f funcs.append(g(i)) # 将循环变量的值传给 g return funcs&gt;&gt;&gt; f1, f2, f3 = count()&gt;&gt;&gt; f1()1&gt;&gt;&gt; f2()2&gt;&gt;&gt; f3()3]]></content>
      <categories>
        <category>Python</category>
        <category>函数式编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>函数式编程</tag>
        <tag>高阶函数</tag>
        <tag>闭包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows小技巧 -- chrome下页面保存的多种姿势]]></title>
    <url>%2Falex.d-blog%2Fposts%2F62e02099%2F</url>
    <content type="text"><![CDATA[本文主要以百度首页为例，记录Chrome浏览器中，保存页面的多种方式（涉及一些Chrome的“小技巧”），涉及插件使用请自行尝试，本文仅对不使用插件的情况下保存页面的不同处理方法做简单介绍。系统环境：Windows10、Chrome 70.0.3538.110（正式版本） （64 位）.保存离线页面说到页面离线保存，首先想到的就是右键保存（Ctrl + S），这样的方式保存会把当前页面的资源保存下来，并放到一个目录下面，大致效果如下：在想要编辑页面源码等情况下，可以使用此方法，如果只想获取单个离线页面文件用来离线查看，则可以尝试保存当前页面为MHTML文档，可以使用插件（Save As MHT 、Save As MHTML 等） 或Chrome原生支持来完成此功能。Chrome浏览器保存MHTML格式页面很多浏览器（IE 5.0+、Opera 9.0+、Chrome等）都支持存储MHTML格式页面，大多不支持的浏览器，也有对应的插件可以处理。在Chrome中，要保存MHTML格式页面，需要在Chrome的实验性功能设置中开启。首先，在Chrome浏览器的地址栏输入 chrome://flags ，可以进入Chrome的实验性功能设置页面在页面的搜索框内输入 mhtml ，找到 Save Page as MHTML 项（或直接在地址栏输入 chrome://flags/#save-page-as-mhtml），将该项设置为 Enabled ，然后点击底部提示中的 RELAUNCH NOW 按钮重启浏览器，使修改生效。重启浏览器后，在需要保存的页面中，右键，选择另存为（或快捷键 Ctrl + S），弹出的另存为窗口，保存类型选择 网页（单个文件）附：IE保存MHT格式页面MHTML（维基百科 | 百度百科），网页归档，又称单一档案网页或网页封存档案，可以将一个多附件网页保存为单一文档，文档扩展名为 .mht 或 .mhtml。IE浏览器支持保存 .mht 文件，下面做简单介绍。IE浏览器中打开需要保存的百度首页页面链接，然后右键保存（Ctrl + S），出现的保存窗口中，选择保存类型 *.mht此时可以看到一个百度的MHT文件，文本编辑器打开后，可以看到类似下面的代码：这里可以看到MHTML文档是基于超文本标记语言的，里面可以看到经过处理的页面代码。保存PDF页面Chrome中PDF格式页面保存，可以通过 PrintFriendly &amp; PDF (有Chrome插件）等在线处理服务或使用Chrome插件（Save As PDF）实现，也可以通过打印来实现。Chrome打印预览中保存页面PDF在想保存的页面中，快捷键 Ctrl + P （或右键菜单 -&gt; 打印(p)...），打开页面的打印浏览界面此时可以看到站点的打印预览效果（默认黑白显示），在左侧选项中找到 目标打印机 -&gt; 更改... ，在弹出的选择界面中，找到 另存为 PDF ，双击即可此时就可以看到站点的彩色版预览效果，点击左侧的 保存 按钮即可将站点存储为PDF格式。保存图片页面部分情况下，可能会需要截取页面，有时仅需要截取部分内容，这通过普通的截图工具即可完成，如QQ截取、微信截图、Windows自带截图工具等等；而有时可能需要截取页面长图，这也可以通过工具来实现，如FastStone Capture、Chrome插件（FireShot、Full Page Screen Capture）等。这里简单介绍 FastStone Capture 和Chrome截图方法，其他方式不赘述。截图工具实现图片页面保存打开工具 FastStone Capture ，选择 捕捉滚动窗口 按钮，则可以进入长图截图窗口FastStone Capture的捕捉滚动窗口，可以支持自动滚动窗口及自定义滚动窗口，可以根据需要选择，以达到截取所需内容的目的（自定义滚动截图不太好使，不容易把控结束时间，截取的图片可能需要再次编辑）Chrome浏览器命令行菜单实现图片页面保存在Chrome浏览器的开发者工具中（devtools），也提供了类似主流编辑器（Sublime Text, Atom, Visual Studio Code等）中的命令行菜单，通常使用 Ctrl + Shift + P ( Mac 上是 Cmd + Shift + P) 。如Sublime Text的命令行菜单：使用Sublime Text的朋友应该很熟悉这个了，而命令行菜单带来的遍历是不言而喻的。在Chrome浏览器中，首先 F12 打开 DevTools 开发者工具，然后在DevTools中使用快捷键 Ctrl + Shift + P ，就可以打开Chrome的命令行菜单：在命令行菜单中，输入 capture 就可以看到有如下选项这里可以看到，Chrome命令行菜单提供了三个用于界面捕获的命令Capture full size screenshot - 截取整个站点（长图）Capture node screenshot - 截取选择的DOM节点Capture screenshot - 截取视图窗口显示的部分在命令行内输入对应的命令，即可完成截图。附：Chrome浏览器站点移动端视图截图上面介绍了截取站点方法，这里额外说下，想截取站点在不同像素显示下响应显示时，截取类似移动端长图的方法。同样在Chrome浏览器中，打开DevTools，然后点击按钮，点击 toggle device toolbar（切换设备工具栏） ，可以看到类似如下效果：在这个工具栏中，可以通过切换不同的设备（不同的分辨率），来查看站点在不同的分辨率下的显示情况，可以很好的辅助站点的响应式开发工作。在这个视图中，可以通过点击顶部菜单项最右边的三个点，来打开菜单，里面有截取屏幕的选项，如下：Headless Chrome模式完成页面截图及转存PDFHeadless Chrome is shipping in Chrome 59. It’s a way to run the Chrome browser in a headless environment. Essentially, running Chrome without chrome! It brings all modern web platform features provided by Chromium and the Blink rendering engine to the command line.Chrome 59以上版本支持Headless Chrome，Headless Chrome是可以命令行模式运行Chromium和Blink渲染引擎提供功能。可以在无UI窗口的情况下，完成很多浏览器的操作，是自动测试和服务器环境的绝佳工具。更多内容参看官方说明。Headless Chrome 保存页面管理员模式运行命令行窗口，使用 cd 命令进入Chrome浏览器安装目录，输入类似如下命令：1chrome --headless --disable-gpu --dump-dom https://www.baidu.com测试了下，好像没有效果，具体原因不清楚。。。有知道的朋友，希望可以不吝赐教！！！Headless Chrome 保存页面PDF管理员模式运行命令行窗口，使用 cd 命令进入Chrome浏览器安装目录，输入类似如下命令：1chrome --headless --disable-gpu --print-to-pdf='存储路径\文件名称' https://www.baidu.com注意，此处如果不给存储路径和文件名称，则保存的pdf可以在Chrome浏览器安装目录下对应版本号的目录文件下，文件名称为 output.pdfHeadless Chrome 页面截图管理员模式运行命令行窗口，使用 cd 命令进入Chrome浏览器安装目录，输入类似如下命令：1234chrome --headless --disable-gpu --screenshot='存储路径\文件名称' https://www.baidu.com## 设置图片大小(尺寸大小好像没有用，具体作用自行研究)chrome --headless --disable-gpu --screenshot='存储路径\文件名称' --window-size=宽,高 https://www.baidu.com注意，此处如果不给存储路径和文件名称，则保存的pdf可以在Chrome浏览器安装目录下对应版本号的目录文件下，文件名称为 output.pdfPuppeteerChrome官方推出的Puppeteer（封装了Headless Chrome的Node库），可以完成浏览器中手动执行的大多数操作：生成页面的屏幕截图和PDF。抓取SPA（单页面应用程序）并生成预渲染内容（即“SSR”（服务器端渲染））。自动化表单提交，UI测试，键盘输入等。创建最新的自动化测试环境。使用最新的JavaScript和浏览器功能直接在最新版本的Chrome中运行测试。捕获站点的时间线跟踪，以帮助诊断性能问题。测试Chrome扩展程序。该库具体功能详见 此处 | Github地址。类似的还可以尝试PhantomJS – 可编写脚本的无头浏览器阅读参考Chrome 开发者工具中的命令菜单DevTools Digest: More Power with the New Command Menu – Google developersChrome DevTools: Use the Command Menu to access almost everything in DevTools in a few keystrokesHeadless_software – 维基百科chromeless(已停止维护，推荐使用Puppeteer)使用 Chrome Headless 模式将 HTML 转 PDFChromium命令行开关列表]]></content>
      <categories>
        <category>Windows小技巧</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows小技巧 -- 已连接wifi密码查看]]></title>
    <url>%2Falex.d-blog%2Fposts%2Fca0ce790%2F</url>
    <content type="text"><![CDATA[部分情况，想和朋友分享连接过的Wifi密码，可能不知道怎么来查询，下面记录几种查询已连接的Wifi密码方法，具体如下：方式一 ：无线属性页面查询快捷键 Win + R ，打开运行窗口，输入 ncpa.cpl 快速打开 网络连接 页面，找到 WIFI 右键状态，弹出的 WLAN 状态 窗口点击 无线属性， 在弹出的 xxx 无线网络属性 窗口中，点击 安全 选项卡勾选 显示字符 就可以在 网络安全秘钥 后看到当前wifi的密码，如下图：方式二 ：netsh命令查询netsh(Network Shell) 是一个windows系统本身提供的功能强大的网络配置命令行工具，它允许从本地或远程显示或修改当前正在运行的计算机的网络配置。管理员模式运行命令行窗口，输入 netsh wlan show profiles 可以查看本地记录的所有wifi配置（连接过的wifi）想查看某个wifi的密码，则可以通过命令 netsh wlan show profile name=&#39;查询的wifi名称&#39; key=clear （管理员模式），此处以名称为 1011 的wifi为例到此，就通过netsh命令完成了对指定wifi的密码查询了。如想一次性获取本机连接过的所有wifi密码，可以通过命令1netsh wlan show profile * key=clear或1for /f "skip=9 tokens=1,2 delims=:" %i in ('netsh wlan show profiles') do @echo %j | findstr -i -v echo | netsh wlan show profiles %j key=clear方式三： 使用外部软件查询此处使用 WirelessKeyView 软件来完成查询，点击此处下载，下载完成后，双击即可。截取部分软件介绍WirelessKeyView recovers all wireless network keys (WEP/WPA) stored inyour computer by the ‘Wireless Zero Configuration’ service of Windows XPor by the ‘WLAN AutoConfig’ service of Windows Vista, Windows 7, Windows8, Windows 10, and Windows Server 2008. It allows you to easily save allkeys to text/html/xml file, or copy a single key to the clipboard. Youcan also export your wireless keys into a file and import these keys intoanother computer.…可以看出该软件可以获取到本地的所有 （WEP/WPA）加密的Wifi配置信息简单记录了几种查询本地已连接wifi的密码的获取方式，如有其它方式，欢迎告知~]]></content>
      <categories>
        <category>Windows小技巧</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>wifi</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows下SonarQube与Jenkins环境的配置使用]]></title>
    <url>%2Falex.d-blog%2Fposts%2F1d88c15e%2F</url>
    <content type="text"><![CDATA[Windows下SonarQube与Jenkins环境的配置使用首先放个SonarQube官方持续化集成测试环境架构图图中展示了SonarQube自动化环境的整合，前文根据SonarQube官方的架构图，搭建了SonarQube的代码检测分析环境，本文则在此基础上，记录Jenkins与SonarQube环境整合配置使用。Jenkins环境配置Jenkins安装Jenkins需要Java环境支持，所以首先需要安装Java环境（此处不赘述），Jenkins官方文档Java环境要求详情更多Jenkins安装及环境要求，见官方Guided文档 。安装好Java配置后（本文使用JDK1.8.0_152），官网下载对应系统的Jenkins安装包（本文使用Jenkins 2.121.3 LTS版本），下载完成后，解压安装，按需要配置安装目录，然后一路next即可。安装完成后，会弹出Jenkins的初始化配置的界面，如下Jenkins自动生成了一个管理员密码，存放在 D:\Program Files (x86)\Jenkins\secrets 下的 initialAdminPassword 文件中，(忘记密码处理方法，可以参看此文)。后续插件安装使用默认安装即可。注意：安装插件过程中，出现失败，可以多次尝试安装，依旧不成功，可以跳过，等待后续进入管理配置界面更换数据源或下载插件离线包进行尝试，具体操作参考此文。Jenkins中JDK配置Jenkins中SonarQube Scanner插件安装配置插件安装，依次点击 系统管理 -&gt; 插件管理 -&gt; 可选插件，搜索 SonarQube Scanner 点击安装，安装完成后，重启Jenkins。进行SonarQube Server配置前，登陆 SonarQube 服务，生成一个Token （在 配置 -&gt; 权限 -&gt; 用户 -&gt; 令牌 内进行生成），用于Jenkins的SonarQube Scanner插件使用。依次点击 系统管理 -&gt; 系统设置 ，找到 SonarQube servers 项，点击 Add SonarQube 然后进行如下配置在 系统管理 -&gt; 全局工具配置 中配置本地 SonarQube ScannerJenkins构建任务使用命令行实现SonarQube Scanner的代码检测分析此处通过Jenkins实现前文 （Windows下配置SonarQube Scanner检测分析代码 ）SonarQube Scanner检查代码的操作。用来简单了解SonarQube和Jenkins的配置使用。按以上步骤，配置好Jenkins环境后，此处新建一个Jenkins构建任务到此一个简单的，执行Windows 批处理命令的构建任务创建完成，点击保存后，返回Jenkins主界面，点击执行任务即可开始执行此构建任务查看任务更多内容，可以点击任务名称，进入任务管理界面查看构建时信息，可以点击构建历史内的链接，到构建历史的查看界面，然后选择查看方式等操作到此，就通过Jenkins构建任务，执行了 sonar-scanner 的命令，完成对代码的检测分析。在此基础上，还可以实现类似前文 （Windows下配置SonarQube Scanner检测分析代码 ）中使用Maven的 mvn sonar:sonar 命令，完成对项目的检测分析（需要首先在Jenkins的 系统管理 -&gt; 全局工具配置 中添加本地Maven地址，参考上文添加JDK操作），修改构建命令行命令如下：构建任务执行完，且查看命令行日志显示成功后，可以登录 SonarQube Server 查看分析结果。]]></content>
      <categories>
        <category>代码质量</category>
        <category>SonarQube</category>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>SonarQube</tag>
        <tag>代码质量</tag>
        <tag>代码分析</tag>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows下配置SonarQube Scanner检测分析代码]]></title>
    <url>%2Falex.d-blog%2Fposts%2F57e324c1%2F</url>
    <content type="text"><![CDATA[Windows下配置SonarQube Scanner检测分析代码首先这里继续引用下SonarQube的架构图，在上文中记录了Windows下SonarQube服务及数据库环境的配置，本文则在此基础上，简单记录SonarQube Scanner代码分析工具的配置及使用，文中发现有问题或疏漏，希望可以得到您的反馈。对于SonarQube Scanner这里不做太多介绍了，至于为什么使用SonarQube Scanner，看这里SonarQube官方文档 推荐使用，更多原因，自行百度了~Maven配置SonarQube Scannar实现代码分析此处通过在Maven中配置Sonar Scanner，然后使用 mvn sonar:sonar 命令完成对代码的分析，该方式针对Maven构建项目，Gradle构建的项目未测试，自行尝试。Maven环境配置为了可以使用Maven命令运行Sonar来分析项目代码，首先需要将Maven的bin目录添加到环变量内，如下:配置完成后，在命令行窗口使用命令 mvn -v 查看Maven版本等信息，验证环境变量配置完成Maven增加SonarQube Scanner配置首先在 Maven 的 conf 目录下找到Maven的配置文件 settings.xml ，搜索到 &lt;profiles&gt; 节点，在其中添加SonarQube Scanner的配置，如下图:1234567891011121314151617181920&lt;profiles&gt; &lt;!-- 复制以下内容 --&gt; &lt;profile&gt; &lt;id&gt;sonar&lt;/id&gt; &lt;activation&gt; &lt;activeByDefault&gt;true&lt;/activeByDefault&gt; &lt;/activation&gt; &lt;properties&gt; &lt;!-- 配置 Sonar服务地址，此处为本地服务 --&gt; &lt;sonar.host.url&gt; http://127.0.0.1:9000/ &lt;/sonar.host.url&gt; &lt;/properties&gt; &lt;/profile&gt; &lt;!-- 复制以上内容 --&gt; &lt;/profiles&gt;注意： 若在Maven的 conf 目录下未找到 settings.xml 配置文件，则可以在Maven仓库默认目录 C:\Users\[你登陆账号的用户名]\.m2 下查找。Maven项目目录执行命令分析进入想要检测分析的Maven项目目录，在项目根目录打开命令行，输入命令 mvn sonar:sonar首次进行代码检测扫描时，会下载SonarQube Scanner相关jar包，类似下图：扫描完成后，会看到 BUILD SUCCESS 的提示，到此代码的检测扫描完成。IDEA内通过Maven执行SonarQube Scanner分析下面介绍，在上步操作完成的基础上，怎么在IDEA开发工具内使用使用SonarQube Scanner进行代码检测分析。首先IDEA打开需要检测分析的Maven项目，在 Run/Debug Configurations 中，添加一个Maven的运行配置，具体配置如下：配置完成后，选择此运行方式，点击运行，控制台可以看到类似上步中命令行窗口的输出内容，等待出现 BUILD SUCCES 的提示字样后，表示代码的检测分析完成，此时可以在SonarQube服务内查看分析结果。此处仅测试IDEA环境，Eclipse等其他IDE开发工具自行测试。SonarQube Scanner配置前面说了Maven使用SonarQube Scanner完成对Maven代码的检测分析，下面记录直接下载的SonarQube Scanner配置及使用。SonarQube Scanner下载可以在此处下载支持各种环境的SonarQube Scanner，根据自己需要进行选择即可。在SonarQube官网下载对应系统版本的SonarQube Scanner cli，该版本支持命令行模式。下载完成后，任意目录下解压，目录结构大致如下，目录作用类似SonarQubeSonarQube Scanner配置配置环境变量（为了可以全局使用SonarQube Scanner）验证环境变量是否配置成功添加检测扫描的项目打开SonarQube Scanner的配置文件（..\sonar-scanner-3.2.0.1227-windows\conf\sonar-scanner.properties ) ，配置如下123456789101112131415161718#----- Default SonarQube serversonar.host.url=http://localhost:9000#----- Default source code encodingsonar.sourceEncoding=UTF-8# 配置项目的Key（每个项目唯一的项目键，使用Maven时设置为 &lt;groupId&gt;:&lt;artifactId&gt;）sonar.projectKey=com.codersoft:cms# 配置分析的项目在SonarQube服务界面显示的名称sonar.projectName=cms# 配置分析的项目的版本（使用Maven时取&lt;version&gt;的值）sonar.projectVersion=1.0# 配置要分析的项目根目录sonar.projectBaseDir=D:/work/workspace/gitee/cms/rbac/cms# 配置包含源文件的目录（未设置，则从默认的Maven源代码位置检索）sonar.sources=.添加完成后，命令行窗口，执行命令 sonar-scanner -Dsonar.java.binaries=. （SonarQube的sonar-java-plugin插件版本大于4.12后，不能直接使用 sonar-scanner 命令，需要提供对应源码的字节码，详情看文末异常问题记录）更多SonarQube Scanner内容见SonarQube官网文档， 更多SonarQube配置的分析参数见此处IDEA配置SonarLint插件IDEA支持不少用于代码质量检测的插件，如阿里巴巴的代码规范插件、FindBugs等，此处可以尝试使用SonarLint插件。SonarLint插件安装在IDEA中打开设置界面（ File -&gt; Settings ） , 选择 Plugins 进入IDEA的插件市场搜索 SonarLint 进行安装等待下载安装完成后，重启的IDEA中即可完成安装。安装完成重启IDEA后，会出现如下提示，此时需要对SonarLint插件进行配置安装提示，点击 SonarLint project configuration 进行SonarLint 项目的配置或在设置中进行配置此处关闭远端SonarQube Server的绑定，即使用本地SentLint插件默认的代码检测规则。这样就可以在本地环境下使用默认规则进行代码检测分析，可以点击菜单项 Analyze ，找到 Aanlyze all files with SonarLint 的子菜单项尝试点击此项，来检测分析当前项目的所有文件单个文件的检测，可以在想检测文件右键选择 SonarLint 进行检测，具体操作此处不赘述。SonarLint插件配置SonarQube可以针对项目进行检测规则等设置，要让IDEA中SonarLint插件同步使用SonarQube服务中更新的规则，则需要如下配置配置SonarQube Server支持两种登陆验证方式，此处使用本地SonarQube服务，则使用账号密码登陆（远端项目，可以使用Token验证）绑定配置SonarQube服务内的项目，用于同步检测规则注意：SonarQube没有服务时，此处无法配置，可以通过SonarQube Scanner或Maven来进行项目代码的检测分析，实现项目的添加。配置完成后，回到服务配置界面，点击更新规则，即可获取SonarQube服务上针对该项目配置的检测规则。最后，SonarQube的Token，可以在用户设置里进行增删SonarQube服务内查看分析结果完成代码的分析检测后，可以在浏览器访问SonarQube服务地址，此处为本地搭建服务，则访问地址 http:\\localhost:9000可以在Sonar服务管理页面内看到新扫描的Maven项目的分析报告，此时根据需要查看对应内容，不再赘述。SonarQube Scanner异常问题记录SonarQube Scanner执行 sonar-scanner 命令时，出现错误时，可以通过执行 sonar-scanner -X 来输出详细错误日志，方便问题的排查。异常 AnalysisException: Please provide compiled classes of your project with sonar.java.binaries property该问题原因见官方文档大体意思，自SonarJava 4.12后，不使用Maven或Gradle构建工具来分析代码时，必须手动提供与源代码对应的字节码，否则就会分析失败，并出现该异常提示。可以尝试通过以下方式处理：执行命令修改为 sonar-scanner -Dsonar.java.binaries=.或在配置文件内添加下列配置（追加内容在上文基础上进行）1234567# sonar.sources=.# 此处配置该项目的子项目的源码文件目录sonar.sources=./cms-common/src,./cms-dao/src,./cms-service/src,./cms-tester/src,./cms-web/src# SonarJava 4.12 以后，不使用Maven等构建工具分析代码，则必须手动提供对应源代码的字节码# 此处配置该项目的子项目的class字节码文件目录sonar.java.binaries=./cms-common/target/classes,./cms-dao/target/classes,./cms-service/target/classes,./cms-tester/target/test-classes,./cms-web/target/classes下载SonarJava 4.12之前版本的插件，替换现有版本，插件源码下载地址 ，插件jar包下载地址下载完成后，替换 ..\sonarqube-6.7.5\extensions\plugins\ 目录下的 sonar-java-plugin-xxx.jar （本文SonarQube的SonarJava插件版本为 5.7.0.15470） ，重启SonarQube服务即可。网上很多文章提供第三种方法解决该异常，我下载了 4.10.0.10260 版本的java插件jar包，按照此思路替换插件jar包后，重启服务，如出现下图提示情况且运行 sonar-scanner 命令出现SonarQube服务（本文已经将SonarQube服务配置为系统服务）停止的情况，在尝试清理 c:\user\[你当前登陆计算机的用户名]\.sonar 下的文件全部删除，然后重启服务，依旧出现上文提示，且服务过一段时间也会停止运行。具体原因暂不明确，初步认为是插件版本问题，不知是否还有还是其他问题，未做更多版本测试，本文暂不推荐第三种方法处理，如遇到此情况，且知道解决方案的希望告知，谢谢。]]></content>
      <categories>
        <category>代码质量</category>
        <category>SonarQube</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>SonarQube</tag>
        <tag>SonarQube Sanner</tag>
        <tag>Maven</tag>
        <tag>代码质量</tag>
        <tag>代码分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows系统配置SonarQube本地服务]]></title>
    <url>%2Falex.d-blog%2Fposts%2F9232f8b8%2F</url>
    <content type="text"><![CDATA[Windows系统配置SonarQube本地服务SonarQube简介SonarQube 是一个用于管理源代码质量开放平台，可以从多个维度检测代码质量，快速的定位代码中潜在的或者明显的 Bug、错误，提供重复代码、编码标准、单元测试、代码覆盖率、代码复杂度、潜在Bug、注释和软件设计报告。支持包括 Java、Python、Php、C/C++、C#、HTML、JavaScript、PL/SQL、Objective C 等二十多种编程语言的代码质量管理与检测。通过插件机制，SonarQube可以继承不同的测试工具，代码分析工具，以及持续集成工具。可与IDE（如：Eclipse、IDEA等）集成使用。SonarQube 并不是简单地直接将各种质量检测工具（例如 FindBugs，PMD 等）的结果展现给客户，而是通过不同的插件算法来对这些结果进行再加工，最终以量化的方式来衡量代码质量，从而方便地对不同规模和种类的工程进行相应的代码质量管理。更多相关介绍不在此赘述。SonarQube架构引用SonarQube官网提供的架构图，通过图中描述整个SonarQube的分析分为几个部分：待分析的项目源代码SonarQube Scanner 源代码分析工具SonarQube Server 提供服务，用来提供分析报表及解决方法SonarQube Database 相关分析数据的持久化存储本文则根据主要描述，记录本地Windows下SonarQube Server及Databse的配置。主要环境如下：Windows 10SonarQube 6.7 LTSMySQL 5.7.21JDK1.8.0_152Maven 3.5.3SonarQube服务环境配置基本环境要求本文使用的版本为 SonarQube 6.7.5 LTS , 官方下载地址。安装的基本要求如下：运行SonarQube的唯一先决条件是在您的计算机上安装Java（Oracle JRE 8或OpenJDK 8）SonarQube服务器需要至少2GB的RAM才能有效运行需要的磁盘空间量取决于使用SonarQube分析的代码量MySQL 5.6 +，仅支持InnoDB存储引擎，但不支持MyISAM要获得SonarQube提供的完整体验，必须在浏览器中启用JavaScript，IE11+，其他浏览器建议最新版本更多环境要求，见官方文档官方，详见。另，需要分析Maven项目时，需要本地下载配置Maven，版本Maven 3.0+。SonarQube环境配置官网下载SonarQube后，解压到任意目录（建议，非中文目录），目录结构大致如下：各目录作用如下：bin 此目录放置各操作系统（LInux、Windows、MacOS）用于启动 SonarQube 服务的工具、脚本；conf 此目录存放SonarQube相关配置文件；data 此目录包含嵌入式数据库(H2数据库引擎)的数据，建议只用于测试和演示；elasticsearch 此目录放置elasticsearch检索引擎相关内容；extensions 此目录存放SonarQube的插件、 扩展jar 包；lib 此目录存放SonarQube所依赖的 jar 包；logs 此目录存放SonarQube相关日志信息；tmp此目录包含服务器所需的临时数据，服务器启动时不要清理；web 此目录存放 SonarQube web 服务的静态资源。SonarQube服务数据库配置SonarQube 支持大多数主流关系型数据库（例如 Microsoft SQL Server, MySQL, Oracle, PostgreSQL 等）,默认使用H2数据库，可以直接运行启动，此处配置MySQL数据库。MySQL创建数据库1CREATE DATABASE sonar CHARACTER SET utf8 COLLATE utf8_general_ci;分配用户及权限12345 CREATE USER 'sonar' IDENTIFIED BY 'sonar'; GRANT ALL ON sonar.* TO 'sonar'@'%' IDENTIFIED BY 'sonar'; GRANT ALL ON sonar.* TO 'sonar'@'localhost' IDENTIFIED BY 'sonar';FLUSH PRIVILEGES;修改SonarQube配置文件找到 ..\sonarqube-6.7.5\conf 目录下的 sonar.properties，首先搜索 # User credentials. 配置JDBC连接的用户名及密码（此处为上步创建的用户）：12sonar.jdbc.username=sonarsonar.jdbc.password=sonar搜索 MySQL 5.6 or greater ，配置数据库链接 URL :1sonar.jdbc.url=jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance&amp;useSSL=false到此完成了 MySQL 的简单配置注意： SonarQube支持的为InnoDB引擎，可以在MySQL配置文件内的 [mysqld] 下配置 default-storage-engine=INNODB 来实现创建的表默认使用 InnoDB 引擎。启动服务在目录 ..\sonarqube-6.7.5\bin\windows-x86-64 下，双击 StartSonar.bat 启动服务，出现 [o.s.a.SchedulerImpl] Process[es] is up 提示时，表示 elasticsearch 启动成功此时，可以在浏览器内访问 http://localhost:9000 来登陆SonarQube管理页面 （注意，运行期间不要关闭命令行）首次启动时，会在配置MySQL数据库内生成相关的表及初始化数据到此SonarQube服务启动成功，如想修改访问端口等内容，在 ..\sonarqube-6.7.5\conf\sonar.properties文件内修改。在目录 ..\sonarqube-6.7.5\bin\windows-x86-64 下可以看到多个bat批处理文件InstallNTService.bat 安装sonarqube为系统服务StartNTService.bat 启动sonarqube系统服务StartSonar.bat 命令行启sonarqube服务（关闭命令行即关闭服务）StopNTService.bat 停止sonarqube系统服务UninstallNTService.bat 卸载sonarqube系统服务为了方便，且防止命令行意外关闭导致服务停止等情况，可以通过管理员方式运行 InstallNTService.bat ，将SonarQube服务添加到系统服务中， 或使用 sc 命令自行添加。如出现服务添加到系统服务后，启动立即停止的情况，则通过查看 ..\sonarqube-6.7.5\log 目录下的日志来查看问题，如无日志，尝试卸载服务，尝试使用 sc 命令添加服务。更多 sc 命令内容参看百度百科插件安装启动服务后，可以在SonarQube管理页面的应用市场内添加需要的插件，如汉化包、代码分析插件：Chinese Pack 汉化包插件FindbugsCheckstylePMD服务页面点击登陆，输入用户名密码 ，默认为 admin / admin， 默认密码可以在 ..\sonarqube-6.7.5\conf\sonar.properties文件内修改。首次登陆账号，会提示配置分析的项目及token，可跳过配置完成后，点击 Finish..，进入操作页面下面安装 Chinese Pack (汉化包），演示插件安装。导航栏选择 Administration跳转到Administration页面，选择 Marketplace 进入应用市场安装完成后，出现类似如下提示，点击 restart 重启服务即可等待几秒钟，服务会自动重启，重新登录后，可以看到汉化结果其他插件安装类似如上操作，根据需要选择安装即可。安装相关问题记录及处理启动服务时，提示 “Unable to start JVM”出现类似提示时，可以尝试在文件 ..\sonarqube-6.7.5\conf\wrapper.conf 中添加Java JDK的路径，一般正常配置了Java环境变量，此处不需要配置。启动服务时，提示“另一个程序正在使用此文件，进程无法访问。”启动服务时，出现类似提示，是由于 Java(TM) Platform SE binary此后台进程没有关闭，导致jar包被加载占用，无法访问。此时使用任务管理器，关闭对应进程即可。汉化包插件安装失败安装汉化包，重启后，一直重启状态，或出现其他错误提示，可以尝试在 此处 下载对应SonarQube版本的汉化包，下载完成后，提取jar包，放置到目录 ..\sonarqube-6.7.5\extensions\plugins 下，重启服务即可。]]></content>
      <categories>
        <category>代码质量</category>
        <category>SonarQube</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>SonarQube</tag>
        <tag>代码质量</tag>
        <tag>代码分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客快速生成]]></title>
    <url>%2Falex.d-blog%2Fposts%2F38d24b30%2F</url>
    <content type="text"><![CDATA[Hexo博客快速生成搭建个人静态博客，现在有很多选择，如Jekyll，Hexo，Simple，Octopress，Pelican等等。推荐使用Hexo框架，关于Hexo博客的搭建可以参看以前的文章： GitHub上搭建Hexo个人博客，此处不赘述。在自行配置过程中，会发现很多繁琐的过程，需要花费不少时间，所以在这里分享下自己的博客源文件，可以作为脚手架，快速生成优化后的个人博客。效果大体如下：具体效果，可以访问博客地址查看：https://anyer.github.io/alex.d-blog/https://alex_d.gitee.io/alex.d-blog/最后，附上项目地址，希望对大家有所帮助~~https://gitee.com/alex_d/HexoBlogSourcehttps://github.com/anyer/Hexo_NexT-cli]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[多个git托管平台同时使用时SSH Key的生成及添加]]></title>
    <url>%2Falex.d-blog%2Fposts%2F8b4e7cd5%2F</url>
    <content type="text"><![CDATA[使用一个邮箱注册多个git代码托管平台，如：GitHub、Gitlab、码云等。在用户端，生成对应平台的的 SSH Key 时，会生成对应的 id_rsa 及 id_rsa.pub 公钥文件（默认的密钥文件名取决于算法，此处默认使用RSA算法加密），然后在对应的平台上添加用户生成的 SSH Key 即可，下文将在此基础延伸多个git托管平台使用时，对应的多个秘钥生成及添加。单个平台SSH key生成及添加Windows下需要在 git bash 命令行窗口（也可使用 cmder )，按照下面命令，来生成对应托管平台的 SSH Key 。12ssh-keygen -t rsa -C "对应平台注册的邮箱地址"命令行输出类似如下消息1234567891011121314151617181920$ ssh-keygen -t rsa -C "maple_6392@163.com"Generating public/private rsa key pair.Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in gitee_id_rsa.Your public key has been saved in gitee_id_rsa.pub.The key fingerprint is:SHA256:t86b0RbwMYAVdqGwUQXkuS3ZnL1u4UJBgfjrK7TJkKY maple_6392@163.comThe key's randomart image is:+---[RSA 2048]----+| o*O==o || o*.=. || ..=.o || .O.= || .S =.B.. || + ...+.... || o + +o.o... || E =o.+..o || .*o o. |+----[SHA256]-----+此时在 ~/.ssh 目录下会生成 id_rsa 及 id_rsa.pub 文件.ssh 目录在对应用户的根目录下，即 ： C:\Users\当前用户名\.ssh然后将 id_rsa.pub 文件的内的 SSH Key 添加到对应的平台（此处以GitHub为例)设置内后，通过命令进行验证12ssh -T git@github.com注意， 此处git@后添加对应平台的主域名，如Github的github.com，码云的gitee.com。如果上面命令添加执行后，命令行输出类似内容12Hi yourname（此处为对应git平台的用户名）! You've successfully authenticated...或12Welcome to xxx.com, yourname（此处为对应git平台的用户名）!...则表示对应平台的SSH key生成及部署成功。否则，检查对应的key是否粘贴正确检查操作步骤是否正确Try again ~~~如出现添加了公钥后仍然无法推送代码，则可以参看此处注意： 要使用SSH链接操作远程仓库，Git的Remote要使用SSH地址，关于Remote使用见这里多平台SSH key生成部署此处以 Github 及 码云 为例，做演示说明。类似单平台SSH Key的创建，多个平台生成命令做如下调整：12ssh-keygen -t rsa -C "平台注册的邮箱地址" -f "生成的rsa文件名"注意： -f 后面带的文件名称，不含路径，则生成在当前命令行路径内所在的目录下。更多工具 ssh-keygen 的命令说明及使用见此处通过此命令，依次生成两个平台的key123456$ ssh-keygen -t rsa -C "maple_6392@163.com" -f "github_id_rsa"$ ssh-keygen -t rsa -C "maple_6392@163.com" -f "gitee_id_rsa"# Generating public/private rsa key pair...# 三次回车即可生成 ssh key此时 ~/.ssh 目录下，生成的文件如下此时对应的SSH Key生成成功，具体添加平台的步骤参看上文，添加完成进行验证时，出现如下提示：1234567$ ssh -T git@gitee.comThe authenticity of host 'gitee.com (218.11.0.86)' can't be established.ECDSA key fingerprint is SHA256:FQGC9Kn/eye1W8icdBgrQp+KkGYoFgbVr17bmjey0Wc.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added 'gitee.com,218.11.0.86' (ECDSA) to the list of known hosts.Permission denied (publickey).此时可以参看 Windows下由于SSH配置文件的不匹配，导致的Permission denied (publickey)及其解决方法文章内说创建config文件，结合参考文章 【工具安装和配置】 GIT同时连接gitlab和githubstrong text 尝试后，未解决问题。此处解决，使用 ssh-agent 工具，更多关于此工具的说明见此处。ssh-agent解决Permission denied (publickey)问题首先确定工具是否可以使用12345$ eval `ssh-agent`## 控制台输出类似下面内容，表示该工具可以使用（结果输出为工具的进程PID）# Agent pid 7488注意： Windows系统下需在 git bash 或 cmder 命令行界面下操作使用 ssh-add 工具将 SSH Key 添加到 ssh-agent123456789# 添加GitHub的SSH Key$ ssh-add C:/Users/xxx/.ssh/github_id_rsa# 添加码云的SSH Key$ ssh-add C:/Users/xxx/.ssh/gitee_id_rsa## 此时可能需要输入生成SSH Key时配置的密码（如果有设置的话），成功后输出类似以下内容# Identity added: C:/Users/xxx/.ssh/github_id_rsa (C:/Users/xxx/.ssh/github_id_rsa)# Identity added: C:/Users/xxx/.ssh/gitee_id_rsa (C:/Users/xxx/.ssh/gitee_id_rsa)如出现类似下面提示：123$ ssh-add C:\Users\xxx\.ssh\gitee_id_rsaCould not open a connection to your authentication agent.可以使用 ssh-agent bash --login -i 命令来启动 ssh-agent最后使用 ssh -T git@xxx.com 命令验证Key是否添加成功关于SSH的更多命令可以查看此处虽然通过上面操作可以使用ssh连接多个git平台，但使用git工具 TortoiseGit 进行提交时，依旧会出现 Please make sure you have the correct access rights and the repository exists. 的提示，此时在bash控制台通过 git push 命令则正常提交。。。 此问题待解决，有知道怎么处理的朋友，希望可以告知。]]></content>
      <categories>
        <category>问题处理</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>码云</tag>
        <tag>SSH Key</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo执行清理命令出现警告DEP0061]]></title>
    <url>%2Falex.d-blog%2Fposts%2F932be761%2F</url>
    <content type="text"><![CDATA[问题描述Win10 64位系统下，Node.js版本 v8.11.2 。本地安装部署Hexo执行 hexo clean 命令时出现如下警告：问题处理经过查找，因本地Node.js版本为 v8.11.2 ,而 fs.SyncWriteStream 在 Node.js 8 中已经被废弃而在Hexo的插件 Hexo-tag-cloud 依赖 hexo-fs 及 hexo-log ， 而 hexo-fs 需要 Node.js 6 的支持。此处是Node.js版本不支持导致出现警告。可以尝试切换Node.js版本来处理，Node.js版本控制参看此处。问题总结在Hexo命令执行过程中，如出现问题，可以通过 --debug 查看问题，如：123456789101112131415161718192021222324252627282930313233343536$ hexo clean --debug11:48:34.559 DEBUG Hexo version: 3.7.111:48:34.559 DEBUG Working directory: D:\work\000\blog\11:48:34.684 DEBUG Config loaded: D:\work\000\blog\_config.yml11:48:34.746 DEBUG Plugin loaded: hexo-algolia11:48:34.777 DEBUG Plugin loaded: hexo-deployer-git11:48:34.777 DEBUG Plugin loaded: hexo-fs11:48:34.777 DEBUG Plugin loaded: hexo-generator-archive11:48:34.793 DEBUG Plugin loaded: hexo-generator-baidu-sitemap11:48:34.793 DEBUG Plugin loaded: hexo-generator-category11:48:34.793 DEBUG Plugin loaded: hexo-generator-index11:48:34.824 DEBUG Plugin loaded: hexo-generator-feed11:48:34.824 DEBUG Plugin loaded: hexo-generator-searchdb11:48:34.840 DEBUG Plugin loaded: hexo-generator-sitemap11:48:34.840 DEBUG Plugin loaded: hexo-generator-tag11:48:34.840 DEBUG Plugin loaded: hexo-log11:48:34.840 DEBUG Plugin loaded: hexo-renderer-ejs11:48:34.856 DEBUG Plugin loaded: hexo-renderer-marked11:48:34.856 DEBUG Plugin loaded: hexo-renderer-stylus11:48:34.965 DEBUG Plugin loaded: hexo-server11:48:34.981 DEBUG Plugin loaded: hexo-tag-cloud(node:696) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.11:48:35.043 DEBUG Plugin loaded: hexo-wordcount11:48:35.074 DEBUG Script loaded: themes\next\scripts\merge-configs.js11:48:35.074 DEBUG Script loaded: themes\next\scripts\tags\button.js11:48:35.074 DEBUG Script loaded: themes\next\scripts\tags\exturl.js11:48:35.074 DEBUG Script loaded: themes\next\scripts\tags\center-quote.js11:48:35.074 DEBUG Script loaded: themes\next\scripts\tags\full-image.js11:48:35.090 DEBUG Script loaded: themes\next\scripts\merge.js11:48:35.090 DEBUG Script loaded: themes\next\scripts\tags\label.js11:48:35.090 DEBUG Script loaded: themes\next\scripts\tags\group-pictures.js11:48:35.090 DEBUG Script loaded: themes\next\scripts\tags\note.js11:48:35.090 DEBUG Script loaded: themes\next\scripts\tags\lazy-image.js11:48:35.090 DEBUG Script loaded: themes\next\scripts\tags\tabs.js11:48:35.090 INFO Deleted database.11:48:35.090 DEBUG Database saved通过输出，可以发现在加载 hexo-tag-cloud 插件时出现的问题，快速的定位到了错误，方便问题的排查。因Node.js的快速发展，版本迭代快速，而部分插件因各种因素，并未同步更新，使得使用过程中，会出现不少因版本不符导致的问题，所以在开发过程中，就需要对Node.js的多个版本进行管理，这时就需要一个趁手的工具，此处推荐几款Node.js版本管理工具，如下（排列不分先后，部分工具的对比及使用说明见此处）：nnvmwnvmnodistgnvm参考Node.js 8 说明基于Hexo+Github+Coding搭建个人博客——基础篇(从菜鸟到放弃)]]></content>
      <categories>
        <category>问题处理</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>error</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[免安装版MySQL安装完成后登陆1045错误处理]]></title>
    <url>%2Falex.d-blog%2Fposts%2Faf835572%2F</url>
    <content type="text"><![CDATA[问题描述在Windows 10 64位系统下，免安装MySQL启动3534错误处理 解决后，因安装时未配置密码，则按照网上教程在my.ini配置文件内的[mysqld]项下添加skip_grant_tables，控制台使用命令mysql -u root -p，进入mysql命令行（参考文章 详见），然而并未像参考文章内描述的那样解决问题，控制台出现如下错误：问题处理尝试了很多教程均不可以，最后考虑是否是mysqld --initialize命令导致的问题，尝试查找官网的安装教程，发现该命令初始化数据库时，还会自动生成一个随机密码：然后问题就是随机生成的密码在哪里，这个可以在[官方安装教程]底部看到，明确指出生成的密码在data目录下的错误日志里:按说明到data目录下，可以看到类似下面的错误日志：在错误日志内可以查看到对应生成的随机密码：使用该密码，正常进入mysql命令行模式，之后就可以尝试使用更新语句来更新root账号密码12mysql&gt; ALTER USER 'root'@'localhost' IDENTIFIED BY 'new_password';问题总结在之前配置时出现3534错误，通过mysqld --initialize命令来完成初始化，会对应生成随机密码，并会标记&#39;root&#39;@&#39;localhost&#39;帐户密码过期，然后在错误日志显示输出随机密码。使用该随机密码，即可以登录mysql命令行模式，然后修改root密码，至此，才算配置完成。通过官网配置教程，发现还有另外一个命令mysqld --initialize-insecure，使用该命令初始化数据库时，不会生成随机密码，而是直接标记&#39;root&#39;@&#39;localhost&#39;帐户密码过期，在错误日志内输出类似如下的提示信息：1[Warning] root@localhost is created with an empty password ! Please consider switching off the --initialize-insecure option.官方对于两个命令的说明如下：使用mysqld --initialize-insecure命令初始化数据库后，启动服务，直接通过命令mysql -u root -p（提示输入密码时直接回车）即可进入mysql命令行模式。注意： 数据库配置文件my.ini不需要配置skip_grant_tables!参考官网免安装配置教程mysqld --initialize命令官网说明mysqld --initialize-insecure命令官网说明MySQL-深入分析MySQL ERROR 1045出现的原因]]></content>
      <categories>
        <category>问题处理</category>
        <category>安装部署</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[免安装MySQL启动3534错误处理]]></title>
    <url>%2Falex.d-blog%2Fposts%2F6b3d0e5e%2F</url>
    <content type="text"><![CDATA[问题描述在window10 64位系统环境下，官方下载免安装版MySQL，解压配置后，安装MySQL服务成功，运行时报错，错误提示如下：问题处理因为没有其他错误提示，首先尝试使用命令mysqld --console查看控制台输出，结果如下：此处会发现有ERROR错误提示，不难发现此处的路径有问题，通过检查配置文件my.ini内的路径，发现为转移字符\t导致的此错误：将地址中的斜杠\修改为反斜杠/，如下：删除已经安装的服务，重新安装，重启：此处依旧报错，命令mysqld --console，查看控制台信息：提示配置的数据库存放目录（即my.ini配置文件中配置的datadir，本文配置路径为D:/work/tools/mysql-5.7.21-winx64/data）下表不存在，检查数据库存放目录：通过查看，发下目录下确实不存在mysql相关表。此处错误因为未初始化数据库，导致配置MySQL数据库存放目录下没有生成对应的数据库表，尝试使用mysqld --initialize命令初始化数据库：首先清理配置的数据库数据目录下的文件；mysqld --remove 命令删除服务mysqld --install 命令重新创建服务sc query mysql 命令确认服务是否生成，正常生成，则通过命令mysqld --initialize 初始化数据库最后net start mysql 启动服务运行如下：服务正常启动，此时配置的数据库目录新生成文件如下：问题总结此问题主要有几个原因导致：配置文件不对未创建数据库存放目录创建服务后未初始化直接启动因此，遇到此错误，则在确保正确配置my.ini配置文件后，创建指定的数据库存放目录，然后按照以下命令依次执行即可：12345mysqld --removemysqld --install#记得安装服务后，此处要初始化mysqld --initialize net start mysql]]></content>
      <categories>
        <category>问题处理</category>
        <category>安装部署</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[去除Chrome空白页的缩略图]]></title>
    <url>%2Falex.d-blog%2Fposts%2F4ba92470%2F</url>
    <content type="text"><![CDATA[在Chrome中，打开空白页时，会显示缩略图，呈现最近的访问记录，而再清理浏览器访问记录后，会看到如下效果:界面的显示会显得很不理想，所以找寻去除此处缩略图的方式。本文通过修改Chrome浏览器资源文件内的样式来完成。Chrome新版本处理（2018-11-16更新）因Chrome从62.0.3170.0版本以后，调整了目录结构。原方法及工具失效，此处以版本 70.0.3538.102为例，记录修改方法。目录路径调整老版本Chrome程序路径在 C:\Users\XXX\AppData\Local\Google\Chrome\Application\ 目录下，新版本移动到安装目录 C:\Program Files (x86)\Google\Chrome\Application\下（具体哪个版本做的调整，感兴趣可以自行查找。。。） ，也可以通过 Everything 文件检索工具，搜索 resources.pak来快速定位。Chrome资源文件解压打包工具shuax 提供了针对新版本 （62.0.3170.0以后版本） 的Chrome资源文件 resources.pak 的解压打包工具 ChromePAK V5，并提供了 工具下载 ，地址失效，可以使用下列链接下载（资源来自网络，链接失效，可以添加公众号 AlexD小筑，回复对应关键字，获取最新链接）链接: https://pan.baidu.com/s/1Ds9_YTrhSjYYtQXfEKTIKA 提取码: aui5修改资源文件解压工具 pak_tools，找到对应系统版本的工具，将Chrome的资源文件 resources.pak 拷贝出来，并备份（此处拷贝到 pak_tools工具目录）。在当前目录打开cmd ，并使用 pak_tools 工具命令进行资源解压（可以双击 pak_tools 工具，查看工具的命令及说明）：解压成功后，删除目录下的 resources.pak文件，此时目录下可以找到 resources 目录及 resources.json 配置文件，使用文本编辑器打开 .\resources\unknown目录下的 297 文件，注释掉文件中的 &lt;div id=&quot;most-visited&quot;&gt;&lt;/div&gt; ，保存退出。然后使用 pak_tools 工具，重新打包资源，打包成功后，关闭Chrome浏览器，替换Chrome目录下的资源文件 resources.pak 文件，最后重启Chrome即可看到效果。修改Chrome资源文件css样式实现（Chrome老版本处理方法）使用Chrome的开发者工具定位缩略图可以看到缩略图对应的ID标签为#most-visited，接下来就是找到这个标签对应的样式，进行修改使用ChromePAK工具对Chrome的资源文件resources.pak文件进行解包使用chrome:version产看当前Chrome的版本及可执行文件目录老版本ChromePAK会出现无法解包新版本Chrome的情况，尝试使用新版本ChromePAK处理，新版本ChromePAK在此处下载（作者有很多不错的小工具，可以尝试使用）访问Chrome可执行文件目录C:\Users\XXX\AppData\Local\Google\Chrome\Application\，进入对应版本目录找到resources.pak文件下载ChromePAK，解压后，将resources.pak文件移动到ChromePAK解压文件内运行解压目录下的pak.exe文件，进行解包进入resources\guess 目录，找到315.css文件，并进行修改修改完成后，保存，再次点击pak.exe，进行打包用新的resources.pak文件替换现有Chrome使用的资源文件，替换时，如出现如下提示，请关闭Chrome浏览器重试至此，通过修改css方式去除缩略图完成，最终效果如下：]]></content>
      <categories>
        <category>问题处理</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Open With Atom右键菜单失效]]></title>
    <url>%2Falex.d-blog%2Fposts%2Fb93e94bc%2F</url>
    <content type="text"><![CDATA[问题描述更换Win7系统后，重新安装了1.18.0版的Atom，右键菜单中的”Open With Atom”项失效， 且加载不了Atom的图标问题，如下图：尝试重新安装Atom后，依旧出现类似问题。问题分析此处应该是程序安装时，注册表项没有注册完成，或安装后使用软件进行了注册表清理。具体原因不确定，有知道的朋友，望告知~问题解决首先修复右键点击目录或空白处时Atom图标不显示及“Open With Atom”无效的情况：打开注册表编辑器(Win + R运行窗口键入regedit快速启动)找到[HKEY_CLASSES_ROOT\Directory\shell\Atom]及[HKEY_CLASSES_ROOT\Directory\Background\shell\Atom]两项，看到类似下图：点击上面的Atom项，右侧添加新的字符串值，名字为Icon,值为&quot;C:\Users\[此处为当前计算机用户名，如：Administrator]\AppData\Local\atom\app.ico&quot;（注意检查app.ico链接的有效性！），修改结果如：在左侧上面的Atom项上右键，新建“项”，名字命名为command,点击“command”项，修改右侧的(默认)项，值为&quot;C:\Users\[此处为当前计算机用户名，如：Administrator]\AppData\Local\atom\[此处为atom版本目录，如app-1.8.0]\atom.exe&quot; &quot;%V&quot;,其中的app-1.18.0为本文安装的atom版本对应的目录，此处根据个人具体版本进行替换（注意检查atom.exe链接的有效性！），修改结果如下：下面的Atom项，操作如上，最终结果如下：至此，右键菜单“Open With Atom”项在文件夹及文件夹内空白处右键显示正常，且可以正常打开对应的文件夹。但此时依旧无法在单个文件上起效果。修复右键点击单个文件时Atom图标不显示及“Open With Atom”无效的情况：注册表编辑器中，找到[HKEY_CLASSES_ROOT\*\shell\Atom]项，如下图：此处可以看到，注册表内的版本（1.2.4）和安装的版本（1.18.0）不匹配（可能是更新或卸载时没有清理干净导致）,且此处的Icon对应的值为atom.exe而不是app.ico修改为对应的版本即可（注意检查app-1.18.0目录链接的有效性）。如Atom项没有此图中的Icon字符串值及command项，则根据上续步骤添加对应的值，注意此处的command的值为&quot;C:\Users\[此处为当前计算机用户名，如：Administrator]\AppData\Local\atom\[此处为atom版本目录，如app-1.8.0]\atom.exe&quot; &quot;%1&quot;做类似前面的修改，最终结果如下：\小记贴出修复此问题的.reg代码，使用方式：复制下列代码到新建的文本文档，做对应修改（主要修改当前计算机用户名及atom的版本目录），保存文件，重命名xxx.reg（xxx可以任意），右键执行“合并”，即可快速添加到注册表。修复右键点击目录（文件夹）时Atom图标不显示及“Open With Atom”无效的情况：12345678Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\Directory\shell\Atom]@=&quot;Open with Atom&quot;&quot;Icon&quot;=&quot;C:\\Users\\[此处为当前计算机用户名，如：Administrator]\\AppData\\Local\\atom\\app.ico\&quot;[HKEY_CLASSES_ROOT\Directory\shell\Atom\command]@=&quot;\&quot;C:\\Users\\[此处为当前计算机用户名，如：]\\AppData\\Local\\atom\\[此处为atom版本目录，如app-1.8.0]\\atom.exe\&quot; \&quot;%V\&quot;修复右键点击目录空白处时Atom图标不显示及“Open With Atom”无效的情况：12345678Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\Directory\Background\shell\Atom]@=&quot;Open with Atom&quot;&quot;Icon&quot;=&quot;C:\\Users\\[此处为当前计算机用户名，如：Administrator]\\AppData\\Local\\atom\\app.ico\&quot;[HKEY_CLASSES_ROOT\Directory\shell\Atom\command]@=&quot;\&quot;C:\\Users\\[此处为当前计算机用户名，如：]\\AppData\\Local\\atom\\[此处为atom版本目录，如app-1.8.0]\\atom.exe\&quot; \&quot;%V\&quot;首先修复右键点击目录或空白处时Atom图标不显示及“Open With Atom”无效的情况：12345678Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\*\shell\Atom]@=&quot;Open with Atom&quot;&quot;Icon&quot;=&quot;C:\\Users\\[此处为当前计算机用户名，如：Administrator]\\AppData\\Local\\atom\\app.ico\&quot;[HKEY_CLASSES_ROOT\Directory\shell\Atom\command]@=&quot;\&quot;C:\\Users\\[此处为当前计算机用户名，如：]\\AppData\\Local\\atom\\[此处为atom版本目录，如app-1.8.0]\\atom.exe\&quot; \&quot;%1\&quot;至此Atom的右键Open With Atom图标不现实及功能失效解决，其他程序，操作类似~]]></content>
      <categories>
        <category>问题处理</category>
      </categories>
      <tags>
        <tag>Atom</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows小技巧 -- 关机时清理系统垃圾]]></title>
    <url>%2Falex.d-blog%2Fposts%2F59d07c0b%2F</url>
    <content type="text"><![CDATA[虽然垃圾清理时“老生常谈”的事情了，但由于不太喜欢管家等套件工具，又觉得CCleaner、FCleaner、Glary Utilities等这样的清理维护工具要安装、破解、点击清理等比较繁琐。所以，最后又回归bat批处理清理垃圾的老路。本文简单整理记录下，关于关机时自动调用批处理文件清理系统垃圾的实现。垃圾文件Windows在安装和使用过程中产生的垃圾：临时文件（如.tmp、._mp等）临时备份文件（如.bak、.old、*.syd等）临时帮助文件（*.gid）磁盘检查数据文件（*.chk）.dir、.dmp、*.nch等其他临时文件软件等使用垃圾：暴风影音、爱奇艺等播放器的播放记录office等办公软件的使用记录QQ、WeChat等使用时产生的一些零时文件其他软件应用软件使用时的记录等浏览器使用的垃圾：Cookies历史记录（包括地址栏历史记录）各种密码表单账户脱机缓存文件（图片）各种搜索记录等。清理系统垃圾的批处理文件关于清理系统垃圾的批处理代码网上很多，这里提供一种做参考。12345678910111213141516171819202122@echo offecho -----------------------------------------------------------------------echo 清空清空COOKIES和IE临时文件目录...rem del /f /q %userprofile%\COOKIES s\*.*rem del /f /q %userprofile%\recent\*.*del /f /s /q "%userprofile%\Local Settings\Temporary Internet Files\*.*"del /f /s /q "%temp%\*.*"echo 清除系统临时文件...:del /f /s /q %systemdrive%\*.tmp:del /f /s /q %systemdrive%\*._mp:rd /s /q %windir%\temp &amp; md %windir%\tempecho 备注：其它系统临时文件比如日志类要谨慎清理，如果不需要也可以直接在上面一句下增加其它文件删除即可。echo 清空垃圾箱，备份文件和预缓存脚本...:del /f /s /q %systemdrive%\recycled\*.*:del /f /s /q %windir%\*.bak:del /f /s /q %windir%\prefetch\*.*echo 清理SYSTEM32\DLLCACHE下无用文件...:%windir%\system32\sfc.exe /purgecacheecho 清除完成！echo -----------------------------------------------------------------------pause批处理文件创建新建文本文档，复制粘贴上面代码后，保存时名称任意（便于自己记忆就好），最后修改此文本文档的格式（.txt）为 .bat 格式，即可以生成批处理文件，双击即可执行。添加到关机脚本中添加到关机组策略中，以满足关机时自动调用批处理文件对垃圾文件的清理。快捷键 Win + R - “运行” - 输入gpedit.msc - 回车打开“本地组策略编辑器”“本地计算机 策略” - “计算机配置” - “Windows 设置” - “脚本（启动/关机）” - 双击右侧的“关机” - “关机属性”中点击“添加（D）..” - “添加脚本”窗口中点击“浏览（B）..” - 找到本地刚新建的清理垃圾的bat文件：”添加脚本后，可以在关机属性中，看到新添加的脚本，此时点击“应用” - “确定” 即可完成配置：当然，根据自己的需要，也可以在系统启动、登陆、注销等时候添加一些脚本，操作步骤类似。不会的话，可以参考微软官方文档，地址见扩展阅读。扩展阅读微软官网文档 - 使用启动、关机、登录和注销脚本.aspx)]]></content>
      <categories>
        <category>Windows小技巧</category>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C#静态调用带有SoapHeader验证的WebService]]></title>
    <url>%2Falex.d-blog%2Fposts%2F96d3be06%2F</url>
    <content type="text"><![CDATA[本文记录带有SoapHeader验证的WebServices服务创建、部署及C#中的静态调用方法，基于 Windows8.1、Visual Studio 2013、IIS8 环境实现。WebServices服务创建Visual Studio 2013中创建WebServices创建一个空的 ASP.NET Web 应用程序 ：创建 WebService 服务的程序（asmx格式）文件：首次右键“添加”时，看不到图中所示的 “Web 服务（ASMX）” ，可以点击“新建项（W）”来实现创建：到此 WebService 服务创建完成，可以看到如下基础代码:快捷键 F5 或 ctrl + F5 运行程序如下：此时可以点击页面的 Hello World 跳转到基于 HTTP POST 协议的调用测试页面 ：点击“调用”即可以在新的页面看到返回的结果：添加SoapHeader验证创建基础的WebService服务后，根据需要，有时服务会需要权限来保证安全，这里通过添加SoapHeader验证（即Soap的头信息验证）来实现。首先需要我们自己去实现一个有身份验证信息的类，这个类继承于 System.Web.Services.Protocols.SoapHeader , 代码如下：12345678910111213141516171819202122232425262728293031323334/// &lt;summary&gt;/// 自定义MySoapHeader类/// &lt;/summary&gt;public class MySoapHeader : System.Web.Services.Protocols.SoapHeader &#123; private string userName; private string passWord; public MySoapHeader() &#123; &#125; public MySoapHeader(string userName, string passWord) &#123; this.userName = userName; this.passWord = passWord; &#125; public string UserName &#123; set &#123; userName = value; &#125; get &#123; return userName; &#125; &#125; public string PassWord &#123; set &#123; passWord = value; &#125; get &#123; return passWord; &#125; &#125;&#125;2.修改WebService类1234567891011121314151617181920212223242526272829/// &lt;summary&gt; /// WebService1 的摘要说明 /// &lt;/summary&gt; [WebService(Namespace = &quot;http://tempuri.org/&quot;)] [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)] [System.ComponentModel.ToolboxItem(false)] // 若要允许使用 ASP.NET AJAX 从脚本中调用此 Web 服务，请取消注释以下行。 // [System.Web.Script.Services.ScriptService] public class WebService1 : System.Web.Services.WebService &#123; public MySoapHeader soapHeader; [WebMethod(Description=&quot;SoapHeader验证&quot;)] [System.Web.Services.Protocols.SoapHeader(&quot;soapHeader&quot;)] public string HelloWorld() &#123; //简单验证用户信息 //可以通过数据库或其他方式验证 if (&quot;admin&quot;.Equals(soapHeader.UserName) &amp; &quot;admin123&quot;.Equals(soapHeader.PassWord)) &#123; return &quot;用户验证通过！&quot;; &#125; else &#123; return &quot;对不起，您没有访问权限！&quot;; &#125; &#125; &#125;至此实现了SoapHeader验证的添加，此处注意Webservice类中的方法上添加上SoapHeader特性。即上面代码中的[System.Web.Services.Protocols.SoapHeader(&quot;soapHeader&quot;)]此处为简单实现，高级实现，可以参考MSDN提供的 教程文档WebService服务部署WebService服务程序的发布编写好的web程序或者服务等，可以通过发布直接部署到服务器。这里没有远程服务器，所以使用本地的IIS服务器来运行WebService服务。发布方式如下：后面两项配置默认即可，此时点击发布按钮，等待控制台显示如下提示，即表示发布成功：此时可以在发布的目录中看到如下文件：本地IIS服务部署在本地IIS的部署可以参看前文 Windows8.1中IIS服务安装及站点配置 中站点部署的部分。部署后浏览结果如下：WebService的调用创建客户端创建控制台应用程序，用来调用测试。添加引用新建完项目后，需要引用WebService服务，用于调用WebService添加完引用后，打开“Program.cs”文件的Main方法中输入以下语句：1234567891011121314151617181920212223242526272829303132using System;using System.Collections.Generic;using System.Linq;using System.Text;namespace TestService&#123; class Program &#123; static void Main(string[] args) &#123; //创建WebService服务实例 MyWebServices.WebService1SoapClient service = new MyWebServices.WebService1SoapClient(); //创建自定义SoapHeader对象实例 MyWebServices.MySoapHeader header = new MyWebServices.MySoapHeader(); //未设置SoapHeader的服务调用 Console.WriteLine(&quot;未设置SoapHeader的服务调用:&quot; + service.HelloWorld(header)); Console.WriteLine(); //将用户名与密码存入SoapHeader; header.UserName = &quot;admin&quot;; header.PassWord = &quot;admin123&quot;; ////设置SoapHeader的服务调用 Console.WriteLine(&quot;未设置SoapHeader的服务调用:&quot; + service.HelloWorld(header)); Console.Read(); &#125; &#125;&#125;运行后，测试结果如下：源码： C#静态调用带有SoapHeader验证的WebServices参考及推荐关于Web Services学习，可以看这里：w3school 提供的系列教程MSDN的ASP.NET XML Web services 基础知识关于IIS Express和本地IIS服务的一些介绍比较，可以看这里]]></content>
      <categories>
        <category>C#</category>
        <category>WebService</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>SoapHeader</tag>
        <tag>WebService</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C#动态调用带有SoapHeader验证的WebService]]></title>
    <url>%2Falex.d-blog%2Fposts%2Fc9ff6b6b%2F</url>
    <content type="text"><![CDATA[本文记录C#中通过反射动态的调用带有SoapHeader验证的WebServices服务，基于 Windows8.1、Visual Studio 2013、IIS8 环境实现。关于WebService创建、部署及静态调用等内容，可以见：C#静态调用带有SoapHeader验证的WebService。创建动态调用类创建一个客户端控制台程序，并新建类DynamicInvokeService.cs , 文件内容如下：using System;using System.Collections.Generic;using System.Linq;using System.Web;using System.Net;using System.IO;using System.Web.Services.Description;using System.CodeDom;using Microsoft.CSharp;using System.CodeDom.Compiler;using System.Reflection;namespace DynamicInvoke&#123; /// &lt;summary&gt; /// Web Service服务类 /// &lt;/summary&gt; public class WSHelper &#123; /// &lt; summary&gt; /// 动态调用web服务 （不含有SoapHeader） /// &lt; /summary&gt; /// &lt; param name=&quot;url&quot;&gt;WSDL服务地址&lt; /param&gt; /// &lt; param name=&quot;methodname&quot;&gt;方法名&lt; /param&gt; /// &lt; param name=&quot;args&quot;&gt;参数&lt; /param&gt; /// &lt; returns&gt;&lt; /returns&gt; public static object InvokeWebService(string url, string methodname, object[] args) &#123; return WSHelper.InvokeWebService(url, null, methodname, null, args); &#125; /// &lt;summary&gt; /// 动态调用web服务（含有SoapHeader） /// &lt;/summary&gt; /// &lt;param name=&quot;url&quot;&gt;&lt;/param&gt; /// &lt;param name=&quot;methodname&quot;&gt;&lt;/param&gt; /// &lt;param name=&quot;soapHeader&quot;&gt;&lt;/param&gt; /// &lt;param name=&quot;args&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static object InvokeWebService(string url, string methodname, SoapHeader soapHeader, object[] args) &#123; return WSHelper.InvokeWebService(url, null, methodname, soapHeader, args); &#125; /// &lt; summary&gt; /// 动态调用web服务 /// &lt; /summary&gt; /// &lt; param name=&quot;url&quot;&gt;WSDL服务地址&lt; /param&gt; /// &lt; param name=&quot;classname&quot;&gt;类名&lt; /param&gt; /// &lt; param name=&quot;methodname&quot;&gt;方法名&lt; /param&gt; /// &lt; param name=&quot;args&quot;&gt;参数&lt; /param&gt; /// &lt; returns&gt;&lt; /returns&gt; public static object InvokeWebService(string url, string classname, string methodname, SoapHeader soapHeader, object[] args) &#123; string @namespace = &quot;EnterpriseServerBase.WebService.DynamicWebCalling&quot;; if ((classname == null) || (classname == &quot;&quot;)) &#123; classname = WSHelper.GetWsClassName(url); &#125; try &#123; //获取WSDL WebClient wc = new WebClient(); Stream stream = wc.OpenRead(url + &quot;?WSDL&quot;); ServiceDescription sd = ServiceDescription.Read(stream); ServiceDescriptionImporter sdi = new ServiceDescriptionImporter(); sdi.AddServiceDescription(sd, &quot;&quot;, &quot;&quot;); CodeNamespace cn = new CodeNamespace(@namespace); //生成客户端代理类代码 CodeCompileUnit ccu = new CodeCompileUnit(); ccu.Namespaces.Add(cn); sdi.Import(cn, ccu); CSharpCodeProvider icc = new CSharpCodeProvider(); //设定编译参数 CompilerParameters cplist = new CompilerParameters(); cplist.GenerateExecutable = false; cplist.GenerateInMemory = true; cplist.ReferencedAssemblies.Add(&quot;System.dll&quot;); cplist.ReferencedAssemblies.Add(&quot;System.XML.dll&quot;); cplist.ReferencedAssemblies.Add(&quot;System.Web.Services.dll&quot;); cplist.ReferencedAssemblies.Add(&quot;System.Data.dll&quot;); //编译代理类 CompilerResults cr = icc.CompileAssemblyFromDom(cplist, ccu); if (cr.Errors.HasErrors) &#123; System.Text.StringBuilder sb = new System.Text.StringBuilder(); foreach (System.CodeDom.Compiler.CompilerError ce in cr.Errors) &#123;http://localhost:38076/Properties/ sb.Append(ce.ToString()); sb.Append(System.Environment.NewLine); &#125; throw new Exception(sb.ToString()); &#125; //保存生产的代理类，默认是保存在bin目录下面 TextWriter writer = File.CreateText(&quot;MyWebServices.cs&quot;); icc.GenerateCodeFromCompileUnit(ccu, writer, null); writer.Flush(); writer.Close(); //生成代理实例 System.Reflection.Assembly assembly = cr.CompiledAssembly; Type t = assembly.GetType(@namespace + &quot;.&quot; + classname, true, true); object obj = Activator.CreateInstance(t); #region 设置SoapHeader FieldInfo client = null; object clientkey = null; if (soapHeader != null) &#123; client = t.GetField(soapHeader.ClassName + &quot;Value&quot;); //获取客户端验证对象 soap类 Type typeClient = assembly.GetType(@namespace + &quot;.&quot; + soapHeader.ClassName); //为验证对象赋值 soap实例 clientkey = Activator.CreateInstance(typeClient); //遍历属性 foreach (KeyValuePair&lt;string, object&gt; property in soapHeader.Properties) &#123; typeClient.GetField(property.Key).SetValue(clientkey, property.Value); // typeClient.GetProperty(property.Key).SetValue(clientkey, property.Value, null); &#125; &#125; #endregion if (soapHeader != null) &#123; //设置Soap头 client.SetValue(obj, clientkey); //pro.SetValue(obj, soapHeader, null); &#125; //调用指定的方法 System.Reflection.MethodInfo mi = t.GetMethod(methodname); //方法名错误（找不到方法），给出提示 if (null == mi) &#123; return &quot;方法名不存在，请检查方法名是否正确！&quot;; &#125; return mi.Invoke(obj, args); // PropertyInfo propertyInfo = type.GetProperty(propertyname); //return propertyInfo.GetValue(obj, null); &#125; catch (Exception ex) &#123; throw new Exception(ex.InnerException.Message, new Exception(ex.InnerException.StackTrace)); &#125; &#125; private static string GetWsClassName(string wsUrl) &#123; string[] parts = wsUrl.Split(&apos;/&apos;); string[] pps = parts[parts.Length - 1].Split(&apos;.&apos;); return pps[0]; &#125; /// &lt;summary&gt; /// 构建SOAP头，用于SoapHeader验证 /// &lt;/summary&gt; public class SoapHeader &#123; /// &lt;summary&gt; /// 构造一个SOAP头 /// &lt;/summary&gt; public SoapHeader() &#123; this.Properties = new Dictionary&lt;string, object&gt;(); &#125; /// &lt;summary&gt; /// 构造一个SOAP头 /// &lt;/summary&gt; /// &lt;param name=&quot;className&quot;&gt;SOAP头的类名&lt;/param&gt; public SoapHeader(string className) &#123; this.ClassName = className; this.Properties = new Dictionary&lt;string, object&gt;(); &#125; /// &lt;summary&gt; /// 构造一个SOAP头 /// &lt;/summary&gt; /// &lt;param name=&quot;className&quot;&gt;SOAP头的类名&lt;/param&gt; /// &lt;param name=&quot;properties&quot;&gt;SOAP头的类属性名及属性值&lt;/param&gt; public SoapHeader(string className, Dictionary&lt;string, object&gt; properties) &#123; this.ClassName = className; this.Properties = properties; &#125; /// &lt;summary&gt; /// SOAP头的类名 /// &lt;/summary&gt; public string ClassName &#123; get; set; &#125; /// &lt;summary&gt; /// SOAP头的类属性名及属性值 /// &lt;/summary&gt; public Dictionary&lt;string, object&gt; Properties &#123; get; set; &#125; /// &lt;summary&gt; /// 为SOAP头增加一个属性及值 /// &lt;/summary&gt; /// &lt;param name=&quot;name&quot;&gt;SOAP头的类属性名&lt;/param&gt; /// &lt;param name=&quot;value&quot;&gt;SOAP头的类属性值&lt;/param&gt; public void AddProperty(string name, object value) &#123; if (this.Properties == null) &#123; this.Properties = new Dictionary&lt;string, object&gt;(); &#125; Properties.Add(name, value); &#125; &#125; &#125;&#125;注意代码中有如下代码：123456//保存生产的代理类，默认是保存在bin目录下面 TextWriter writer = File.CreateText(&quot;MyWebServices.cs&quot;);icc.GenerateCodeFromCompileUnit(ccu, writer, null);writer.Flush();writer.Close();此代码可以保存生成的代理类，可以在工程目录下的bin目录下查看文件。测试端代码1234567891011121314151617181920212223242526272829303132333435363738using System;using System.Collections.Generic;using System.Linq;using System.Text;namespace DynamicInvokeService&#123; class Program &#123; static void Main(string[] args) &#123; string url = &quot;http://192.168.1.109:81/WebService1.asmx&quot;; //string url = &quot;http://192.168.1.109:82/WebService2.asmx&quot;; Dictionary&lt;string, object&gt; properties = new Dictionary&lt;string, object&gt;(); properties.Add(&quot;UserName&quot;, &quot;admin&quot;); properties.Add(&quot;PassWord&quot;, &quot;admin123&quot;); DynamicInvoke.WSHelper.SoapHeader soapHeader = new DynamicInvoke.WSHelper.SoapHeader(&quot;MySoapHeader&quot;, properties); Object obj1 = DynamicInvoke.WSHelper.InvokeWebService(url, &quot;HelloWorld&quot;, null); Object obj2 = DynamicInvoke.WSHelper.InvokeWebService(url, &quot;HelloWorld&quot;, soapHeader, null); Object obj3 = DynamicInvoke.WSHelper.InvokeWebService(url, &quot;getNum&quot;, new Object[] &#123; 1, 2 &#125;); Object obj4 = DynamicInvoke.WSHelper.InvokeWebService(url, &quot;getNum&quot;, soapHeader, new Object[] &#123; 1, 2 &#125;); Object obj5 = DynamicInvoke.WSHelper.InvokeWebService(url, &quot;getList&quot;, null); Object obj6 = DynamicInvoke.WSHelper.InvokeWebService(url, &quot;getList&quot;, soapHeader, null); Console.WriteLine(&quot;无SoapHeader调用HelloWorld：&quot; + obj1); Console.WriteLine(&quot;有SoapHeader调用HelloWorld：&quot; + obj2); Console.WriteLine(&quot;无SoapHeader调用getNum：&quot; + obj3); Console.WriteLine(&quot;有SoapHeader调用getNum：&quot; + obj4); Console.WriteLine(&quot;无SoapHeader调用无验证方法getList：&quot; + obj5.GetType().IsArray); Console.WriteLine(&quot;有SoapHeader调用无验证方法getList：&quot; + obj6); Console.ReadKey(); &#125; &#125;&#125;运行后测试结果显示如下：源码：C#动态调用带有SoapHeader验证的WebServices]]></content>
      <categories>
        <category>C#</category>
        <category>WebService</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>SoapHeader</tag>
        <tag>WebService</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows8.1中IIS服务安装及站点配置]]></title>
    <url>%2Falex.d-blog%2Fposts%2F291f04db%2F</url>
    <content type="text"><![CDATA[IIS介绍IIS（Internet Information Services，互联网信息服务）,是由微软公司提供的基于运行Microsoft Windows的互联网基本服务。IIS是一个World Wide Web server。Gopher server和FTP server全部包容在里面。 IIS意味着你能发布网页，并且有ASP（Active Server Pages）、JAVA、VBscript产生页面，有着一些扩展功能。IIS支持一些有趣的东西，像有编辑环境的界面（FRONTPAGE）、有全文检索功能的（INDEX SERVER）、有多媒体功能的（NET SHOW） 其次,IIS是随Windows NT Server 4.0一起提供的文件和应用程序服务器，是在Windows NT Server上建立Internet服务器的基本组件。它与Windows NT Server完全集成，允许使用Windows NT Server内置的安全性以及NTFS文件系统建立强大灵活的Internet/Intranet站点。IIS（Internet Information Server，互联网信息服务）是一种Web（网页）服务组件，其中包括Web服务器、FTP服务器、NNTP服务器和SMTP服务器，分别用于网页浏览、文件传输、新闻服务和邮件发送等方面，它使得在网络（包括互联网和局域网）上发布信息成了一件很容易的事。。 —— 百度百科IIS安装1. 打开“控制面板” - “程序”- “启用或关闭 Windows 功能”：2. 选择“Internet 信息服务（或Internet Information Services）”项，勾选IIS服务相关功能（按需勾选）：3. 确定安装:点击确定后会出现搜索文件的提示框：此时系统有过更新，则会直接安装，如没有更新文件，会提示下载：此时点击“从 Windows 更新下载文件”，等待下载完成后，会自动安装功能。注：在下载时，可能会提示错误代码：0x800F0906，这个是.NET Framework 3.5安装时提示的错误，解决方法可以看这里或这里。出现此错误提示时，按上述解决方法安装.NET 3.5后再重复IIS安装步骤，即可快速完成。另，附上Microsoft .NET Framework 3.5 Service Pack 1 下载地址IIS服务配置1. 快捷键 WIN + X - “计算机管理”:2.选择IIS管理器弹出的窗口选择“是”以后，注意启动万维网发布服务（W3SVC）：注： 在启动IIS服务前，需要先启动万维网发布服务，不然会出现“万维网发布服务(W3SVC)已经停止。除非万维网发布服务(W3SVC)正在运行,否则无法启动网站。”的错误提示。启动万维网发布服务后，就可以发现 Default Web Site 的网站管理的状态为启动：启动IIS服务后即可以浏览网站，出现类似下图结果表示IIS安装配置完成：IIS服务器站点配置1. “控制面板” - “管理工具”-“Internet Information Services（IIS）管理器”：2. 如图，网站上右键，“添加站点”：设置完成后，可以在“网站”下看到自己最新添加的站点。如，此处新增站点“HelloWorld”:注： 在填写新添加网站信息时，注意端口值，避免冲突。（当其他网站运行时，端口出现冲突时，会有窗口提醒。）3. 设置完成后，启动万维网发布服务（W3SVC），然后在新站点名称上右键 - “网站管理”- “浏览”，会出现如下错误提示页面：错误提示页面中，清楚的说明了错误可能的原因及解决方法，按照其解决步骤操作后，即可运行成功：设置好目录浏览，再次浏览时，会发现403错误不见了，但只是显示目录结构，此处是“index.aspx”文件不再“默认文档”的配置中，这里添加上，即可解决：最终运行结果：]]></content>
      <categories>
        <category>安装部署</category>
      </categories>
      <tags>
        <tag>Windows 8.1</tag>
        <tag>IIS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MyBatis Generator 异常错误记录]]></title>
    <url>%2Falex.d-blog%2Fposts%2Fd4a4ba8b%2F</url>
    <content type="text"><![CDATA[本文记录在命令行运行 MyBatis Generator 下出现的错误，链接 MySQL 数据库。本文中命令行运行 MyBatis Generator 语句如下：1java -jar mybatis-generator-core-x.x.x.jar -configfile generatorConfig.xml -overwriteError: Unable to access jarfile mybatis-generator-core-x.x.x.jar即命令行中的 mybatis-generator-core-x.x.x.jar文件找不到。遇到这个错误可以通过绝对路径或复制该jar到 generatorConfig.xml 目录下。运行后，当前错误会变为其他提示。Exception in thread “main” java.lang.RuntimeException: Exception getting JDBC Driver在命令行中这个错误会有清晰的错误原因提示：错误提示中清晰的说明了异常为 jdbc.driver 的类找不到，即没有加载jdbc的jar包。应该在 generatorConfig.xml 文件中配置&lt;classPathEntry&gt; 元素（详见）：此处的数据库驱动jar包路径为绝对路径（此处jar包与配置文件同目录）。如出现类似以下错误：1Exception in thread "main" java.lang.RuntimeException: Cannot resolve classpath entry: xx/mysql-connector-java-x.x.x.jar表示此处的路径配置错误，修改为对应绝对路径即可。Table configuration with catalog null, schema null, and table user did not resolve to any tables出现这个错误表示表（此处为user表）没有创建，只要在数据库中创建对应的表即可。参考MyBatis Generator官方手册（中文）]]></content>
      <categories>
        <category>问题处理</category>
        <category>自动化构建</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>MyBatis Generator</tag>
        <tag>Error</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows小技巧 -- 目录内打开CMD的快捷方式]]></title>
    <url>%2Falex.d-blog%2Fposts%2Fc00e8cd4%2F</url>
    <content type="text"><![CDATA[在工作中常常会有需要在某个文件夹内使用cmd的情况，例如运行某脚本，下面演示几种方法。以进入以下目录操作为例：“姿势”一 ： 常用的cd命令cd命令是我们平常使用比较多的方式：Win+R打开cmd窗口，默认显示如下（非管理员模式）；此时需要依次键入命令e: cd github cd anyer cd Wechat-Weapp或e: cd github\anyer\WeChat-WeApp\或 cd E:\github\anyer\WeChat-WeApp\（没有进入指定目录时，再键入一个）3.进行操作。“姿势”二 ： 鼠标右键的快捷方式显然经历了上面的多个命令，是不是感觉很忧桑，下面来个快捷点的方式：1.Win+E资源管理器快速进入指定目录；2.Shift+鼠标右键出现选项菜单选择在此处打开命令窗口(W)项；3.进行操作。上述方式仅支持当前用户（非管理员）权限的cmd，当需要管理员权限时，可以尝试下面方式。给右键添加管理员方式运行命令行窗口，使用下面代码，复制代码，保存为任意名称.reg，即保存为注册表文件。12345678910111213141516171819202122232425262728293031323334353637383940414243Windows Registry Editor Version 5.00; Created by: Shawn Brink; http://www.sevenforums.com; Tutorial: http://www.sevenforums.com/tutorials/47415-open-command-window-here-administrator.html[-HKEY_CLASSES_ROOT\Directory\shell\runas][HKEY_CLASSES_ROOT\Directory\shell\runas]@="Open cmd here as Admin""HasLUAShield"=""[HKEY_CLASSES_ROOT\Directory\shell\runas\command]@="cmd.exe /s /k pushd \"%V\""[-HKEY_CLASSES_ROOT\Directory\Background\shell\runas][HKEY_CLASSES_ROOT\Directory\Background\shell\runas]@="Open cmd here as Admin""HasLUAShield"=""[HKEY_CLASSES_ROOT\Directory\Background\shell\runas\command]@="cmd.exe /s /k pushd \"%V\""[-HKEY_CLASSES_ROOT\Drive\shell\runas][HKEY_CLASSES_ROOT\Drive\shell\runas]@="Open cmd here as Admin""HasLUAShield"=""[HKEY_CLASSES_ROOT\Drive\shell\runas\command]@="cmd.exe /s /k pushd \"%V\""保存后，双击此文件，即在右键添加了选项：当想删除右键菜单选项时，可以使用下面命令，复制保存为任意名称.reg，双击运行即可。12345678910111213Windows Registry Editor Version 5.00; Created by: Shawn Brink; http://www.sevenforums.com; Tutorial: http://www.sevenforums.com/tutorials/47415-open-command-window-here-administrator.html[-HKEY_CLASSES_ROOT\Directory\shell\runas][-HKEY_CLASSES_ROOT\Directory\Background\shell\runas][-HKEY_CLASSES_ROOT\Drive\shell\runas]“姿势”三：资源管理器（2017-08-08 增）在资源管理器的地址栏内输入cmd 或 powershell 回车后，依旧可以实现在当前目录快速打开命令行窗口:进入指定目录地址栏输入cmd 或 powershell回车确认“姿势”四 : git命令行此方式使用git的用户，安装git时确定安装git bash命令行，以确保可以在命令行里完成git操作~。windows下安装git教程自行百度了。安装好后，在需要使用cmd的目录中，使用git bash来替代使用。1.资源管理器进入指定目录；2.鼠标右键，菜单项中选择Git Bash Here项目；3.进行操作；“姿势”五：快捷方式（2018-06-13 增）偶然间发现了这个有趣的操作，虽然不是直接在目录内启动，但也是另辟蹊径的“玩法”了~~首先创建快捷方式选择一个目录（这里选择Python2的目录）给快捷方式起个名字创建完成后，修改快捷方式属性将快捷方式创建指定的的目录，改为起始位置，快捷方式的目标地址修改为cmd的路径，如下：配置完成，即可以通过快捷方式，快速在目录内打开cmd。。注意： 在创建快捷方式时，可以直接在目标内输入cmd, 即直接创建了cmd的快捷方式，后续再添加 起始位置 为自己想要cmd运行的目录其他方式，后续了解后补充~]]></content>
      <categories>
        <category>Windows小技巧</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>cmd</tag>
        <tag>快捷方式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信小程序资源整理]]></title>
    <url>%2Falex.d-blog%2Fposts%2F763e972d%2F</url>
    <content type="text"><![CDATA[微信小程序相关的文档、教程、开源项目等资源的整理，以便于开发学习使用。 —— —— 收录仅作个人学习使用，涉及侵权行为及时联系： maple_6392@163.com项目地址：GitHub | 码云 | Coding开发文档开发文档微信公众平台 · 小程序文档微信公众平台 | 小程序小程序介绍小程序设计小程序开发 - 简易教程· 小程序小程序运营简易教程· 小程序（非官方） | 项目地址微信小程序设计指南微信小程序平台运营规范WeUI 微信官方设计团队为微信Web开发量身设计基础样式库 | 项目地址 | wikiw3cschool | 微信小程序开发教程手册文档其他文档腾讯云带你从零开始搭建具有云端能力的小程序系列小程序配置指引、升级方案场景一：文件上传下载 | 小相册教程 | 小相册源码场景二：WebSocket长连接应用 | 剪刀石头布教程 | 剪刀石头布源码场景三：会话管理应用 | 会话管理应用教程 | 会话管理应用源码场景四：视频应用场景 | 视频应用教程 | 视频应用源码起步软件 | 微信应用号「小程序」最全的Q&amp;A列表辅助开发工具和插件骨架、脚手架zce / weapp-boilerplate 微信小程序开发准备的基础骨架 | 工具地址maichong / labrador 微信小程序模块化开发框架 | 工具地址maichong / labrador-cli 微信小程序模块化开发框架 | 工具地址GreedBell/weapp-template template for weapp with ES2015. 使用 ES2015 写微信小程序的模板 | 工具地址微信公众平台小程序在线生成工具 - 生成配置文件以及文件目录leegtang / xiaochengxuGen 微信小程序页面生成器 | 工具地址辅助插件chemzqm / wxapp.vim 提供微信小程序开发全方位支持的 vim 插件 | 插件地址Abbotton / weapp-snippet-for-sublime-text-2-3 为 sublime text 2&amp;3 准备的微信应用号/小程序 snippet | 插件地址johnwang77 / JWSnippets-For-VSCode 专为VSCode&amp;Wing开发微信小程序编写的Snippet | 插件地址wx-compile-key 微信小程序全局编译快捷键（npmjs） | 插件地址lypeer / Matchmaker Intellij IDEA中自动完成绑定方法自动注入js插件 | 插件地址remobile / atom-wx 微信小程序语法高亮(atom-wx) | 插件地址chemzqm / wept 微信小程序实时开发工具 | 插件地址 | 发布文 | 视频演示gakaki / we_chat_mouse_click 微信小程序 ide 自动刷新 | 插件地址zarknight / wxapp-startkit 微信小程序 StartKit (Gulp + Babel + Sass) | 插件地址stephenml / wx-query 微信小程序仿jQuery插件 | 项目地址nbagonet / wxa-compressor 微信小程序代码压缩器 | 插件地址xiadd / atom-wxapp 微信小程序代码补全 | 插件地址UI及组件微信小程序Axure组件liujians / Wa-UI 针对微信小程序整合的一套UI库 | 组件地址nickzone / wxa-ui 微信小程序ui模板 | 组件地址baya / weui-base-guide-practice 对微信设计指南中的Web设计和小程序基础控件库的练习 | 项目地址hawx1993 / wxapp-charts 微信小程序图表charts组件 | 组件地址icindy / wxParse 微信小程序富文本解析自定义组件，支持HTML及markdown解析 | 组件地址黄秀杰RadioGroup代替方案，类似iOS中UISegmentedControl小程序下拉菜单，可用于筛选LXStepper组件，用于购物车商品数量的加减。微信小程序倒计时组件LXRowAction 类似iOS中UITableView轻扫删除rongj滑动选项卡级联筛选动画及上下拉刷新全屏动画滚动xuhongjia / wx-city-choose-picker 微信小程序三级地址联动选择器 | 组件地址newpepsi / weixin_calendar 微信小程序日历 | 组件地址其他工具stackOverMind / WeApp-adapter 将微信小程序私有的api适配到标准w3c API | 工具地址SporeUI / spore-kit-wapp 微信小程序工具函数集 | 工具地址GreedBell / weapp-promise 把微信小程序 api 转成 promise 工具地址icindy / WxNotificationCenter 微信小程序通知广播模式类,降低小程序之间的耦合度 | 工具地址f111fei / weapp-typescript 使用TypeScript开发微信小程序 | 项目地址开发社区微信小程序社区（http://www.cwechat.org/）微信小程序社区（http://www.xiaochengxu-wx.com/）微信小程序开发社区(http://xiao-app.com/)小程序开发者社区(http://wxcss.net/)微信小程序开发者社区，提供海量微信小程序开发，微信小程序开发源码下载，微信小程序开发问题解答，微信小程序游戏开发经验分享，微信小程序开发人才招聘，微信小程序开发环境搭建，微信小程序游戏开发进阶，微信小程序sdk下载等。很快-微信开发者平台 | 微信小程序开发henkuai.com微信开发者平台,国内最大的微信开发者平台,最权威的微信开发者社区x2小程序 / 新域名 | 小程序，大世界。国内首个微信小程序开发者社区本站（www.mntuku.cn）作为专业的微信小程序开发者社区为大家提供：微信小程序开发者交流平台，开发教程，定制开发（交易），最新资讯等微信小程序相关消息。欢迎大家来此交流！微信小程序开发论坛－垂直微信小论坛开发社区微信小程序,微信应用号垂直微信开发者交流社区,关注微信小程序的动态、文档、分析、讨论并且能够发布好玩有用的微信小程序、微信相关开发人员、微信相关外包等。微信小程序开发社区(http://www.youngapp.org/)微信小程序社区是微信开发者在线交流的专业社区,在这里可以分享微信小程序开发教程、微信小程序开发文档、微信小程序开发经验,解决项目中遇到的实际问题.微信小程序资讯网 | 全球最大的微信小程序资讯、下载、交流专业站点。 QQ群：139122611小程序联盟(http://www.yinxiaomi.cn/)微信小程序联盟(http://wxapp.dreawer.com/) | 微信小程序社区-微信小程序开发社区-微信小程序联盟小程序啦 - 精品微信小程序推荐 | 小程序导航,精品微信小程序推荐！蜂鸟微信小程序开发者平台微信小程序SCHOOL微信小程序社区(http://youngapp.org/)微信小程序社区是微信开发者在线交流的专业社区,在这里可以分享微信小程序开发教程、微信小程序开发文档、微信小程序开发经验,解决项目中遇到的实际问题.微信小程序学习社区 | 微信小程序学习社区, 一个认真的技术社区小程序资讯网 | 全球最大的微信小程序资讯、下载、交流专业站点。 QQ群：139122611微信小程序开发社区(http://www.010hub.com/)微信小程序开发社区(http://www.360xiaochengxu.com/)微信小程序Club(www.wxappclub.com)wxappclub.com微信小程序俱乐部是国内最大最具影响力的微信小程序社区，致力于微信小程序技术研究、教学、推广和运营。提供开发者API中心用于快速学习小程序开发最新热文9.21为什么微信深夜发布的“小程序”引动了开发者的大地震？微信“小程序”来了，短期不可高估，长期不可低估9.22「微信小程序」有哪些冲击与机会？微信小程序，一个有局限的类似 React Native 轮子！微信小程序：新开放与新封闭微信正式开放内测“小程序”，不开发APP的日子真的来了？微信小程序细节汇总：会Javascript的工程师要发了你的产品适不适合做微信小程序？你需要这篇产品逻辑分析微信小程序动了谁的蛋糕，又会把蛋糕分给谁？小程序来了，不断臃肿的微信会沦为下一个QQ吗？微信小程序操作效果视频演示：不是App胜似App9.23应用号终于来了 微信小程序信息全剖析微信”小程序”想要干掉APP 或将考验应用商店模式微信应用号刷屏背后：小程序能否代替App？微信小程序深入分析（1）–微信小程序的技术级别如何？9.24我们真的需要微信「小程序」么？微信小程序_微信小应用号功能9.25微信“小程序”背后，BAT集体变“轻”从Chrome App看微信小程序微信小程序让创业者纠结：要成功还有几步要走？9.26基于张小龙所描述的微信价值观，微信小程序应该被这样解读9.27在微信应用号（微信小程序）开发什么什么应用爆发概率大？微信小程序开发三宗罪和解决方案微信小程序底层的实现原理是怎样的？9.28微信推小程序 意图并非取代APP通过微信小程序看前端9.30微信小程序背后的思考10.3错过了淘宝，微博，微信的第一波红利，这次你还要错过「微信小程序」么？(深度分析)10.4我们真的需要小程序吗？| HTML5老兵如是说10.12微信小程序的理性思考10.13微信小程序官方文档解读：如何才能避开小程序的规则“雷区”10.14创业者必知|微信小程序的 7 点总结换个角度，再来看一下微信小程序的开发与发展10.15微信小程序 VS 原生APP，这一局你站哪边?10.17微信小程序，对开发者的选择10.19也许微信正在将场景化应用带到你的身边10.21微信小程序的未来史记，你不曾想象过的世界10.22坤鹏论：微信小程序承载未来发展重任10.24白鹭时代推出微信小程序开发者工具，认为小程序会养活一批第三方团队10.25爱范儿 CTO 何世友：聊聊微信「小程序」的幕后、现在和未来“域名一直很重要”，曝微信小程序上线由微信小程序引发的设计思考微信小程序也需要域名的，大时代的来临小程序的开发成本真的比原生App低吗？10.26小程序官方文档解读：如何才能避免违反微信规则10.27行话儿 | 微信小程序 VS 原生APP，这一局你站哪边？微信小程序和Android开发对比(上篇)微信观察家、原极客公园CEO阿禅对于微信小程序的独家深度爆料10.28微信小程序第二次更新：增加 19 个接口业界：微信“小程序”将加剧中小APP生存难度阿拉丁创始人史文禄：微信小程序是未来全新创业路径微信小程序:APP之痛?10.29深挖微信小程序！你需要先了解这三个内核微信小程序应用号开发价值体现在哪？10.30微信小程序的想象力与不可想象域10.31从马化腾的讲话读懂微信小程序的使命脑洞文：未来微信的流量瓶颈，可能源于其熟人社交模式微信群升级背后：为小程序服务铺路？白鹭时代张鑫磊：迎接H5高速变现时代，微信小程序或许是个契机微信小程序马上要开放了，微信悄悄改变开始预热微信小程序和Android开发对比(下篇)11.3微信小程序正式开放公测（附申请地址）微信小程序半夜开放公测！我们连夜测试了一下，结果……微信开放小程序公测，做好这 4 件事抢占先机微信小程序正式开放公测，将给创业者带来哪些机会？微信小程序内测一个多月，工程师说它是个封闭生态程序员的又一春，微信小程序带来的一个赚钱机遇微信小程序来了，不得不看的未来机会!11.4微信小程序开放公测 不接受个人身份申请微信小程序的想象力与不可想象域微信小程序公测后|在过去的43天里，小程序影响了什么？谈谈小程序与服务号的区别11.5深入分析：微信小程序与H5的区别11.7史上首个微信小程序Demo流出！7大关键信息揭秘微信小程序被高估了11.8微信小程序初体验（上）干货：少走弯路，开发小程序前，需要注意的几个细节干货：iOS APP与小程序UI设计对比11.9微信公测“小程序”：发力轻应用 防过度商业化11.10应对微信小程序，产品经理要知道这 5 个设计思路小程序开发平台即速应用 | 微信小程序开发,微信应用号开发平台,手机app制作-即速应用,为企业提供微信应用号开发工具,基于html5技术进行手机app开发。企业在线制作webapp,无需代码，即可自助建站。]]></content>
      <categories>
        <category>微信</category>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>微信</tag>
        <tag>小程序</tag>
        <tag>资源</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows小技巧 -- Win+R提高Windows使用效率]]></title>
    <url>%2Falex.d-blog%2Fposts%2Fe009e4bc%2F</url>
    <content type="text"><![CDATA[追求效率的朋友都需要一款顺手的快速启动工具，Win 平台上有键盘流的RunZ、Listary、ALTRun、Launchy、Wox 和图标流的 Fences、Rolan、 WinLaunch 等，而 Mac 上也有 Alfred、Spotlight。而对于快速启动工具，最基本需求一般是这样的：体积小，资源占用低，速度快，最好可以不常驻运行。项目尚有人维护，有反馈渠道。可扩展性强，支持方便地用脚本扩展功能。但对于Windows系统，不能忽略的是系统自带的 Win+R 功能（你还不知道这个吗？那赶快试试吧~）。下面不妨抛开这些软件，来看看这个“神器”怎么提高使用效率。Win +Ｒ 运行窗口Win+R（开始菜单 &gt; 运行）是 Windows 的一个原生的功能，从 XP 到 Windows 10 都自带了。当用户按下快捷键 「Win+R」（Win 为键盘上Windows图标键） 后，系统会弹出一个小窗口让你输入命令，回车后会立即执行命令并关闭自身窗口。它不会驻留后台、不占用内存而且速度极快，因此很多高手们利用 Win+R 改造成属于自己的快捷启动工具！说的很厉害的样子，那 WIN+R 到底可以做什么呢？下面来看看它的神奇之处~快速启动系统程序是否还在为一桌面的快捷方式烦恼呢？是否还在为找一个软件的快捷方式烦恼呢？是否还在为要挑选桌面整理工具而烦恼呢？是否。。。软件打开那么简单的事情，但却给我们带来了不少的困扰，我们要花功夫来鉴别不同的快捷图标，而哪天图标不小心删除了，又要在安装目录，在开始菜单等地方来查找（当然你可以尝试使用Win+F查找更能来实现），但都耽误不少功夫，而且如果想打开多个软件，那又会花去多少功夫呢？在平时，Win+R 使用最多的应该就是打开cmd.exe 命令提示符吧~， 那是否用它打开过其他系统应用呢？下面来看看 Win+R 启动系统应用的命令吧：系统应用程序calc - 启动计算器charmap - 启动字符映射表chkdsk - Chkdsk磁盘检查cleanmgr - 磁盘清理clipbrd - 剪贴板查看器cmd.exe - CMD命令提示符dvdplay - DVD播放器dxdiag - DirectX诊断工具eudcedit - 造字程序（专用字符编辑程序）explorer - 资源管理器iexpress - 木马捆绑工具，系统自带magnify - 放大镜mplayer2 - 简易widnows mediaplayer msconfig - 系统配置mspaint - 画图板mstsc - 远程桌面连接narrator - 屏幕“讲述人”notepad - 打开记事本nslookup - IP地址侦测器osk - 打开屏幕键盘regedit - 注册表编辑器regedt32 - 注册表编辑器sndrec32 - 录音机sndvol32 - 音量控制程序taskmgr - 任务管理器winchat - XP自带局域网聊天write - 写字板dcomcnfg - 系统组件服务ddeshare - DDE共享设置nslookup - 网络管理的工具向导ntbackup - 系统备份和还原mobsync - 同步中心winmsd - 系统信息winver - 检查Windows版本wiaacmgr - 扫描仪和照相机向导wscript - windows脚本宿主设置wupdmgr - windows更新程序管理控制台管理单元文件mmc - 管理控制台certmgr.msc - 证书管理ciadv.msc - 索引服务程序comexp.msc - 组件服务compmgmt.msc - 计算机管理devmgmt.msc - 设备管理器dfrg.msc - 磁盘碎片整理程序diskmgmt.msc - 磁盘管理eventvwr.msc - 事件查看器fsmgmt.msc - 共享文件夹管理器gpedit.msc - 组策略管理器（本地组策略编辑器）lusrmgr.msc - 本机用户和组ntmsmgr.msc - 移动存储管理器ntmsoprq.msc - 移动存储管理员操作请求perfmon.msc - 性能监视器rsop.msc - 组策略结果集secpol.msc - 本地安全策略services.msc - 本地服务设置wmimgmt.msc - windows管理体系结构WMI（控制台根节点\WMI控件）那么非系统自带的程序，怎么快速启动呢？快速启动应用程序创建快捷方式存放目录首先新建一个文件夹，用于存储快速启动的程序的快捷方式，文件夹存放位置任意：这里新建文件夹 WinR, 即是用来存放快捷方式。配置环境变量将新建的文件夹的目录，添加到环境变量中，如图：ps:此处可以配置单个应用程序到环境变量path中，这样就可以通过 Win+R 打开运行窗口后，输入应用程序的名称，实现快速访问。如将cmder.exe配置到环境变量中：这样就可以通过 Win+R 快速打开 Cmder：但这里不这样配置，因为这样配置会导致path里面内容过多，可能会容易出现一些问题，而且一个个添加过于麻烦，所以这里配置文件夹路径，然后通过快捷方式实现快速访问。注意： 配置环境变量时，注意路径中的冒号、斜杠和封号均为英文半角输入放置快捷方式将软件的快捷方式，放入”WinR“目录中，给快捷方式起一个简单好记的名字（自己能记住的） 。如上图中，”ali“ = “阿里巴巴客户端”，”aqy“ = “爱奇艺播放器”，”gc“ = “google chrome浏览器”，以此类推，快捷键名称任起，便于自己记忆就好。快速启动演示如打开chrome浏览器，可以通过输入”gc“来快速打开注意： Win+R访问快捷方式时，英文名不区分大小写，即gc和GC是一样的效果快速打开文件/目录有时想找某个文件，是否还在为要点卡n多个目录感到苦逼呢？是否为经常重复进一个目录而感觉无奈呢？那可以试试 Win+R 大法~如果知道一个文件的目录，或者想快速进入一个目录，比如我们会常常进入 system32 目录进行一些操作，那么别一个个文件点了，直接这样来：这里可以像快速打开应用程序一样，设置快捷方式来快速的进入目录或打开文件。首先进入快捷方式存放目录 WinR，在空白地方右键，新建，快捷方式：这里键入的对象位置，可以为应用程序、文件、目录、脚本、网页等地址。这里添加的是目录地址，用于快速进入目录。快速启动文件的设置与此类似。当然，快速进入目录，可以直接通过在 Win+R 运行窗口中输入地址，来实现快速进入指定的路径。如：c:/WinR其他应用快速访问指定站点Win+R 运行窗口直接输入站点网址通过设置快捷方式快速执行批处理脚本Win+R 运行窗口直接输入通过设置快捷方式执行一些命令任务，如ping命令当然，为了提高对于Win系统的使用效率，必要的快捷键，大家还是应该知道的，关于windows快捷键，看看Microsoft官网整理的吧~：[Windows 的键盘快捷键][15]加强版 WIN+R – nTrun当然如果觉得 Win+R 运行窗口还不够强大，或不够便利，可以尝试下nTrun（原名 Win+R Adde）这款软件，可以轻松的帮你完成Win+R功能的定制，更多内容进 nTrun官网 https://www.ntrun.com 自行查看关于Win8/8.1/10的快速启动使用Win8以上版本系统，都可以明显发现开机速度优于Win7及XP，这就是因为系统增加了快速启动设置，那么这个设置在哪呢？在系统任务栏的右下角，点击电池图标，出现如下图选项:选择 更多电源选项，会弹出如下 电源选项 窗口：选择 选择电源按钮的功能 项，会进入如下 系统设置窗口：在这个窗口中，可以看到底部的”关机设置“中有”启用快速启动（推荐）“的选项，此处已勾选，表示打开了系统的快速启动设置，如果想关闭快速启动，可以选择上面的 更改当前不可用的设置 选项。]]></content>
      <categories>
        <category>Windows小技巧</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>效率</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows小技巧 - 修改软件默认安装目录]]></title>
    <url>%2Falex.d-blog%2Fposts%2F5e3c350%2F</url>
    <content type="text"><![CDATA[问题描述Windows系统下安装软件时，会提示一个默认的安装路径，如：64位系统默认安装路径：C:\Program Files\ [软件名称]32位系统默认安装路径C:\Program Files (x86)\ [软件名称]无论64还是32位系统，均会默认提示安装到C盘，而C盘是我们默认的系统盘，如果C盘文件过多那么就会导致我们系统卡顿缓慢，严重者是需要重新安装电脑系统的。所以我们安装软件时，通常会修改软件的安装目录，不过每次都要手动修改，比较麻烦，下面介绍一劳永逸的方式解决这个问题。技巧使用以 Git-2.10.0-64-bit.exe 安装为例。双击git安装文件后，提示如下界面：本机系统为 Windows 8.1 64位，这里显示64位程序安装的默认路径。由于此技巧需要修改注册表，所以不放心的朋友，可以提前备份注册表。修改步骤如下：打开注册表快捷键 Win + R 打开运行窗口，输入 regedit ：回车，打开注册表窗口：找到指定注册表项找到 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion 项，点击CurrentVersion，如下：修改默认路径参数值点击 CurrentVersion 右侧选项中的 ProgramFilesDir 及 ProgramFilesDir (x86) 项，并修改值为自定义默认目录，下图为 ProgramFilesDir（64位默认安装路径）修改图示：修改路径后（此处可按个人需要修改）如下：安装软件测试重新打开 Git-2.10.0-64-bit.exe 安装程序，此时安装的默认路径如下：至此，Windows程序默认安装路径修改成功~]]></content>
      <categories>
        <category>Windows小技巧</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WAMP(Windows + Apache + MySQL + PHP) 环境配置]]></title>
    <url>%2Falex.d-blog%2Fposts%2Ff06be05a%2F</url>
    <content type="text"><![CDATA[WAMP(Windows + Apache + MySQL + PHP) 环境配置wamp集成环境的下载地址：http://www.wampserver.com/，集成环境安装这里不做记录，本文仅记录Windows+Apache+MySQL+PHP集成环境的配置。各模块下载地址Apache：http://httpd.apache.org/docs/current/platform/windows.htmlMySQL：http://dev.mysql.com/downloads/mysql/5.0.html#win32PHP：http://windows.php.net/download独立安装各模块顺序:Apache -&gt; PHP -&gt; MySQLApache服务安装下载Apache，上面给出的地址是免安装版，用命令行配置可以更加清晰地看到错误信息，方便于调试。进入下载链接之后有如上的几个下载地址，我们选择第一个。点击进入，就可以看到最终的下载位置，按你的操作系统选择下载32位或64位：下载完成后，将下载的压缩包解压到D:\PHP\ 目录（目录可以自定义，注意不适用中文） 下，然后命令提示符(管理员模式，非管理员模式进入安装时提示权限问题)进入bin目录下，输入命令：httpd –k install执行命令后会发现，Apachefu service is successfully installed.但会发现下面出现错误，这里是ServerRoot目录指向没有配置。打开../ApacheXX/conf/目录下的httpd.conf，并定位到ServerRoot，配置当前的apache目录：然后在命令提示符中使用命令httpd -k uninstall 先卸载服务，然后再执行httpd –k install命令来安装服务，最后执行httpd –k start命令来测试。浏览器中输入http://localhost/ 出现类似下面含有 it works 字样提示的页面，表示安装完成如果不成功，可能是本地80端口被占用，可以到 ../ApacheXX/conf/ 目录中的httpd.conf文件里，将所有80的端口改成8080，再次输入http://localhost/，如果出现类似上图提示，表示安装成功。PHP环境安装下载PHP，注意选择有Thread Safe的版本，php位数根据系统位数选择：同样，将下载的压缩包解压到D:\PHP\ 目录下，方便环境配置。之后将php.ini-development文件修改为php.ini。然后用文本编辑器打开编辑 （不建议使用记事本）,定位到extension_dir，将：; extension_dir = “./“修改为：extension_dir = “D:/PHP/php5.6.24/ext”定位到date.timezone修改时区date.timezone = RPC 或date.timezone = Asia/Shanghai定位到default_charset修改编码格式default_charset =”UTF-8”然后修改如下内容：123456789101112131415161718192021222324252627282930313233343536;extension=php_bz2.dllextension=php_curl.dll;extension=php_fileinfo.dllextension=php_gd2.dll;extension=php_gettext.dll;extension=php_gmp.dll;extension=php_intl.dllextension=php_imap.dll;extension=php_interbase.dll;extension=php_ldap.dllextension=php_mbstring.dll;extension=php_exif.dll ; Must be after mbstring as it depends on itextension=php_mysql.dllextension=php_mysqli.dll;extension=php_oci8_12c.dll ; Use with Oracle Database 12c Instant Client;extension=php_openssl.dll;extension=php_pdo_firebird.dllextension=php_pdo_mysql.dll;extension=php_pdo_oci.dll;extension=php_pdo_odbc.dll;extension=php_pdo_pgsql.dll;extension=php_pdo_sqlite.dll;extension=php_pgsql.dll;extension=php_shmop.dll; The MIBS data available in the PHP distribution must be installed.; See http://www.php.net/manual/en/snmp.installation.phpextension=php_snmp.dllextension=php_soap.dllextension=php_sockets.dll;extension=php_sqlite3.dll;extension=php_sybase_ct.dll;extension=php_tidy.dll;extension=php_xmlrpc.dll;extension=php_xsl.dll即去掉；号（去除注释）来实现php扩展的引入，如下图:最后将D:\PHP\php5.6.24;D:\PHP\php5.6.24\ext添加到环境变量MySQL安装MySQL的安装可以看 Windows 7系统安装MySQL5.5.21图解。注意修改安装路径到D:\PHP\整合Apache、MySQL、PHPApache打开 ..\Apache2.x\conf\httpd.conf文件，添加如下信息：12345678910111213141516171819202122232425262728#添加PHP的php.ini配置文件目录PHPIniDir &quot;D:/PHP/php5.6.24/php.ini&quot;#加载PHP编译模块，注意Apache2.4需要与php5apache2_4.dll配合，否则Apache Server启动时加载出错。LoadModule php5_module &quot;D:/PHP/php5.6.24/php5apache2_4.dll&quot;#设置的PHP支持的文件解析&lt;IfModule mime_module&gt;...AddType application/x-httpd-php .php .html .htm...&lt;/IfModule&gt;#修改网站根目录（此处按自己需要修改，默认为Apache下的htdocs目录）DocumentRoot &quot;D:/PHP/develop&quot;#修改DocumentRoot 同时要修改其下面的Directory标签名后的地址（两者需要统一）&lt;Directory &quot;D:/PHP/develop&quot;&gt;# 添加默认文档类型 （此处按自己需求修改）&lt;IfModule dir_module&gt; #默认为index.html DirectoryIndex index.html index.php &lt;/IfModule&gt;#修改监视端口为8008或其它，避免与IIS的80端口冲突，导致无法启动Apache Server （本地开发学习，可不做修改，视情况而定）Listen 8008ServerName localhost:8008PHP打开..\php5.x\php.ini文件，配置如下信息：123doc_root = &quot;D:/PHP/develop&quot;session.save_path = &quot;D:/php/php-5.4.45/tmp&quot;MySQL在MySQL目录中找到mysql安装目录 /lib/libmysql.dll文件，将此文件复制到系统的system32目录下至此，环境配置完成，可以在工程目录下（本文目录为D:/PHP/develop），创建index.php页面，页面中写入：1234&lt;?php phpinfo();?&gt;启动服务，浏览器中输入http://localhost/index.php，出现如下页面，说明配置完成：]]></content>
      <categories>
        <category>安装部署</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Windows</tag>
        <tag>Apache</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS计数器]]></title>
    <url>%2Falex.d-blog%2Fposts%2F438c3d31%2F</url>
    <content type="text"><![CDATA[CSS计数器（counter）CSS计数器属性属性属性说明语法参数含义counter-reset定义计数器，包括初始化、作用域等counter-reset:[&lt;identifier&gt;&lt;integer&gt;?]+/none/inherit默认值为none&lt;identifier&gt;:计数器名称&lt;integer&gt;:计数器初始值当元素的display为none时，该属性失效counter-increment设置计数器的增数counter-increment:[&lt;user-ident&gt;&lt;integer&gt;?]+/none&lt;user-ident&gt;:需要增数的计数器名称&lt;integer&gt;:计数器增数的值，可以为负数可以同时增数多个计数器当元素的display为none时，该属性失效content在::before和::after中生成内容content:[&lt;counter&gt;]+&lt;counter&gt;=counter(name)/counter(name,list-style-type)/counters(name,string)/counters(name,string，list-style-type)使用计数器，需要结合::befer和::after使用。可以同时使用多个计数器counter()在content属性中使用，用来调用计数器@counter-style自定义列表样式@counter-style counterStyleName{system:算法;range:使用范围;symbols:符号;or additive-symbols:符号;prefix:前缀;suffix:后缀;pad:补零(eg.01,02,03);nagative:负数策略;fallback:出错后的默认值;speakas:语音策略;}@counter-style cjk-heavenly-stem{system:alphabetic;symbols:”\7532””\4E59””\4E19””\4E01”;/ 甲 乙 丙 丁 /suffix:”、”;}CSS计数器属性代码示例属性代码代码解析counter-resetcounter-reset:counterA;counter-reset:counterA 6counter-reset:counterA 4 counterB;counter-reset:counterA 4 counterB 2;定义定时器counterA,初始值为默认值0定义定时器counterA,初始值为6定义定时器counterA、counterB,初始值分别为4和0定义定时器counterA、counterB,初始值分别为4和2counter-incrementcounter-increment:counterAcounter-increment:counterA 2counter-increment:counterA 2 counterB -1增数计算器counterA,每次增加1增数计算器counterA,每次增加2增数计算器counterA、counterB,每次分别增加2、-1contentcontent:”Fig.” counter(imgCounter);content:”Fig.” counter(imgCounter,lower-alpha);contents(section,”.”)””;contents(section,”.”,”lower-roman”)””;混合字符串和计数器imgCounter指定计数器的列表格式在计数器之间加上点号，同时在计数器最后添加一个空格定义计数器为小写罗马数字格式，同时加点好，空格CSS计数器应用通过CSS计数器功能即实现上图左侧到右侧的效果。1234567891011121314151617181920212223242526272829303132333435363738394041&lt;ul class="title"&gt; &lt;li&gt;一级标题 &lt;ul class="title2"&gt; &lt;li&gt;二级标题 &lt;ul&gt; &lt;li&gt;三级标题&lt;/li&gt; &lt;li&gt;三级标题&lt;/li&gt; &lt;li&gt;三级标题&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;二级标题 &lt;ul&gt; &lt;li&gt;三级标题&lt;/li&gt; &lt;li&gt;三级标题&lt;/li&gt; &lt;li&gt;三级标题&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;二级标题 &lt;ul&gt; &lt;li&gt;三级标题&lt;/li&gt; &lt;li&gt;三级标题&lt;/li&gt; &lt;li&gt;三级标题&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;一级标题 &lt;ul class="title2"&gt; &lt;li&gt;二级标题&lt;/li&gt; &lt;li&gt;二级标题&lt;/li&gt; &lt;li&gt;二级标题&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;一级标题 &lt;ul class="title2"&gt; &lt;li&gt;二级标题&lt;/li&gt; &lt;li&gt;二级标题&lt;/li&gt; &lt;li&gt;二级标题&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt;&lt;/ul&gt;1234567891011121314151617181920212223242526272829 ul &#123; list-style: none; &#125;.title &#123; counter-reset: A_title B_title C_title; font-size: 18px; font-weight: bold; font-family: &apos;宋体&apos;;&#125;.title &gt; li:before &#123; counter-increment: A_title ; content: counter(A_title)&quot;、&quot;;&#125;.title .title2 &gt; li &#123; font-size: 14px; font-weight: 500;&#125;.title .title2 &gt; li:before &#123; counter-increment: B_title; content: counter(A_title)&quot;.&quot;counter(B_title)&quot;、&quot;;&#125;.title .title2 ul &gt; li &#123; font-size: 10px;&#125;.title .title2 ul &gt; li:before &#123; counter-increment: C_title; content: counter(A_title)&quot;.&quot;counter(B_title)&quot;.&quot;counter(C_title)&quot;、&quot;;&#125;阅读参考&amp;扩展阅读CSS计数器(序列数字字符自动递增)详解使用CSS计数器CSS Counter Styles Level 3CSS计数器实现数值计算小游戏demo]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows下安装MongoDB 3.2]]></title>
    <url>%2Falex.d-blog%2Fposts%2F9a06f51f%2F</url>
    <content type="text"><![CDATA[MongoDB在安装MongoDB 3.2.0版本时，翻看官网安装说明，参照成功安装。为方便日后安装参考，记录此文。文章自己简单翻译，有出入望指教。MongoDB 安装确定MongoDB版本官网提供了三个版本下载：MongoDB for Windows 64-bit 适合 64 位的 Windows Server 2008 R2, Windows 7 , 及最新版本的 Window 系统。MongoDB for Windows 32-bit 适合 32 位的 Window 系统及最新的 Windows Vista。 32 位系统上 MongoDB 的数据库最大为 2GB。MongoDB for Windows 64-bit Legacy 适合 64 位的 Windows Vista, Windows Server 2003, 及 Windows Server 2008 。MongoDB官网下载地址：MongoDB downloads pages, 此时官网最新版本为3.2.4 。根据系统下载对应版本，64版本的MongoDB不支持Windows 32位系统。不知道本机的位数，可以通过以下代码查看：12wmic os get caption #查看系统的版本 win xp/win 7...wmic os get osarchitecture #查看系统架构（位数） x86/x64通过查询可以知道，本机是64位系统，所以使用64的mongodb-win32-x86_64-2008plus-ssl-3.2.0-signed.msi 。安装MongoDB选择自定义安装模式，选择安装目录 d:\MongoDB注：MongoDB是独立的，没有任何其他系统的依赖。你可以在任何你选择的文件夹运行MongoDB。所以你可以在任意文件夹中安装MongoDB（如D:\test\ MongoDB）。 注意避免中文目录。MongoDB 无人值守安装文档中介绍了Unattended Installation的安装方式，想要采用此方式安装，可以参看。要使用无人值守安装，需要用到 msiexec.exe 。打开管理员命令提示需要通过管理员模式的命令提示符，来执行安装命令。管理员命令提示打开方式：快捷键win+r打开“运行”窗口，输入cmd快捷键 Ctrl + Shift + Enter ，则可以打开 ”管理员命令提示“。（win xp/win 7下）Windows安装MongoDB选择修改.msi安装文件的安装路径并执行，语句如下：123msiexec.exe /q /i mongodb-win32-x86_64-2008plus-ssl-3.2.0-signed.msi ^ INSTALLLOCATION=&quot;C:\mongodb&quot; ^ ADDLOCAL=&quot;all&quot;通过INSTALLLOCATION值可以指定安装路径。默认使用这种方式安装，可以通过AddLOCAL来安装MongoDB组件集，这里设置all 表示全部安装，也可以选择安装组件集，各组件之间使用逗号隔开。组件集如下：|Component Set| Binaries||:—|:—||Server |mongod.exe||Router |mongos.exe||Client |mongo.exe||MonitoringTools |mongostat.exe, mongotop.exe||ImportExportTools |mongodump.exe, mongorestore.exe, mongoexport.exe, mongoimport.exe||MiscellaneousTools |bsondump.exe, mongofiles.exe, mongooplog.exe, mongoperf.exe|例如只安装MongoDB的工具和调用组件：123msiexec.exe /q /i mongodb-win32-x86_64-2008plus-ssl-3.2.0-signed.msi ^ INSTALLLOCATION=&quot;C:\mongodb&quot; ^ADDLOCAL=&quot;MonitoringTools,ImportExportTools,MiscellaneousTools&quot;MongoDB 运行设置MongoDB运行环境MongoDB需要数据目录来存储所有的数据，其默认的数据目录为\data\db ，可以通过mongod.exe --dbpath命令来指定MongoDB的数据目录。例如：12mkdir D:\MongoDB\data\db;D:\MongoDB\bin\mongod.exe --dbpath D:\MongoDB\data\db如果路径里面包含空格，就用双引号括住整个路径，例如：1D:\MongoDB\bin\mongod.exe --dbpath &quot;D:\MongoDB db data&quot;看到上面的提示底部出现waiting for connections 字样，则表示dbpath配置完成，且MongoDB启动成功。而且此时打开资源管理器，进入MongoDB的dbpath目录，内容如下：可以发现本地确实初始化数据库了。创建成功时，MongoDB会根据系统安全级别，弹出mongod.exe网络通信的安全警告，选择允许，且需要选择网络时，应该选择私有网络，如家庭和工作网络。更多MongoDB的信息安全，请参见 Security Documentation。运行MongoDB通过运行mongo.exe启动MongoDB。例如：1D:\MongoDB\bin\mongo.exe命令行窗口显示如下内容：窗口中可以看到当前MongoDB shell的版本，及此时连接的数据库。注：如果想要使用.net开发应用程序，更多信息可以参看文档 C# and MongoDB开始使用MongoDB为了帮助您开始使用MongoDB，MongoDB提供了各种驱动版本的入门指南 Getting Started Guides。在MongoDB Shell中，通过help 来查看命令说明：在生产环境中部署MongoDB之前，考虑生产记Production Notes录文件。最后想停止MongoDB，可以在mongod.exe的命令行窗口，使用快捷键Ctrl+c即可。出现如框中的路径时，表示MongoDB已停止。配置MongoDB的Windows服务在上面的配置中，虽然启动了服务，且可以进行数据库操作，但是开两个窗口很不方便，所以可以通过配置文件，来配置windows服务。创建目录为您的数据库和日志文件创建目录：12mkdir D:\MongoDB\data\dbmkdir D:\MongoDB\data\log创建cfg配置文件创建一个配置文件，文件内必须设置MongoDB日志路径 systemLog.path。包扩一些其他的附加配置选项。例如，在在D:\MongoDB\ 下创建mongod.cfg，并在文件内指定systemlog.path和storage.dbpath：12345systemLog: destination: file path: D:\MongoDB\data\log\mongod.logstorage: dbPath: D:\MongoDB\data\db安装MongoDB服务注意：运行所有的命令都应该在管理员命令行窗口内。（管理员权限运行cmd）通过运行mongod.exe的–install安装选项和–config和配置选项，指定先前创建的配置文件安装MongoDB服务。1&quot;D:\MongoDB\bin\mongod.exe&quot; --config &quot;D:\MongoDB\mongod.cfg&quot; --install设置独立的数据库地址dbpath，可以通过配置文件或者命令–dbpath来设置。如果需要，你可以安装多个实例的mongod.exe或mongos.exe服务。安装的每个服务设置唯一的 –serviceName 和–serviceDisplayName。仅当有足够的系统资源和系统设计要求时，设置多个实例。如要让服务自动启动，可以通过下面命令：1sc.exe create MongoDB binPath= &quot;D:\MongoDB\bin\mongod.exe --service --config=\&quot;C:\MongoDB\mongod.cfg\&quot;&quot; DisplayName= &quot;MongoDB&quot; start= &quot;auto&quot;sc.exe中在“=”和配置值（如“binpath =”）之间需要一个空格，且用一个“\”转义双引号，以逃避双重引号。如果成功创建，下面的日志信息将显示：1[SC] CreateService SUCCESS开启服务1net start MongoDB关闭和删除服务停止MongoDB服务使用以下命令：1net stop MongoDB删除MongoDB服务使用以下命令：1&quot;D:\MongoDB\bin\mongod.exe&quot; --remove参考内容官网3.2版本文档：安装说明关于无人值守安装，可以看看Microsoft的What Is Unattended Installation?百度百科介绍，点这里：无人值守安装]]></content>
      <categories>
        <category>安装部署</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows下PHP配置成功后phpinfo中找不到MySQL问题处理]]></title>
    <url>%2Falex.d-blog%2Fposts%2F18049353%2F</url>
    <content type="text"><![CDATA[问题描述本地配置php开发环境（Apache + PHP + MySQL）后，测试时 phpinfo中找不到mysql且此时PHP的测试程序怎么也连不上数据库，并报Call to undefined function mysql_connect() 的错误。问题解决检测配置文件ApacheApache的配置文件apache安装路径/conf/httpd.conf 中检测以下内容123456[httpd.conf] LoadModule php5_module &quot;D:/php/php-5.4.45/php5apache2_2.dll&quot; PHPIniDir &quot;D:/php/php-5.4.45/php.ini&quot; AddType application/x-httpd-php .php .html .htm DocumentRoot &quot;F:/php&quot;注意：PHP的配置文件php.ini应该在PHPIniDir路径下PHPPHP配置文件php安装路径/php.ini 中检测下面内容12345678910111213141516[php.ini] extension=php_curl.dll extension=php_gd2.dll extension=php_imap.dll extension=php_mbstring.dll extension=php_mysql.dll extension=php_mysqli.dll extension=php_pdo_mysql.dll extension=php_snmp.dll extension=php_soap.dll extension=php_sockets.dll doc_root = &quot;F:/php&quot; extension_dir = &quot;D:/php/php-5.4.45/ext&quot; session.save_path = &quot;D:/php/php-5.4.45/tmp&quot;检测上面extension内容是否去掉了注释，且doc_root等配置路径是否正确。MySQL在MySQL目录中找到mysql安装目录/lib/libmysql.dll 文件，将此文件复制到系统的system32下，基本就解决了上述问题。最后，保存修改的文件，重启Apache服务，重新运行，此时可以在phpinfo文件中找到mysql了]]></content>
      <categories>
        <category>问题处理</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Error</tag>
        <tag>Windows 8.1</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[XAMPP启动MySQL报错]]></title>
    <url>%2Falex.d-blog%2Fposts%2F177b1137%2F</url>
    <content type="text"><![CDATA[问题重述XAMPP启动mysql时，出现错误，提示如下：问题适用情况在安装XAMPP环境之前，本地独立安装了MySQL开发环境，此时在XAMPP启动MySQL时就会出现上面问题，是这样的情况，可以试试下面的方法来解决。解决方案打开注册表（快捷打开方式：cmd-&gt;regedit）,找到[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\MySQL] 下的ImagePath项，如下图：此时mysql的ImagePath值为D:\mysql-5.1.73-winx64\bin\mysqld --defaults-file=my.ini MySQL ， 即指向本地mysql安装路径下。将此处修改为 D:\xampp\mysql\bin\mysqld --defaults-file=my.ini MySQL ，其中D:\xampp\mysql\bin\mysqld 为XAMPP环境中mysql的路径，并指定默认的配置文件为my.ini。修改完后，关闭注册表，关闭任务管理器中的mysqld.exe (如果有此项的话) ，打开服务，找到MySQL服务，查看属性，我们可以看到此时MySQL的可执行文件路径指向到了XAMPP下的MySQL路径之后在XAMPP控制台中重新启动MySQL，此时我的MySQL终于启动了。最终解决不难发现，其实XAMPP并没有启动MySQL，因为在进程中可以看到，任务只是mysqld.exe进程启动，且MySQL显示启动中。通过phpmyadmin，我们可以清晰的看到MySQL服务还是有问题的。此时的MySQL服务会一直启动中，且停止服务时，会出现无法停止服务的提示而此时的进程中，可以发现mysqld.exe进程启动了，但没有正常启动服务进服务管理器（快捷方式cmd-&gt;services.msc）中发现，启动MySQL时出现了1053错误此时，我的解决方法就是再还原MySQL的ImagePath值。然后关闭XAMPP及MySQL服务和mysqld.exe进程，之后运行XAMPP控制台，此时报如下错误：可以发现错误中，说明了是路径问题，所以我复制了Expected Path 后的路径d:\xampp\mysql\bin\mysqld.exe --defaults-file=d:\xampp\mysql\bin\my.ini mysql 到MySQL的ImagePath，此时运行，会出现下面错误于是按照错误打开日志，即XAMPP控制台中，MySQL的后log按钮，打开日志，会看到下面错误日志里面说InnoDB: Cannot create D:\xampp\mysql\data\ib_logfile101 ，于是将D:\xampp\mysql\data 目录下的ib_logfile101删掉了，顺手我还把ibdata1文件删了，之后关闭控制台，重新尝试，发现还是这个错误，再打开日志和上面类似可以看到ib_logfile101 文件创建成功，但是这里Cannot create D:\xampp\mysql\data\ib_logfile1 又不能创建 ib_logfile1 文件了，于是将D:\xampp\mysql\data 下的logfile 和ibdata1 全删了，之后关闭控制台，重新启动，终于启动MySQL了。关闭重新尝试，也没有问题了，此时控制台还会提示如下：就是建议采用管理员模式运行XAMPP。注：这里要注意的就是，将logfile和ibdata1 文件复制、替换 D:\xampp\mysql\data 下的logfile和ibdata1 文件，使用MySQL启动时，依旧会报上面的错误，具体原因不是很清楚，有知情者，望不吝告知，谢谢。这里不知道有没有更好的解决方式，因为此法只是可以让XAMPP启动集成环境中的MySQL，此时本地单独安装的MySQL要启动需要换回ImagePath值。所以个人觉得如果要使用XAMPP集成环境，还是卸载本地安装的MySQL，之后重新安装XAMPP环境，可能会省事点。如果有更好的解决方式，希望可以留言告知，谢谢！]]></content>
      <categories>
        <category>问题处理</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Error</tag>
        <tag>XAMPP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub上搭建Hexo个人博客]]></title>
    <url>%2Falex.d-blog%2Fposts%2F9b9a6ada%2F</url>
    <content type="text"><![CDATA[Hexo介绍Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。风一般的速度Hexo基于Node.js，支持多进程，几百篇文章也可以秒生成。流畅的撰写支持GitHub Flavored Markdown和所有Octopress的插件。扩展性Hexo支持EJS、Swig和Stylus。通过插件支持Haml、Jade和Less.Hexo安装安装前提Node.jsGit在安装Hexo前，需要确定以上条件是否满足！具体安装步骤不在赘述。搭建环境GitHub账号创建新的github仓库获得github仓库地址安装GitHub for Windows 客户端使用GitHub for Windows 客户端一个是因为不用配置ssh，另外就是使用较方便。验证ssh1ssh -T git@github.com出现如下提示，则表示ssh配置完成了。Clone新建的github仓库到本地提示：如果出现问题，请卸载 GitHub for Windows 客户端，重新安装一遍，或转到使用 Git 方法常见错误请参考：GitHub Help - Generating SSH KeysGitHub Help - Error Permission denied (publickey)Hexo安装选择本地github仓目录（我的地址为F:\github\anyerblog.github.io），在anyerblog.github.io目录上右击菜单中选择git bash Here,打开git终端。输入如下代码：（注：右键菜单没有选项，则在开始菜单中，找到github程序文件夹，打开git bash，之后cd到github仓目录）1npm install -g hexo检查是否安装安装完成后通过`hexo version`查看安装的hexo版本信息 hexo创建在git bash中输入以下命令，完成hexo的创建:1$ hexo init将hexo相关的插件安装到githut仓库目录中1$ npm install此时github仓库目录内容如下：(搭建完成后补的图，里面会比实际情况多文件夹)Hexo运行生成静态页面安装好hexo后，通过下面代码可以生成静态页面，生成的静态页面存储在public目录下: 1$ hexo generate #可简写为`hexo g`运行服务开启预览访问端口（默认端口4000，git bash下 ‘ctrl + c’ 关闭server）1$ hexo server #可简写为`hexo s`运行后出现下图结果，则表示服务已启动： 此时在浏览器中访问http://localhost:4000/ ，即可看到hexo自带的hello world 页面至此，hexo已经在本地搭建完成。NexT主题修改主题hexo默认使用的是landscape主题，下文将采用NexT主题。NexT主题NexT主题特色：精于心，简于形NexT主题是我接触Hexo的第一款主题，一见钟情的一款Hexo主题。NexT主题简约却并不简单，功能特性多样；响应式设计，电脑手机访问体验好，超级nice，你值得拥有！安装主题将next的代码clone到项目中，保存在github仓库中的themes/next目录下:1$ git clone https://github.com/iissnan/hexo-theme-next themes/next修改配置下载完主题后，修改根目录下的_config.yml配置文件：新建的hexo文件中使用的是默认的主题landscape，将其修改为next（next为主题安装的目录名themes/next）运行新主题修改完成后保存，运行代码：1$ hexo server -g #为`hexo generate`及`hexo server`的缩写此代码运行吼，NexT的主题页面如下：主题设置添加blog名称及副标题修改根目录下配置文件_config.yml修改语言修改根目录下的_config.yml文件：更改主题方案NexT 通过 Scheme 提供主题中的主题。 Mist 是 NexT 的第一款 Scheme。启用 Mist 仅需在 主题配置文件 中将 #scheme: Mist 前面的 # 注释去掉即可。修改themes/next目录下的_config.yml文件：头像设置通过avatar字段设置，站点外头像设置avatar：图片url，站点内头像设置avatar：目录/图片名.图片格式在根目录下的_config.yml文件中，添加avatar字段：头像图片存储在themes/next/source/images/目录下。添加页面标签云页面1hexo new page tags修改刚创建的tags文件夹(github仓库目录\source\tags)下的index.md文件：在themes/next目录下的_config.yml文件中，将 menu关键字 中 about 前面的注释去掉即可分类页面1hexo new page categories修改刚创建的categories文件夹(github仓库目录\source\categories)下的index.md文件：在themes/next目录下的_config.yml文件中，将 menu关键字 中 about 前面的注释去掉即可about页面1hexo new page about在themes/next目录下的_config.yml文件中，将 menu关键字 中 about 前面的注释去掉即可404页面腾讯公益404页面使用方法，新建 404.html 页面，放到主题的 source 目录下(themes/next/source)，内容如下：123456789101112131415&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv="content-type" content="text/html;charset=utf-8;"/&gt; &lt;meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" /&gt; &lt;meta name="robots" content="all" /&gt; &lt;meta name="robots" content="index,follow"/&gt;&lt;/head&gt;&lt;body&gt;&lt;script type="text/javascript" src="http://www.qq.com/404/search_children.js" charset="utf-8" homePageUrl="your site url " homePageName="回到我的主页"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;第三方插件配置多说配置登录多说后，点击我要安装：然后按下图填写自己的信息：在themes/next目录下的_config.yml文件中，修改duoshuo_shortname关键字：百度统计配置登录百度统计，添加统计网站后，获得下面的定位代码，将baidu_analytics字段设置为下面代码中hm.js？后面的代码（本文为43d55965147dc8e978f7b55a19736357，注意自己的这个代码）。123456789&lt;script&gt; var _hmt = _hmt || []; (function() &#123; var hm = document.createElement(&quot;script&quot;); hm.src = &quot;//hm.baidu.com/hm.js?43d55965147dc8e978f7b55a19736357&quot;; var s = document.getElementsByTagName(&quot;script&quot;)[0]; s.parentNode.insertBefore(hm, s); &#125;)();&lt;/script&gt;获得上面的代码后，在themes/next目录下的_config.yml文件中，修改baidu_analytics关键字：JiaThis分享配置在themes/next目录下的_config.yml文件中，修改baidu_analytics关键字：RSS配置配置RSS，在此之前需要使用 hexo-generator-feed 插件生成 Feed。此时设置rss:，rss值为空的时，默认会使用站点的 Feed 链接。1npm install hexo-generator-feed --save通过上述代码，生成feed，此时在themes/next目录下的_config.yml文件中修改：添加github绶带通过下面链接，可以获得各种样式的绶带源码，更具自己需要获取： GitHub Ribbons获取源码后，修改anyer.github.io\themes\next\layout目录下的_layout文件：将绶带的代码，添加在&lt;/body&gt;上方即可。完成以上步骤后，运行效果：插件效果：GitHub部署部署设置修改根目录下的_config.yml文件：部署123hexo cleanhexo generate hexo deployhexo命令常用命令：hexo new “postName” #新建文章hexo new page “pageName” #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）hexo deploy #将.deploy目录部署到GitHub常用复合命令：hexo deploy -ghexo server -g简写：hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy部署成功提示如下：部署注意事项github仓库地址有两种，分别为https和SSH，在配置_config.yml文件时，注意区分。使用https地址时，部署hexo时，会出现如下选项使用SSH提交时，github for windows可能会出错，具体解决见上文。部署完成后，使用xxx.github.com访问时，可能会出现404页面：若之前操作没有报错，则此时可能是由于解析未完成，等一段时间登录即可；也可能是邮箱没有验证通过（我的就是这个问题吧。。。）。引用参考github地址中文官网地址Next 官网Next GitHubhexo-generator-feedHexo搭建Github静态博客hexo你的博客Windows下一步步搭建自己的独立博客——使用 GitHub Pages + Hexo 基础教程（一）]]></content>
      <categories>
        <category>Hexo</category>
        <category>安装部署</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Node.js</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Win8.1的Matlab7卸载问题]]></title>
    <url>%2Falex.d-blog%2Fposts%2F4869e41%2F</url>
    <content type="text"><![CDATA[问题描述使用matlab7自带的uninstaller.exe及控制面板卸载时都提示exeption calling main的错误提示信息。问题处理网上有很多都是介绍说是因为主题不符导致的这个问题，处理方法很简单，就是在个性化中，将主题改为windows经典主题样式，然后执行卸载程序就可以解决了。但有一点很尴尬，我使用的win8.1，在个性化中没有windows经典主题样式 ，这时可以试试下面的方法：1、在matlab的安装目录（或开始菜单中）找到uninstaller.exe；2、右键属性，修改其兼容性中兼容模式为Windows vista;3、确定后，重新运行uninstaller.exe，即可实现卸载。还有很多推荐使用完美卸载，但是很不理想，也会出现相同的错误提示。]]></content>
      <categories>
        <category>问题处理</category>
      </categories>
      <tags>
        <tag>Error</tag>
        <tag>Windows 8.1</tag>
        <tag>Matlab</tag>
      </tags>
  </entry>
</search>

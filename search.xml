<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[多个git托管平台同时使用时SSH Key的生成及添加]]></title>
    <url>%2Falex.d-blog%2Fposts%2F8b4e7cd5%2F</url>
    <content type="text"><![CDATA[使用一个邮箱注册多个git代码托管平台，如：GitHub、Gitlab、码云等。在用户端，生成对应平台的的 SSH Key 时，会生成对应的 id_rsa 及 id_rsa.pub 公钥文件（默认的密钥文件名取决于算法，此处默认使用RSA算法加密），然后在对应的平台上添加用户生成的 SSH Key 即可，下文将在此基础延伸多个git托管平台使用时，对应的多个秘钥生成及添加。 单个平台SSH key生成及添加Windows下需要在 git bash 命令行窗口（也可使用 cmder )，按照下面命令，来生成对应托管平台的 SSH Key 。 12ssh-keygen -t rsa -C "对应平台注册的邮箱地址" 命令行输出类似如下消息 1234567891011121314151617181920$ ssh-keygen -t rsa -C "maple_6392@163.com"Generating public/private rsa key pair.Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in gitee_id_rsa.Your public key has been saved in gitee_id_rsa.pub.The key fingerprint is:SHA256:t86b0RbwMYAVdqGwUQXkuS3ZnL1u4UJBgfjrK7TJkKY maple_6392@163.comThe key's randomart image is:+---[RSA 2048]----+| o*O==o || o*.=. || ..=.o || .O.= || .S =.B.. || + ...+.... || o + +o.o... || E =o.+..o || .*o o. |+----[SHA256]-----+ 此时在 ~/.ssh 目录下会生成 id_rsa 及 id_rsa.pub 文件 .ssh 目录在对应用户的根目录下，即 ： C:\Users\当前用户名\.ssh 然后将 id_rsa.pub 文件的内的 SSH Key 添加到对应的平台（此处以GitHub为例) 设置内后，通过命令进行验证 12ssh -T git@github.com 注意， 此处git@后添加对应平台的主域名，如Github的github.com，码云的gitee.com。 如果上面命令添加执行后，命令行输出类似内容 12Hi yourname（此处为对应git平台的用户名）! You've successfully authenticated... 或 12Welcome to xxx.com, yourname（此处为对应git平台的用户名）!... 则表示对应平台的SSH key生成及部署成功。 否则， 检查对应的key是否粘贴正确 检查操作步骤是否正确 Try again ~~~ 如出现添加了公钥后仍然无法推送代码，则可以参看此处注意： 要使用SSH链接操作远程仓库，Git的Remote要使用SSH地址，关于Remote使用见这里 多平台SSH key生成部署此处以 Github 及 码云 为例，做演示说明。 类似单平台SSH Key的创建，多个平台生成命令做如下调整： 12ssh-keygen -t rsa -C "平台注册的邮箱地址" -f "生成的rsa文件名" 注意： -f 后面带的文件名称，不含路径，则生成在当前命令行路径内所在的目录下。更多工具 ssh-keygen 的命令说明及使用见此处 通过此命令，依次生成两个平台的key 123456$ ssh-keygen -t rsa -C "maple_6392@163.com" -f "github_id_rsa"$ ssh-keygen -t rsa -C "maple_6392@163.com" -f "gitee_id_rsa"# Generating public/private rsa key pair...# 三次回车即可生成 ssh key 此时 ~/.ssh 目录下，生成的文件如下 此时对应的SSH Key生成成功，具体添加平台的步骤参看上文，添加完成进行验证时，出现如下提示： 1234567$ ssh -T git@gitee.comThe authenticity of host 'gitee.com (218.11.0.86)' can't be established.ECDSA key fingerprint is SHA256:FQGC9Kn/eye1W8icdBgrQp+KkGYoFgbVr17bmjey0Wc.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added 'gitee.com,218.11.0.86' (ECDSA) to the list of known hosts.Permission denied (publickey). 此时可以参看 Windows下由于SSH配置文件的不匹配，导致的Permission denied (publickey)及其解决方法 文章内说创建config文件，结合参考文章 【工具安装和配置】 GIT同时连接gitlab和githubstrong text 尝试后，未解决问题。 此处解决，使用 ssh-agent 工具，更多关于此工具的说明见此处。 ssh-agent解决Permission denied (publickey)问题 首先确定工具是否可以使用 12345$ eval `ssh-agent`## 控制台输出类似下面内容，表示该工具可以使用（结果输出为工具的进程PID）# Agent pid 7488 注意： Windows系统下需在 git bash 或 cmder 命令行界面下操作 使用 ssh-add 工具将 SSH Key 添加到 ssh-agent 123456789# 添加GitHub的SSH Key$ ssh-add C:/Users/xxx/.ssh/github_id_rsa# 添加码云的SSH Key$ ssh-add C:/Users/xxx/.ssh/gitee_id_rsa## 此时可能需要输入生成SSH Key时配置的密码（如果有设置的话），成功后输出类似以下内容# Identity added: C:/Users/xxx/.ssh/github_id_rsa (C:/Users/xxx/.ssh/github_id_rsa)# Identity added: C:/Users/xxx/.ssh/gitee_id_rsa (C:/Users/xxx/.ssh/gitee_id_rsa) 如出现类似下面提示： 123$ ssh-add C:\Users\xxx\.ssh\gitee_id_rsaCould not open a connection to your authentication agent. 可以使用 ssh-agent bash --login -i 命令来启动 ssh-agent 最后使用 ssh -T git@xxx.com 命令验证Key是否添加成功 关于SSH的更多命令可以查看此处 虽然通过上面操作可以使用ssh连接多个git平台，但使用git工具 TortoiseGit 进行提交时，依旧会出现 Please make sure you have the correct access rights and the repository exists. 的提示，此时在bash控制台通过 git push 命令则正常提交。。。 此问题待解决，有知道怎么处理的朋友，希望可以告知。]]></content>
      <categories>
        <category>问题处理</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>码云</tag>
        <tag>SSH Key</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo执行清理命令出现警告DEP0061]]></title>
    <url>%2Falex.d-blog%2Fposts%2F932be761%2F</url>
    <content type="text"><![CDATA[问题描述Win10 64位系统下，Node.js版本 v8.11.2 。本地安装部署Hexo执行 hexo clean 命令时出现如下警告： 问题处理经过查找，因本地Node.js版本为 v8.11.2 ,而 fs.SyncWriteStream 在 Node.js 8 中已经被废弃 而在Hexo的插件 Hexo-tag-cloud 依赖 hexo-fs 及 hexo-log ， 而 hexo-fs 需要 Node.js 6 的支持。 此处是Node.js版本不支持导致出现警告。可以尝试切换Node.js版本来处理，Node.js版本控制参看此处。 问题总结 在Hexo命令执行过程中，如出现问题，可以通过 --debug 查看问题，如： 123456789101112131415161718192021222324252627282930313233343536$ hexo clean --debug11:48:34.559 DEBUG Hexo version: 3.7.111:48:34.559 DEBUG Working directory: D:\work\000\blog\11:48:34.684 DEBUG Config loaded: D:\work\000\blog\_config.yml11:48:34.746 DEBUG Plugin loaded: hexo-algolia11:48:34.777 DEBUG Plugin loaded: hexo-deployer-git11:48:34.777 DEBUG Plugin loaded: hexo-fs11:48:34.777 DEBUG Plugin loaded: hexo-generator-archive11:48:34.793 DEBUG Plugin loaded: hexo-generator-baidu-sitemap11:48:34.793 DEBUG Plugin loaded: hexo-generator-category11:48:34.793 DEBUG Plugin loaded: hexo-generator-index11:48:34.824 DEBUG Plugin loaded: hexo-generator-feed11:48:34.824 DEBUG Plugin loaded: hexo-generator-searchdb11:48:34.840 DEBUG Plugin loaded: hexo-generator-sitemap11:48:34.840 DEBUG Plugin loaded: hexo-generator-tag11:48:34.840 DEBUG Plugin loaded: hexo-log11:48:34.840 DEBUG Plugin loaded: hexo-renderer-ejs11:48:34.856 DEBUG Plugin loaded: hexo-renderer-marked11:48:34.856 DEBUG Plugin loaded: hexo-renderer-stylus11:48:34.965 DEBUG Plugin loaded: hexo-server11:48:34.981 DEBUG Plugin loaded: hexo-tag-cloud(node:696) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.11:48:35.043 DEBUG Plugin loaded: hexo-wordcount11:48:35.074 DEBUG Script loaded: themes\next\scripts\merge-configs.js11:48:35.074 DEBUG Script loaded: themes\next\scripts\tags\button.js11:48:35.074 DEBUG Script loaded: themes\next\scripts\tags\exturl.js11:48:35.074 DEBUG Script loaded: themes\next\scripts\tags\center-quote.js11:48:35.074 DEBUG Script loaded: themes\next\scripts\tags\full-image.js11:48:35.090 DEBUG Script loaded: themes\next\scripts\merge.js11:48:35.090 DEBUG Script loaded: themes\next\scripts\tags\label.js11:48:35.090 DEBUG Script loaded: themes\next\scripts\tags\group-pictures.js11:48:35.090 DEBUG Script loaded: themes\next\scripts\tags\note.js11:48:35.090 DEBUG Script loaded: themes\next\scripts\tags\lazy-image.js11:48:35.090 DEBUG Script loaded: themes\next\scripts\tags\tabs.js11:48:35.090 INFO Deleted database.11:48:35.090 DEBUG Database saved 通过输出，可以发现在加载 hexo-tag-cloud 插件时出现的问题，快速的定位到了错误，方便问题的排查。 因Node.js的快速发展，版本迭代快速，而部分插件因各种因素，并未同步更新，使得使用过程中，会出现不少因版本不符导致的问题，所以在开发过程中，就需要对Node.js的多个版本进行管理，这时就需要一个趁手的工具，此处推荐几款Node.js版本管理工具，如下（排列不分先后，部分工具的对比及使用说明见此处）： n nvm wnvm nodist gnvm 参考 Node.js 8 说明 基于Hexo+Github+Coding搭建个人博客——基础篇(从菜鸟到放弃)]]></content>
      <categories>
        <category>问题处理</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>error</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[免安装版MySQL安装完成后登陆1045错误处理]]></title>
    <url>%2Falex.d-blog%2Fposts%2Faf835572%2F</url>
    <content type="text"><![CDATA[问题描述在Windows 10 64位系统下，免安装MySQL启动3534错误处理解决后，因安装时未配置密码，则按照网上教程在my.ini配置文件内的[mysqld]项下添加skip_grant_tables，控制台使用命令mysql -u root -p，进入mysql命令行（参考文章详见），然而并未像参考文章内描述的那样解决问题，控制台出现如下错误： 问题处理尝试了很多教程均不可以，最后考虑是否是mysqld --initialize命令导致的问题，尝试查找官网的安装教程，发现该命令初始化数据库时，还会自动生成一个随机密码： 然后问题就是随机生成的密码在哪里，这个可以在[官方安装教程]底部看到，明确指出生成的密码在data目录下的错误日志里: 按说明到data目录下，可以看到类似下面的错误日志： 在错误日志内可以查看到对应生成的随机密码： 使用该密码，正常进入mysql命令行模式，之后就可以尝试使用更新语句来更新root账号密码 12mysql&gt; ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;new_password&apos;; 问题总结在之前配置时出现3534错误，通过mysqld --initialize命令来完成初始化，会对应生成随机密码，并会标记&#39;root&#39;@&#39;localhost&#39;帐户密码过期，然后在错误日志显示输出随机密码。使用该随机密码，即可以登录mysql命令行模式，然后修改root密码，至此，才算配置完成。 通过官网配置教程，发现还有另外一个命令mysqld --initialize-insecure，使用该命令初始化数据库时，不会生成随机密码，而是直接标记&#39;root&#39;@&#39;localhost&#39;帐户密码过期，在错误日志内输出类似如下的提示信息： 1[Warning] root@localhost is created with an empty password ! Please consider switching off the --initialize-insecure option. 官方对于两个命令的说明如下： 使用mysqld --initialize-insecure命令初始化数据库后，启动服务，直接通过命令mysql -u root -p（提示输入密码时直接回车）即可进入mysql命令行模式。 注意： 数据库配置文件my.ini不需要配置skip_grant_tables! 参考 官网免安装配置教程 mysqld --initialize命令官网说明 mysqld --initialize-insecure命令官网说明 MySQL-深入分析MySQL ERROR 1045出现的原因]]></content>
      <categories>
        <category>问题处理</category>
        <category>安装部署</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[免安装MySQL启动3534错误处理]]></title>
    <url>%2Falex.d-blog%2Fposts%2F6b3d0e5e%2F</url>
    <content type="text"><![CDATA[问题描述在window10 64位系统环境下，官方下载免安装版MySQL，解压配置后，安装MySQL服务成功，运行时报错，错误提示如下： 问题处理 因为没有其他错误提示，首先尝试使用命令mysqld --console查看控制台输出，结果如下： 此处会发现有ERROR错误提示，不难发现此处的路径有问题，通过检查配置文件my.ini内的路径，发现为转移字符\t导致的此错误： 将地址中的斜杠\修改为反斜杠/，如下： 删除已经安装的服务，重新安装，重启： 此处依旧报错，命令mysqld --console，查看控制台信息： 提示配置的数据库存放目录（即my.ini配置文件中配置的datadir，本文配置路径为D:/work/tools/mysql-5.7.21-winx64/data）下表不存在，检查数据库存放目录： 通过查看，发下目录下确实不存在mysql相关表。此处错误因为未初始化数据库，导致配置MySQL数据库存放目录下没有生成对应的数据库表，尝试使用mysqld --initialize命令初始化数据库： 首先清理配置的数据库数据目录下的文件； mysqld --remove 命令删除服务 mysqld --install 命令重新创建服务 sc query mysql 命令确认服务是否生成，正常生成，则通过命令mysqld --initialize 初始化数据库 最后net start mysql 启动服务 运行如下： 服务正常启动，此时配置的数据库目录新生成文件如下： 问题总结此问题主要有几个原因导致： 配置文件不对 未创建数据库存放目录 创建服务后未初始化直接启动 因此，遇到此错误，则在确保正确配置my.ini配置文件后，创建指定的数据库存放目录，然后按照以下命令依次执行即可： 12345mysqld --removemysqld --install#记得安装服务后，此处要初始化mysqld --initialize net start mysql]]></content>
      <categories>
        <category>问题处理</category>
        <category>安装部署</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Open With Atom右键菜单失效]]></title>
    <url>%2Falex.d-blog%2Fposts%2Fb93e94bc%2F</url>
    <content type="text"><![CDATA[问题描述更换Win7系统后，重新安装了1.18.0版的Atom，右键菜单中的”Open With Atom”项失效， 且加载不了Atom的图标问题，如下图： 尝试重新安装Atom后，依旧出现类似问题。 问题分析此处应该是程序安装时，注册表项没有注册完成，或安装后使用软件进行了注册表清理。具体原因不确定，有知道的朋友，望告知~ 问题解决 首先修复右键点击目录或空白处时Atom图标不显示及“Open With Atom”无效的情况： 打开注册表编辑器(Win + R运行窗口键入regedit快速启动) 找到[HKEY_CLASSES_ROOT\Directory\shell\Atom]及[HKEY_CLASSES_ROOT\Directory\Background\shell\Atom]两项，看到类似下图： 点击上面的Atom项，右侧添加新的字符串值，名字为Icon,值为&quot;C:\Users\[此处为当前计算机用户名，如：Administrator]\AppData\Local\atom\app.ico&quot;（注意检查app.ico链接的有效性！），修改结果如： 在左侧上面的Atom项上右键，新建“项”，名字命名为command,点击“command”项，修改右侧的(默认)项，值为&quot;C:\Users\[此处为当前计算机用户名，如：Administrator]\AppData\Local\atom\[此处为atom版本目录，如app-1.8.0]\atom.exe&quot; &quot;%V&quot;,其中的app-1.18.0为本文安装的atom版本对应的目录，此处根据个人具体版本进行替换（注意检查atom.exe链接的有效性！），修改结果如下： 下面的Atom项，操作如上，最终结果如下： 至此，右键菜单“Open With Atom”项在文件夹及文件夹内空白处右键显示正常，且可以正常打开对应的文件夹。但此时依旧无法在单个文件上起效果。 修复右键点击单个文件时Atom图标不显示及“Open With Atom”无效的情况：注册表编辑器中，找到[HKEY_CLASSES_ROOT\*\shell\Atom]项，如下图： 此处可以看到，注册表内的版本（1.2.4）和安装的版本（1.18.0）不匹配（可能是更新或卸载时没有清理干净导致）,且此处的Icon对应的值为atom.exe而不是app.ico修改为对应的版本即可（注意检查app-1.18.0目录链接的有效性）。如Atom项没有此图中的Icon字符串值及command项，则根据上续步骤添加对应的值，注意此处的command的值为&quot;C:\Users\[此处为当前计算机用户名，如：Administrator]\AppData\Local\atom\[此处为atom版本目录，如app-1.8.0]\atom.exe&quot; &quot;%1&quot;做类似前面的修改，最终结果如下： \ 小记贴出修复此问题的.reg代码，使用方式：复制下列代码到新建的文本文档，做对应修改（主要修改当前计算机用户名及atom的版本目录），保存文件，重命名xxx.reg（xxx可以任意），右键执行“合并”，即可快速添加到注册表。 修复右键点击目录（文件夹）时Atom图标不显示及“Open With Atom”无效的情况： 12345678Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\Directory\shell\Atom]@=&quot;Open with Atom&quot;&quot;Icon&quot;=&quot;C:\\Users\\[此处为当前计算机用户名，如：Administrator]\\AppData\\Local\\atom\\app.ico\&quot;[HKEY_CLASSES_ROOT\Directory\shell\Atom\command]@=&quot;\&quot;C:\\Users\\[此处为当前计算机用户名，如：]\\AppData\\Local\\atom\\[此处为atom版本目录，如app-1.8.0]\\atom.exe\&quot; \&quot;%V\&quot; 修复右键点击目录空白处时Atom图标不显示及“Open With Atom”无效的情况： 12345678Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\Directory\Background\shell\Atom]@=&quot;Open with Atom&quot;&quot;Icon&quot;=&quot;C:\\Users\\[此处为当前计算机用户名，如：Administrator]\\AppData\\Local\\atom\\app.ico\&quot;[HKEY_CLASSES_ROOT\Directory\shell\Atom\command]@=&quot;\&quot;C:\\Users\\[此处为当前计算机用户名，如：]\\AppData\\Local\\atom\\[此处为atom版本目录，如app-1.8.0]\\atom.exe\&quot; \&quot;%V\&quot; 首先修复右键点击目录或空白处时Atom图标不显示及“Open With Atom”无效的情况： 12345678Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\*\shell\Atom]@=&quot;Open with Atom&quot;&quot;Icon&quot;=&quot;C:\\Users\\[此处为当前计算机用户名，如：Administrator]\\AppData\\Local\\atom\\app.ico\&quot;[HKEY_CLASSES_ROOT\Directory\shell\Atom\command]@=&quot;\&quot;C:\\Users\\[此处为当前计算机用户名，如：]\\AppData\\Local\\atom\\[此处为atom版本目录，如app-1.8.0]\\atom.exe\&quot; \&quot;%1\&quot; 至此Atom的右键Open With Atom图标不现实及功能失效解决，其他程序，操作类似~]]></content>
      <categories>
        <category>问题处理</category>
      </categories>
      <tags>
        <tag>Atom</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows小技巧 -- 关机时清理系统垃圾]]></title>
    <url>%2Falex.d-blog%2Fposts%2F59d07c0b%2F</url>
    <content type="text"><![CDATA[虽然垃圾清理时“老生常谈”的事情了，但由于不太喜欢管家等套件工具，又觉得CCleaner、FCleaner、Glary Utilities等这样的清理维护工具要安装、破解、点击清理等比较繁琐。所以，最后又回归bat批处理清理垃圾的老路。本文简单整理记录下，关于关机时自动调用批处理文件清理系统垃圾的实现。 垃圾文件 Windows在安装和使用过程中产生的垃圾： 临时文件（如.tmp、._mp等） 临时备份文件（如.bak、.old、*.syd等） 临时帮助文件（*.gid） 磁盘检查数据文件（*.chk） .dir、.dmp、*.nch等其他临时文件 软件等使用垃圾： 暴风影音、爱奇艺等播放器的播放记录 office等办公软件的使用记录 QQ、WeChat等使用时产生的一些零时文件 其他软件应用软件使用时的记录等 浏览器使用的垃圾： Cookies 历史记录（包括地址栏历史记录） 各种密码表单账户 脱机缓存文件（图片） 各种搜索记录等。 清理系统垃圾的批处理文件关于清理系统垃圾的批处理代码网上很多，这里提供一种做参考。 12345678910111213141516171819202122@echo offecho -----------------------------------------------------------------------echo 清空清空COOKIES和IE临时文件目录...rem del /f /q %userprofile%\COOKIES s\*.*rem del /f /q %userprofile%\recent\*.*del /f /s /q "%userprofile%\Local Settings\Temporary Internet Files\*.*"del /f /s /q "%temp%\*.*"echo 清除系统临时文件...:del /f /s /q %systemdrive%\*.tmp:del /f /s /q %systemdrive%\*._mp:rd /s /q %windir%\temp &amp; md %windir%\tempecho 备注：其它系统临时文件比如日志类要谨慎清理，如果不需要也可以直接在上面一句下增加其它文件删除即可。echo 清空垃圾箱，备份文件和预缓存脚本...:del /f /s /q %systemdrive%\recycled\*.*:del /f /s /q %windir%\*.bak:del /f /s /q %windir%\prefetch\*.*echo 清理SYSTEM32\DLLCACHE下无用文件...:%windir%\system32\sfc.exe /purgecacheecho 清除完成！echo -----------------------------------------------------------------------pause 批处理文件创建新建文本文档，复制粘贴上面代码后，保存时名称任意（便于自己记忆就好），最后修改此文本文档的格式（.txt）为 .bat 格式，即可以生成批处理文件，双击即可执行。 添加到关机脚本中添加到关机组策略中，以满足关机时自动调用批处理文件对垃圾文件的清理。 快捷键 Win + R - “运行” - 输入gpedit.msc - 回车打开“本地组策略编辑器” “本地计算机 策略” - “计算机配置” - “Windows 设置” - “脚本（启动/关机）” - 双击右侧的“关机” - “关机属性”中点击“添加（D）..” - “添加脚本”窗口中点击“浏览（B）..” - 找到本地刚新建的清理垃圾的bat文件： ” 添加脚本后，可以在关机属性中，看到新添加的脚本，此时点击“应用” - “确定” 即可完成配置： 当然，根据自己的需要，也可以在系统启动、登陆、注销等时候添加一些脚本，操作步骤类似。不会的话，可以参考微软官方文档，地址见扩展阅读。 扩展阅读微软官网文档 - 使用启动、关机、登录和注销脚本.aspx)]]></content>
      <categories>
        <category>Windows小技巧</category>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C#静态调用带有SoapHeader验证的WebService]]></title>
    <url>%2Falex.d-blog%2Fposts%2F96d3be06%2F</url>
    <content type="text"><![CDATA[本文记录带有SoapHeader验证的WebServices服务创建、部署及C#中的静态调用方法，基于 Windows8.1、Visual Studio 2013、IIS8 环境实现。 WebServices服务创建Visual Studio 2013中创建WebServices 创建一个空的 ASP.NET Web 应用程序 ： 创建 WebService 服务的程序（asmx格式）文件： 首次右键“添加”时，看不到图中所示的 “Web 服务（ASMX）” ，可以点击“新建项（W）”来实现创建： 到此 WebService 服务创建完成，可以看到如下基础代码: 快捷键 F5 或 ctrl + F5 运行程序如下： 此时可以点击页面的 Hello World 跳转到基于 HTTP POST 协议的调用测试页面 ： 点击“调用”即可以在新的页面看到返回的结果： 添加SoapHeader验证创建基础的WebService服务后，根据需要，有时服务会需要权限来保证安全，这里通过添加SoapHeader验证（即Soap的头信息验证）来实现。 首先需要我们自己去实现一个有身份验证信息的类，这个类继承于 System.Web.Services.Protocols.SoapHeader , 代码如下： 12345678910111213141516171819202122232425262728293031323334/// &lt;summary&gt;/// 自定义MySoapHeader类/// &lt;/summary&gt;public class MySoapHeader : System.Web.Services.Protocols.SoapHeader &#123; private string userName; private string passWord; public MySoapHeader() &#123; &#125; public MySoapHeader(string userName, string passWord) &#123; this.userName = userName; this.passWord = passWord; &#125; public string UserName &#123; set &#123; userName = value; &#125; get &#123; return userName; &#125; &#125; public string PassWord &#123; set &#123; passWord = value; &#125; get &#123; return passWord; &#125; &#125;&#125; 2.修改WebService类 1234567891011121314151617181920212223242526272829/// &lt;summary&gt; /// WebService1 的摘要说明 /// &lt;/summary&gt; [WebService(Namespace = &quot;http://tempuri.org/&quot;)] [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)] [System.ComponentModel.ToolboxItem(false)] // 若要允许使用 ASP.NET AJAX 从脚本中调用此 Web 服务，请取消注释以下行。 // [System.Web.Script.Services.ScriptService] public class WebService1 : System.Web.Services.WebService &#123; public MySoapHeader soapHeader; [WebMethod(Description=&quot;SoapHeader验证&quot;)] [System.Web.Services.Protocols.SoapHeader(&quot;soapHeader&quot;)] public string HelloWorld() &#123; //简单验证用户信息 //可以通过数据库或其他方式验证 if (&quot;admin&quot;.Equals(soapHeader.UserName) &amp; &quot;admin123&quot;.Equals(soapHeader.PassWord)) &#123; return &quot;用户验证通过！&quot;; &#125; else &#123; return &quot;对不起，您没有访问权限！&quot;; &#125; &#125; &#125; 至此实现了SoapHeader验证的添加，此处注意Webservice类中的方法上添加上SoapHeader特性。即上面代码中的[System.Web.Services.Protocols.SoapHeader(&quot;soapHeader&quot;)] 此处为简单实现，高级实现，可以参考MSDN提供的 教程文档 WebService服务部署WebService服务程序的发布编写好的web程序或者服务等，可以通过发布直接部署到服务器。这里没有远程服务器，所以使用本地的IIS服务器来运行WebService服务。发布方式如下： 后面两项配置默认即可，此时点击发布按钮，等待控制台显示如下提示，即表示发布成功： 此时可以在发布的目录中看到如下文件： 本地IIS服务部署在本地IIS的部署可以参看前文 Windows8.1中IIS服务安装及站点配置 中站点部署的部分。 部署后浏览结果如下： WebService的调用创建客户端创建控制台应用程序，用来调用测试。 添加引用新建完项目后，需要引用WebService服务，用于调用WebService 添加完引用后，打开“Program.cs”文件的Main方法中输入以下语句： 1234567891011121314151617181920212223242526272829303132using System;using System.Collections.Generic;using System.Linq;using System.Text;namespace TestService&#123; class Program &#123; static void Main(string[] args) &#123; //创建WebService服务实例 MyWebServices.WebService1SoapClient service = new MyWebServices.WebService1SoapClient(); //创建自定义SoapHeader对象实例 MyWebServices.MySoapHeader header = new MyWebServices.MySoapHeader(); //未设置SoapHeader的服务调用 Console.WriteLine(&quot;未设置SoapHeader的服务调用:&quot; + service.HelloWorld(header)); Console.WriteLine(); //将用户名与密码存入SoapHeader; header.UserName = &quot;admin&quot;; header.PassWord = &quot;admin123&quot;; ////设置SoapHeader的服务调用 Console.WriteLine(&quot;未设置SoapHeader的服务调用:&quot; + service.HelloWorld(header)); Console.Read(); &#125; &#125;&#125; 运行后，测试结果如下： 源码： C#静态调用带有SoapHeader验证的WebServices 参考及推荐关于Web Services学习，可以看这里： w3school 提供的系列教程 MSDN的ASP.NET XML Web services 基础知识 关于IIS Express和本地IIS服务的一些介绍比较，可以看这里]]></content>
      <categories>
        <category>C#</category>
        <category>WebService</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>SoapHeader</tag>
        <tag>WebService</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C#动态调用带有SoapHeader验证的WebService]]></title>
    <url>%2Falex.d-blog%2Fposts%2Fc9ff6b6b%2F</url>
    <content type="text"><![CDATA[本文记录C#中通过反射动态的调用带有SoapHeader验证的WebServices服务，基于 Windows8.1、Visual Studio 2013、IIS8 环境实现。关于WebService创建、部署及静态调用等内容，可以见：C#静态调用带有SoapHeader验证的WebService。 创建动态调用类创建一个客户端控制台程序，并新建类DynamicInvokeService.cs , 文件内容如下：using System;using System.Collections.Generic;using System.Linq;using System.Web;using System.Net;using System.IO;using System.Web.Services.Description;using System.CodeDom;using Microsoft.CSharp;using System.CodeDom.Compiler;using System.Reflection;namespace DynamicInvoke&#123; /// &lt;summary&gt; /// Web Service服务类 /// &lt;/summary&gt; public class WSHelper &#123; /// &lt; summary&gt; /// 动态调用web服务 （不含有SoapHeader） /// &lt; /summary&gt; /// &lt; param name=&quot;url&quot;&gt;WSDL服务地址&lt; /param&gt; /// &lt; param name=&quot;methodname&quot;&gt;方法名&lt; /param&gt; /// &lt; param name=&quot;args&quot;&gt;参数&lt; /param&gt; /// &lt; returns&gt;&lt; /returns&gt; public static object InvokeWebService(string url, string methodname, object[] args) &#123; return WSHelper.InvokeWebService(url, null, methodname, null, args); &#125; /// &lt;summary&gt; /// 动态调用web服务（含有SoapHeader） /// &lt;/summary&gt; /// &lt;param name=&quot;url&quot;&gt;&lt;/param&gt; /// &lt;param name=&quot;methodname&quot;&gt;&lt;/param&gt; /// &lt;param name=&quot;soapHeader&quot;&gt;&lt;/param&gt; /// &lt;param name=&quot;args&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static object InvokeWebService(string url, string methodname, SoapHeader soapHeader, object[] args) &#123; return WSHelper.InvokeWebService(url, null, methodname, soapHeader, args); &#125; /// &lt; summary&gt; /// 动态调用web服务 /// &lt; /summary&gt; /// &lt; param name=&quot;url&quot;&gt;WSDL服务地址&lt; /param&gt; /// &lt; param name=&quot;classname&quot;&gt;类名&lt; /param&gt; /// &lt; param name=&quot;methodname&quot;&gt;方法名&lt; /param&gt; /// &lt; param name=&quot;args&quot;&gt;参数&lt; /param&gt; /// &lt; returns&gt;&lt; /returns&gt; public static object InvokeWebService(string url, string classname, string methodname, SoapHeader soapHeader, object[] args) &#123; string @namespace = &quot;EnterpriseServerBase.WebService.DynamicWebCalling&quot;; if ((classname == null) || (classname == &quot;&quot;)) &#123; classname = WSHelper.GetWsClassName(url); &#125; try &#123; //获取WSDL WebClient wc = new WebClient(); Stream stream = wc.OpenRead(url + &quot;?WSDL&quot;); ServiceDescription sd = ServiceDescription.Read(stream); ServiceDescriptionImporter sdi = new ServiceDescriptionImporter(); sdi.AddServiceDescription(sd, &quot;&quot;, &quot;&quot;); CodeNamespace cn = new CodeNamespace(@namespace); //生成客户端代理类代码 CodeCompileUnit ccu = new CodeCompileUnit(); ccu.Namespaces.Add(cn); sdi.Import(cn, ccu); CSharpCodeProvider icc = new CSharpCodeProvider(); //设定编译参数 CompilerParameters cplist = new CompilerParameters(); cplist.GenerateExecutable = false; cplist.GenerateInMemory = true; cplist.ReferencedAssemblies.Add(&quot;System.dll&quot;); cplist.ReferencedAssemblies.Add(&quot;System.XML.dll&quot;); cplist.ReferencedAssemblies.Add(&quot;System.Web.Services.dll&quot;); cplist.ReferencedAssemblies.Add(&quot;System.Data.dll&quot;); //编译代理类 CompilerResults cr = icc.CompileAssemblyFromDom(cplist, ccu); if (cr.Errors.HasErrors) &#123; System.Text.StringBuilder sb = new System.Text.StringBuilder(); foreach (System.CodeDom.Compiler.CompilerError ce in cr.Errors) &#123;http://localhost:38076/Properties/ sb.Append(ce.ToString()); sb.Append(System.Environment.NewLine); &#125; throw new Exception(sb.ToString()); &#125; //保存生产的代理类，默认是保存在bin目录下面 TextWriter writer = File.CreateText(&quot;MyWebServices.cs&quot;); icc.GenerateCodeFromCompileUnit(ccu, writer, null); writer.Flush(); writer.Close(); //生成代理实例 System.Reflection.Assembly assembly = cr.CompiledAssembly; Type t = assembly.GetType(@namespace + &quot;.&quot; + classname, true, true); object obj = Activator.CreateInstance(t); #region 设置SoapHeader FieldInfo client = null; object clientkey = null; if (soapHeader != null) &#123; client = t.GetField(soapHeader.ClassName + &quot;Value&quot;); //获取客户端验证对象 soap类 Type typeClient = assembly.GetType(@namespace + &quot;.&quot; + soapHeader.ClassName); //为验证对象赋值 soap实例 clientkey = Activator.CreateInstance(typeClient); //遍历属性 foreach (KeyValuePair&lt;string, object&gt; property in soapHeader.Properties) &#123; typeClient.GetField(property.Key).SetValue(clientkey, property.Value); // typeClient.GetProperty(property.Key).SetValue(clientkey, property.Value, null); &#125; &#125; #endregion if (soapHeader != null) &#123; //设置Soap头 client.SetValue(obj, clientkey); //pro.SetValue(obj, soapHeader, null); &#125; //调用指定的方法 System.Reflection.MethodInfo mi = t.GetMethod(methodname); //方法名错误（找不到方法），给出提示 if (null == mi) &#123; return &quot;方法名不存在，请检查方法名是否正确！&quot;; &#125; return mi.Invoke(obj, args); // PropertyInfo propertyInfo = type.GetProperty(propertyname); //return propertyInfo.GetValue(obj, null); &#125; catch (Exception ex) &#123; throw new Exception(ex.InnerException.Message, new Exception(ex.InnerException.StackTrace)); &#125; &#125; private static string GetWsClassName(string wsUrl) &#123; string[] parts = wsUrl.Split(&apos;/&apos;); string[] pps = parts[parts.Length - 1].Split(&apos;.&apos;); return pps[0]; &#125; /// &lt;summary&gt; /// 构建SOAP头，用于SoapHeader验证 /// &lt;/summary&gt; public class SoapHeader &#123; /// &lt;summary&gt; /// 构造一个SOAP头 /// &lt;/summary&gt; public SoapHeader() &#123; this.Properties = new Dictionary&lt;string, object&gt;(); &#125; /// &lt;summary&gt; /// 构造一个SOAP头 /// &lt;/summary&gt; /// &lt;param name=&quot;className&quot;&gt;SOAP头的类名&lt;/param&gt; public SoapHeader(string className) &#123; this.ClassName = className; this.Properties = new Dictionary&lt;string, object&gt;(); &#125; /// &lt;summary&gt; /// 构造一个SOAP头 /// &lt;/summary&gt; /// &lt;param name=&quot;className&quot;&gt;SOAP头的类名&lt;/param&gt; /// &lt;param name=&quot;properties&quot;&gt;SOAP头的类属性名及属性值&lt;/param&gt; public SoapHeader(string className, Dictionary&lt;string, object&gt; properties) &#123; this.ClassName = className; this.Properties = properties; &#125; /// &lt;summary&gt; /// SOAP头的类名 /// &lt;/summary&gt; public string ClassName &#123; get; set; &#125; /// &lt;summary&gt; /// SOAP头的类属性名及属性值 /// &lt;/summary&gt; public Dictionary&lt;string, object&gt; Properties &#123; get; set; &#125; /// &lt;summary&gt; /// 为SOAP头增加一个属性及值 /// &lt;/summary&gt; /// &lt;param name=&quot;name&quot;&gt;SOAP头的类属性名&lt;/param&gt; /// &lt;param name=&quot;value&quot;&gt;SOAP头的类属性值&lt;/param&gt; public void AddProperty(string name, object value) &#123; if (this.Properties == null) &#123; this.Properties = new Dictionary&lt;string, object&gt;(); &#125; Properties.Add(name, value); &#125; &#125; &#125;&#125; 注意代码中有如下代码： 123456//保存生产的代理类，默认是保存在bin目录下面 TextWriter writer = File.CreateText(&quot;MyWebServices.cs&quot;);icc.GenerateCodeFromCompileUnit(ccu, writer, null);writer.Flush();writer.Close(); 此代码可以保存生成的代理类，可以在工程目录下的bin目录下查看文件。 测试端代码1234567891011121314151617181920212223242526272829303132333435363738using System;using System.Collections.Generic;using System.Linq;using System.Text;namespace DynamicInvokeService&#123; class Program &#123; static void Main(string[] args) &#123; string url = &quot;http://192.168.1.109:81/WebService1.asmx&quot;; //string url = &quot;http://192.168.1.109:82/WebService2.asmx&quot;; Dictionary&lt;string, object&gt; properties = new Dictionary&lt;string, object&gt;(); properties.Add(&quot;UserName&quot;, &quot;admin&quot;); properties.Add(&quot;PassWord&quot;, &quot;admin123&quot;); DynamicInvoke.WSHelper.SoapHeader soapHeader = new DynamicInvoke.WSHelper.SoapHeader(&quot;MySoapHeader&quot;, properties); Object obj1 = DynamicInvoke.WSHelper.InvokeWebService(url, &quot;HelloWorld&quot;, null); Object obj2 = DynamicInvoke.WSHelper.InvokeWebService(url, &quot;HelloWorld&quot;, soapHeader, null); Object obj3 = DynamicInvoke.WSHelper.InvokeWebService(url, &quot;getNum&quot;, new Object[] &#123; 1, 2 &#125;); Object obj4 = DynamicInvoke.WSHelper.InvokeWebService(url, &quot;getNum&quot;, soapHeader, new Object[] &#123; 1, 2 &#125;); Object obj5 = DynamicInvoke.WSHelper.InvokeWebService(url, &quot;getList&quot;, null); Object obj6 = DynamicInvoke.WSHelper.InvokeWebService(url, &quot;getList&quot;, soapHeader, null); Console.WriteLine(&quot;无SoapHeader调用HelloWorld：&quot; + obj1); Console.WriteLine(&quot;有SoapHeader调用HelloWorld：&quot; + obj2); Console.WriteLine(&quot;无SoapHeader调用getNum：&quot; + obj3); Console.WriteLine(&quot;有SoapHeader调用getNum：&quot; + obj4); Console.WriteLine(&quot;无SoapHeader调用无验证方法getList：&quot; + obj5.GetType().IsArray); Console.WriteLine(&quot;有SoapHeader调用无验证方法getList：&quot; + obj6); Console.ReadKey(); &#125; &#125;&#125; 运行后测试结果显示如下： 源码：C#动态调用带有SoapHeader验证的WebServices]]></content>
      <categories>
        <category>C#</category>
        <category>WebService</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>SoapHeader</tag>
        <tag>WebService</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows8.1中IIS服务安装及站点配置]]></title>
    <url>%2Falex.d-blog%2Fposts%2F291f04db%2F</url>
    <content type="text"><![CDATA[IIS介绍 IIS（Internet Information Services，互联网信息服务）,是由微软公司提供的基于运行Microsoft Windows的互联网基本服务。IIS是一个World Wide Web server。Gopher server和FTP server全部包容在里面。 IIS意味着你能发布网页，并且有ASP（Active Server Pages）、JAVA、VBscript产生页面，有着一些扩展功能。IIS支持一些有趣的东西，像有编辑环境的界面（FRONTPAGE）、有全文检索功能的（INDEX SERVER）、有多媒体功能的（NET SHOW） 其次,IIS是随Windows NT Server 4.0一起提供的文件和应用程序服务器，是在Windows NT Server上建立Internet服务器的基本组件。它与Windows NT Server完全集成，允许使用Windows NT Server内置的安全性以及NTFS文件系统建立强大灵活的Internet/Intranet站点。IIS（Internet Information Server，互联网信息服务）是一种Web（网页）服务组件，其中包括Web服务器、FTP服务器、NNTP服务器和SMTP服务器，分别用于网页浏览、文件传输、新闻服务和邮件发送等方面，它使得在网络（包括互联网和局域网）上发布信息成了一件很容易的事。。 —— 百度百科 IIS安装1. 打开“控制面板” - “程序”- “启用或关闭 Windows 功能”： 2. 选择“Internet 信息服务（或Internet Information Services）”项，勾选IIS服务相关功能（按需勾选）： 3. 确定安装:点击确定后会出现搜索文件的提示框： 此时系统有过更新，则会直接安装，如没有更新文件，会提示下载： 此时点击“从 Windows 更新下载文件”，等待下载完成后，会自动安装功能。 注：在下载时，可能会提示错误代码：0x800F0906，这个是.NET Framework 3.5安装时提示的错误，解决方法可以看这里或这里。出现此错误提示时，按上述解决方法安装.NET 3.5后再重复IIS安装步骤，即可快速完成。另，附上Microsoft .NET Framework 3.5 Service Pack 1 下载地址 IIS服务配置1. 快捷键 WIN + X - “计算机管理”: 2.选择IIS管理器 弹出的窗口选择“是”以后，注意启动万维网发布服务（W3SVC）： 注： 在启动IIS服务前，需要先启动万维网发布服务，不然会出现“万维网发布服务(W3SVC)已经停止。除非万维网发布服务(W3SVC)正在运行,否则无法启动网站。”的错误提示。 启动万维网发布服务后，就可以发现 Default Web Site 的网站管理的状态为启动： 启动IIS服务后即可以浏览网站，出现类似下图结果表示IIS安装配置完成： IIS服务器站点配置1. “控制面板” - “管理工具”-“Internet Information Services（IIS）管理器”： 2. 如图，网站上右键，“添加站点”： 设置完成后，可以在“网站”下看到自己最新添加的站点。如，此处新增站点“HelloWorld”: 注： 在填写新添加网站信息时，注意端口值，避免冲突。（当其他网站运行时，端口出现冲突时，会有窗口提醒。） 3. 设置完成后，启动万维网发布服务（W3SVC），然后在新站点名称上右键 - “网站管理”- “浏览”，会出现如下错误提示页面： 错误提示页面中，清楚的说明了错误可能的原因及解决方法，按照其解决步骤操作后，即可运行成功： 设置好目录浏览，再次浏览时，会发现403错误不见了，但只是显示目录结构，此处是“index.aspx”文件不再“默认文档”的配置中，这里添加上，即可解决： 最终运行结果：]]></content>
      <categories>
        <category>安装部署</category>
      </categories>
      <tags>
        <tag>Windows 8.1</tag>
        <tag>IIS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MyBatis Generator 异常错误记录]]></title>
    <url>%2Falex.d-blog%2Fposts%2Fd4a4ba8b%2F</url>
    <content type="text"><![CDATA[本文记录在命令行运行 MyBatis Generator 下出现的错误，链接 MySQL 数据库。 本文中命令行运行 MyBatis Generator 语句如下：1java -jar mybatis-generator-core-x.x.x.jar -configfile generatorConfig.xml -overwrite Error: Unable to access jarfile mybatis-generator-core-x.x.x.jar即命令行中的 mybatis-generator-core-x.x.x.jar文件找不到。遇到这个错误可以通过绝对路径或复制该jar到 generatorConfig.xml 目录下。 运行后，当前错误会变为其他提示。 Exception in thread “main” java.lang.RuntimeException: Exception getting JDBC Driver在命令行中这个错误会有清晰的错误原因提示： 错误提示中清晰的说明了异常为 jdbc.driver 的类找不到，即没有加载jdbc的jar包。应该在 generatorConfig.xml 文件中配置&lt;classPathEntry&gt; 元素（详见）： 此处的数据库驱动jar包路径为绝对路径（此处jar包与配置文件同目录）。如出现类似以下错误： 1Exception in thread "main" java.lang.RuntimeException: Cannot resolve classpath entry: xx/mysql-connector-java-x.x.x.jar 表示此处的路径配置错误，修改为对应绝对路径即可。 Table configuration with catalog null, schema null, and table user did not resolve to any tables出现这个错误表示表（此处为user表）没有创建，只要在数据库中创建对应的表即可。 参考 MyBatis Generator官方手册（中文）]]></content>
      <categories>
        <category>问题处理</category>
        <category>自动化构建</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>MyBatis Generator</tag>
        <tag>Error</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows小技巧 -- 目录内打开CMD的快捷方式]]></title>
    <url>%2Falex.d-blog%2Fposts%2Fc00e8cd4%2F</url>
    <content type="text"><![CDATA[在工作中常常会有需要在某个文件夹内使用cmd的情况，例如运行某脚本，下面演示几种方法。 以进入以下目录操作为例： “姿势”一 ： 常用的cd命令cd命令是我们平常使用比较多的方式： Win+R打开cmd窗口，默认显示如下（非管理员模式）； 此时需要依次键入命令e: cd github cd anyer cd Wechat-Weapp 或e: cd github\anyer\WeChat-WeApp\ 或 cd E:\github\anyer\WeChat-WeApp\（没有进入指定目录时，再键入一个） 3.进行操作。 “姿势”二 ： 鼠标右键的快捷方式显然经历了上面的多个命令，是不是感觉很忧桑，下面来个快捷点的方式： 1.Win+E资源管理器快速进入指定目录； 2.Shift+鼠标右键出现选项菜单 选择在此处打开命令窗口(W)项； 3.进行操作。 上述方式仅支持当前用户（非管理员）权限的cmd，当需要管理员权限时，可以尝试下面方式。 给右键添加管理员方式运行命令行窗口，使用下面代码，复制代码，保存为任意名称.reg，即保存为注册表文件。 12345678910111213141516171819202122232425262728293031323334353637383940414243Windows Registry Editor Version 5.00; Created by: Shawn Brink; http://www.sevenforums.com; Tutorial: http://www.sevenforums.com/tutorials/47415-open-command-window-here-administrator.html[-HKEY_CLASSES_ROOT\Directory\shell\runas][HKEY_CLASSES_ROOT\Directory\shell\runas]@="Open cmd here as Admin""HasLUAShield"=""[HKEY_CLASSES_ROOT\Directory\shell\runas\command]@="cmd.exe /s /k pushd \"%V\""[-HKEY_CLASSES_ROOT\Directory\Background\shell\runas][HKEY_CLASSES_ROOT\Directory\Background\shell\runas]@="Open cmd here as Admin""HasLUAShield"=""[HKEY_CLASSES_ROOT\Directory\Background\shell\runas\command]@="cmd.exe /s /k pushd \"%V\""[-HKEY_CLASSES_ROOT\Drive\shell\runas][HKEY_CLASSES_ROOT\Drive\shell\runas]@="Open cmd here as Admin""HasLUAShield"=""[HKEY_CLASSES_ROOT\Drive\shell\runas\command]@="cmd.exe /s /k pushd \"%V\"" 保存后，双击此文件，即在右键添加了选项： 当想删除右键菜单选项时，可以使用下面命令，复制保存为任意名称.reg，双击运行即可。12345678910111213Windows Registry Editor Version 5.00; Created by: Shawn Brink; http://www.sevenforums.com; Tutorial: http://www.sevenforums.com/tutorials/47415-open-command-window-here-administrator.html[-HKEY_CLASSES_ROOT\Directory\shell\runas][-HKEY_CLASSES_ROOT\Directory\Background\shell\runas][-HKEY_CLASSES_ROOT\Drive\shell\runas] “姿势”三：资源管理器（2017-08-08 增）在资源管理器的地址栏内输入cmd 或 powershell 回车后，依旧可以实现在当前目录快速打开命令行窗口: 进入指定目录 地址栏输入cmd 或 powershell 回车确认 “姿势”四 : git命令行此方式使用git的用户，安装git时确定安装git bash命令行，以确保可以在命令行里完成git操作~。windows下安装git教程自行百度了。安装好后，在需要使用cmd的目录中，使用git bash来替代使用。1.资源管理器进入指定目录；2.鼠标右键，菜单项中选择Git Bash Here项目； 3.进行操作； “姿势”五：快捷方式（2018-06-13 增）偶然间发现了这个有趣的操作，虽然不是直接在目录内启动，但也是另辟蹊径的“玩法”了~~ 首先创建快捷方式 选择一个目录（这里选择Python2的目录） 给快捷方式起个名字 创建完成后，修改快捷方式属性 将快捷方式创建指定的的目录，改为起始位置，快捷方式的目标地址修改为cmd的路径，如下： 配置完成，即可以通过快捷方式，快速在目录内打开cmd。。 注意： 在创建快捷方式时，可以直接在目标内输入cmd, 即直接创建了cmd的快捷方式，后续再添加 起始位置 为自己想要cmd运行的目录 其他方式，后续了解后补充~]]></content>
      <categories>
        <category>Windows小技巧</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>cmd</tag>
        <tag>快捷方式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信小程序资源整理]]></title>
    <url>%2Falex.d-blog%2Fposts%2F763e972d%2F</url>
    <content type="text"><![CDATA[微信小程序相关的文档、教程、开源项目等资源的整理，以便于开发学习使用。 —— —— 收录仅作个人学习使用，涉及侵权行为及时联系： maple_6392@163.com 项目地址：GitHub | 码云 | Coding 开发文档 开发文档 微信公众平台 · 小程序文档 微信公众平台 | 小程序 小程序介绍 小程序设计 小程序开发 - 简易教程· 小程序 小程序运营 简易教程· 小程序（非官方） | 项目地址 微信小程序设计指南 微信小程序平台运营规范 WeUI 微信官方设计团队为微信Web开发量身设计基础样式库 | 项目地址 | wiki w3cschool | 微信小程序开发教程手册文档 其他文档 腾讯云带你从零开始搭建具有云端能力的小程序系列 小程序配置指引、升级方案 场景一：文件上传下载 | 小相册教程 | 小相册源码 场景二：WebSocket长连接应用 | 剪刀石头布教程 | 剪刀石头布源码 场景三：会话管理应用 | 会话管理应用教程 | 会话管理应用源码 场景四：视频应用场景 | 视频应用教程 | 视频应用源码 起步软件 | 微信应用号「小程序」最全的Q&amp;A列表 辅助开发工具和插件 骨架、脚手架 zce / weapp-boilerplate 微信小程序开发准备的基础骨架 | 工具地址 maichong / labrador 微信小程序模块化开发框架 | 工具地址 maichong / labrador-cli 微信小程序模块化开发框架 | 工具地址 GreedBell/weapp-template template for weapp with ES2015. 使用 ES2015 写微信小程序的模板 | 工具地址 微信公众平台小程序在线生成工具 - 生成配置文件以及文件目录 leegtang / xiaochengxuGen 微信小程序页面生成器 | 工具地址 辅助插件 chemzqm / wxapp.vim 提供微信小程序开发全方位支持的 vim 插件 | 插件地址 Abbotton / weapp-snippet-for-sublime-text-2-3 为 sublime text 2&amp;3 准备的微信应用号/小程序 snippet | 插件地址 johnwang77 / JWSnippets-For-VSCode 专为VSCode&amp;Wing开发微信小程序编写的Snippet | 插件地址 wx-compile-key 微信小程序全局编译快捷键（npmjs） | 插件地址 lypeer / Matchmaker Intellij IDEA中自动完成绑定方法自动注入js插件 | 插件地址 remobile / atom-wx 微信小程序语法高亮(atom-wx) | 插件地址 chemzqm / wept 微信小程序实时开发工具 | 插件地址 | 发布文 | 视频演示 gakaki / we_chat_mouse_click 微信小程序 ide 自动刷新 | 插件地址 zarknight / wxapp-startkit 微信小程序 StartKit (Gulp + Babel + Sass) | 插件地址 stephenml / wx-query 微信小程序仿jQuery插件 | 项目地址 nbagonet / wxa-compressor 微信小程序代码压缩器 | 插件地址 xiadd / atom-wxapp 微信小程序代码补全 | 插件地址 UI及组件 微信小程序Axure组件 liujians / Wa-UI 针对微信小程序整合的一套UI库 | 组件地址 nickzone / wxa-ui 微信小程序ui模板 | 组件地址 baya / weui-base-guide-practice 对微信设计指南中的Web设计和小程序基础控件库的练习 | 项目地址 hawx1993 / wxapp-charts 微信小程序图表charts组件 | 组件地址 icindy / wxParse 微信小程序富文本解析自定义组件，支持HTML及markdown解析 | 组件地址 黄秀杰 RadioGroup代替方案，类似iOS中UISegmentedControl 小程序下拉菜单，可用于筛选 LXStepper组件，用于购物车商品数量的加减。 微信小程序倒计时组件 LXRowAction 类似iOS中UITableView轻扫删除 rongj 滑动选项卡 级联筛选动画及上下拉刷新 全屏动画滚动 xuhongjia / wx-city-choose-picker 微信小程序三级地址联动选择器 | 组件地址 newpepsi / weixin_calendar 微信小程序日历 | 组件地址 其他工具 stackOverMind / WeApp-adapter 将微信小程序私有的api适配到标准w3c API | 工具地址 SporeUI / spore-kit-wapp 微信小程序工具函数集 | 工具地址 GreedBell / weapp-promise 把微信小程序 api 转成 promise 工具地址 icindy / WxNotificationCenter 微信小程序通知广播模式类,降低小程序之间的耦合度 | 工具地址 f111fei / weapp-typescript 使用TypeScript开发微信小程序 | 项目地址 开发社区 微信小程序社区（http://www.cwechat.org/） 微信小程序社区（http://www.xiaochengxu-wx.com/） 微信小程序开发社区(http://xiao-app.com/) 小程序开发者社区(http://wxcss.net/)微信小程序开发者社区，提供海量微信小程序开发，微信小程序开发源码下载，微信小程序开发问题解答，微信小程序游戏开发经验分享，微信小程序开发人才招聘，微信小程序开发环境搭建，微信小程序游戏开发进阶，微信小程序sdk下载等。 很快-微信开发者平台 | 微信小程序开发henkuai.com微信开发者平台,国内最大的微信开发者平台,最权威的微信开发者社区 x2小程序 / 新域名 | 小程序，大世界。 国内首个微信小程序开发者社区本站（www.mntuku.cn）作为专业的微信小程序开发者社区为大家提供：微信小程序开发者交流平台，开发教程，定制开发（交易），最新资讯等微信小程序相关消息。欢迎大家来此交流！ 微信小程序开发论坛－垂直微信小论坛开发社区微信小程序,微信应用号垂直微信开发者交流社区,关注微信小程序的动态、文档、分析、讨论并且能够发布好玩有用的微信小程序、微信相关开发人员、微信相关外包等。 微信小程序开发社区(http://www.youngapp.org/)微信小程序社区是微信开发者在线交流的专业社区,在这里可以分享微信小程序开发教程、微信小程序开发文档、微信小程序开发经验,解决项目中遇到的实际问题. 微信小程序资讯网 | 全球最大的微信小程序资讯、下载、交流专业站点。 QQ群：139122611 小程序联盟(http://www.yinxiaomi.cn/) 微信小程序联盟(http://wxapp.dreawer.com/) | 微信小程序社区-微信小程序开发社区-微信小程序联盟 小程序啦 - 精品微信小程序推荐 | 小程序导航,精品微信小程序推荐！ 蜂鸟微信小程序开发者平台 微信小程序SCHOOL 微信小程序社区(http://youngapp.org/)微信小程序社区是微信开发者在线交流的专业社区,在这里可以分享微信小程序开发教程、微信小程序开发文档、微信小程序开发经验,解决项目中遇到的实际问题. 微信小程序学习社区 | 微信小程序学习社区, 一个认真的技术社区 小程序资讯网 | 全球最大的微信小程序资讯、下载、交流专业站点。 QQ群：139122611 微信小程序开发社区(http://www.010hub.com/) 微信小程序开发社区(http://www.360xiaochengxu.com/) 微信小程序Club(www.wxappclub.com)wxappclub.com微信小程序俱乐部是国内最大最具影响力的微信小程序社区，致力于微信小程序技术研究、教学、推广和运营。提供开发者API中心用于快速学习小程序开发 最新热文 9.21 为什么微信深夜发布的“小程序”引动了开发者的大地震？ 微信“小程序”来了，短期不可高估，长期不可低估 9.22 「微信小程序」有哪些冲击与机会？ 微信小程序，一个有局限的类似 React Native 轮子！ 微信小程序：新开放与新封闭 微信正式开放内测“小程序”，不开发APP的日子真的来了？ 微信小程序细节汇总：会Javascript的工程师要发了 你的产品适不适合做微信小程序？你需要这篇产品逻辑分析 微信小程序动了谁的蛋糕，又会把蛋糕分给谁？ 小程序来了，不断臃肿的微信会沦为下一个QQ吗？ 微信小程序操作效果视频演示：不是App胜似App 9.23 应用号终于来了 微信小程序信息全剖析 微信”小程序”想要干掉APP 或将考验应用商店模式 微信应用号刷屏背后：小程序能否代替App？ 微信小程序深入分析（1）–微信小程序的技术级别如何？ 9.24 我们真的需要微信「小程序」么？ 微信小程序_微信小应用号功能 9.25 微信“小程序”背后，BAT集体变“轻” 从Chrome App看微信小程序 微信小程序让创业者纠结：要成功还有几步要走？ 9.26 基于张小龙所描述的微信价值观，微信小程序应该被这样解读 9.27 在微信应用号（微信小程序）开发什么什么应用爆发概率大？ 微信小程序开发三宗罪和解决方案 微信小程序底层的实现原理是怎样的？ 9.28 微信推小程序 意图并非取代APP 通过微信小程序看前端 9.30 微信小程序背后的思考 10.3 错过了淘宝，微博，微信的第一波红利，这次你还要错过「微信小程序」么？(深度分析) 10.4 我们真的需要小程序吗？| HTML5老兵如是说 10.12 微信小程序的理性思考 10.13 微信小程序官方文档解读：如何才能避开小程序的规则“雷区” 10.14 创业者必知|微信小程序的 7 点总结 换个角度，再来看一下微信小程序的开发与发展 10.15 微信小程序 VS 原生APP，这一局你站哪边? 10.17 微信小程序，对开发者的选择 10.19 也许微信正在将场景化应用带到你的身边 10.21 微信小程序的未来史记，你不曾想象过的世界 10.22 坤鹏论：微信小程序承载未来发展重任 10.24 白鹭时代推出微信小程序开发者工具，认为小程序会养活一批第三方团队 10.25 爱范儿 CTO 何世友：聊聊微信「小程序」的幕后、现在和未来 “域名一直很重要”，曝微信小程序上线 由微信小程序引发的设计思考 微信小程序也需要域名的，大时代的来临 小程序的开发成本真的比原生App低吗？ 10.26 小程序官方文档解读：如何才能避免违反微信规则 10.27 行话儿 | 微信小程序 VS 原生APP，这一局你站哪边？ 微信小程序和Android开发对比(上篇) 微信观察家、原极客公园CEO阿禅对于微信小程序的独家深度爆料 10.28 微信小程序第二次更新：增加 19 个接口 业界：微信“小程序”将加剧中小APP生存难度 阿拉丁创始人史文禄：微信小程序是未来全新创业路径 微信小程序:APP之痛? 10.29 深挖微信小程序！你需要先了解这三个内核 微信小程序应用号开发价值体现在哪？ 10.30 微信小程序的想象力与不可想象域 10.31 从马化腾的讲话读懂微信小程序的使命 脑洞文：未来微信的流量瓶颈，可能源于其熟人社交模式 微信群升级背后：为小程序服务铺路？ 白鹭时代张鑫磊：迎接H5高速变现时代，微信小程序或许是个契机 微信小程序马上要开放了，微信悄悄改变开始预热 微信小程序和Android开发对比(下篇) 11.3 微信小程序正式开放公测（附申请地址） 微信小程序半夜开放公测！我们连夜测试了一下，结果…… 微信开放小程序公测，做好这 4 件事抢占先机 微信小程序正式开放公测，将给创业者带来哪些机会？ 微信小程序内测一个多月，工程师说它是个封闭生态 程序员的又一春，微信小程序带来的一个赚钱机遇 微信小程序来了，不得不看的未来机会! 11.4 微信小程序开放公测 不接受个人身份申请 微信小程序的想象力与不可想象域 微信小程序公测后|在过去的43天里，小程序影响了什么？ 谈谈小程序与服务号的区别 11.5 深入分析：微信小程序与H5的区别 11.7 史上首个微信小程序Demo流出！7大关键信息揭秘 微信小程序被高估了 11.8 微信小程序初体验（上） 干货：少走弯路，开发小程序前，需要注意的几个细节 干货：iOS APP与小程序UI设计对比 11.9 微信公测“小程序”：发力轻应用 防过度商业化 11.10 应对微信小程序，产品经理要知道这 5 个设计思路 小程序开发平台 即速应用 | 微信小程序开发,微信应用号开发平台,手机app制作-即速应用,为企业提供微信应用号开发工具,基于html5技术进行手机app开发。企业在线制作webapp,无需代码，即可自助建站。]]></content>
      <categories>
        <category>微信</category>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>微信</tag>
        <tag>小程序</tag>
        <tag>资源</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows小技巧 -- Win+R提高Windows使用效率]]></title>
    <url>%2Falex.d-blog%2Fposts%2Fe009e4bc%2F</url>
    <content type="text"><![CDATA[追求效率的朋友都需要一款顺手的快速启动工具，Win 平台上有键盘流的RunZ、Listary、ALTRun、Launchy、Wox 和图标流的 Fences、Rolan、 WinLaunch 等，而 Mac 上也有 Alfred、Spotlight。而对于快速启动工具，最基本需求一般是这样的： 体积小，资源占用低，速度快，最好可以不常驻运行。 项目尚有人维护，有反馈渠道。 可扩展性强，支持方便地用脚本扩展功能。 但对于Windows系统，不能忽略的是系统自带的 Win+R 功能（你还不知道这个吗？那赶快试试吧~）。下面不妨抛开这些软件，来看看这个“神器”怎么提高使用效率。 WIN +ＲWin+R（开始菜单 &gt; 运行）是 Windows 的一个原生的功能，从 XP 到 Windows 10 都自带了。当用户按下「Win+R」快捷键后，系统会弹出一个小窗口让你输入命令，回车后会立即执行命令并关闭自身窗口。它不会驻留后台、不占用内存而且速度极快，因此很多高手们利用 Win+R 改造成属于自己的快捷启动工具！说的很厉害的样子，那WIN+R到底可以做什么呢？下面来看看它的神奇之处~ 快速启动应用程序是否还在为一桌面的快捷方式烦恼呢？是否还在为找一个软件的快捷方式烦恼呢？是否还在为要挑选桌面整理工具而烦恼呢？是否。。。软件打开那么简单的事情，但却给我们带来了不少的困扰，我们要花功夫来鉴别不同的快捷图标，而哪天图标不小心删除了，又要在安装目录，在开始菜单等地方来查找（当然你可以尝试使用Win+F查找更能来实现），但都耽误不少功夫，而且如果想打开多个软件，那又会花去多少功夫呢？在平时，Win+R 使用最多的应该就是打开cmd.exe 命令提示符吧~， 那是否用它打开过其他系统应用呢？下面来看看Win+R启动系统应用的命令吧： 系统应用程序 calc - 启动计算器charmap - 启动字符映射表chkdsk - Chkdsk磁盘检查cleanmgr - 磁盘清理clipbrd - 剪贴板查看器cmd.exe - CMD命令提示符dvdplay - DVD播放器dxdiag - DirectX诊断工具eudcedit - 造字程序（专用字符编辑程序）explorer - 资源管理器iexpress - 木马捆绑工具，系统自带magnify - 放大镜mplayer2 - 简易widnows mediaplayer msconfig - 系统配置mspaint - 画图板mstsc - 远程桌面连接narrator - 屏幕“讲述人”notepad - 打开记事本nslookup - IP地址侦测器osk - 打开屏幕键盘regedit - 注册表编辑器regedt32 - 注册表编辑器sndrec32 - 录音机sndvol32 - 音量控制程序taskmgr - 任务管理器winchat - XP自带局域网聊天write - 写字板 dcomcnfg - 系统组件服务ddeshare - DDE共享设置nslookup - 网络管理的工具向导ntbackup - 系统备份和还原mobsync - 同步中心winmsd - 系统信息winver - 检查Windows版本wiaacmgr - 扫描仪和照相机向导wscript - windows脚本宿主设置wupdmgr - windows更新程序 管理控制台管理单元文件mmc - 管理控制台 certmgr.msc - 证书管理ciadv.msc - 索引服务程序comexp.msc - 组件服务compmgmt.msc - 计算机管理devmgmt.msc - 设备管理器dfrg.msc - 磁盘碎片整理程序diskmgmt.msc - 磁盘管理eventvwr.msc - 事件查看器fsmgmt.msc - 共享文件夹管理器gpedit.msc - 组策略管理器（本地组策略编辑器）lusrmgr.msc - 本机用户和组ntmsmgr.msc - 移动存储管理器ntmsoprq.msc - 移动存储管理员操作请求perfmon.msc - 性能监视器rsop.msc - 组策略结果集secpol.msc - 本地安全策略services.msc - 本地服务设置wmimgmt.msc - windows管理体系结构WMI（控制台根节点\WMI控件） 那么非系统自带的程序，怎么快速启动呢？如qq。设置步骤如下： 新建文件夹首先新建一个文件夹，用于存储快速启动的程序的快捷方式，文件夹存放位置任意：这里新建文件夹”WinR“,存放在c盘根目录下。 配置环境变量将新建的文件夹的目录，添加到环境变量中，如图：ps:此处可以配置单个应用程序到环境变量path中，这样就可以通过Win+R里输入应用程序的名称，实现快速访问。如将cmder.exe配置到环境变量中：这样就可以通过Win+R快速打开Cmder：但这里不这样配置，因为这样配置会导致path里面内容过多，可能会容易出现一些问题，而且一个个添加过于麻烦，所以这里配置文件夹路径，然后通过快捷方式实现快速访问。 注意：配置环境变量时，注意路径中的冒号、斜杠和封号均为英文半角输入 放置快捷方式将软件的快捷方式，放入”WinR“目录中，给快捷方式起一个简单好记的名字（自己能记住的） 。如上图中，”ali“ = “阿里巴巴客户端”，”aqy“ = “爱奇艺播放器”，”gc“ = “google chrome浏览器”，以此类推，快捷键名称任起，便于自己记忆就好。 快速启动演示如打开chrome浏览器，可以通过输入”gc“来快速打开 注意:Win+R访问快捷方式时，英文名不区分大小写，即gc和GC是一样的效果 快速打开文件/目录有时想找某个文件，是否还在为要点卡n多个目录感到苦逼呢？是否为经常重复进一个目录而感觉无奈呢？那可以试试Win+R大法~如果知道一个文件的目录，或者想快速进入一个目录，比如我们会常常进入system32目录进行一些操作，那么别一个个文件点了，直接这样来：这里可以像快速打开应用程序一样，设置快捷方式来快速的进入目录或打开文件。首先进入快捷方式存放目录”WinR“，在空白地方右键，新建，快捷方式：这里键入的对象位置，可以为应用程序、文件、目录、脚本、网页等地址。这里添加的是目录地址，用于快速进入目录。快速启动文件的设置与此类似。 当然，快速进入目录，可以直接通过在Win+R运行窗口中输入地址，来实现快速进入指定的路径。如：c:/WinR 其他应用 快速访问指定站点 Win+R运行窗口直接输入 通过设置快捷方式 快速访问脚本 Win+R运行窗口直接输入 通过设置快捷方式 执行命令使用Win+R也可以执行一些命令任务，如ping： 当然，为了提高对于Win系统的使用效率，必要的快捷键，大家还是应该知道的，关于windows快捷键，看看Microsoft官网整理的吧~：Windows 的键盘快捷键 关于Win8/8.1/10的快速启动使用Win8以上版本系统，都可以明显发现开机速度优于Win7及XP，这就是因为系统增加了快速启动设置，那么这个设置在哪呢？在系统任务栏的右下角，点击电池图标，出现如下图选项:选择“更多电源选项”，会弹出如下“电源选项”窗口：选择 ”选择电源按钮的功能“项，会进入如下“系统设置”窗口：在这个窗口中，可以看到底部的”关机设置“中有”启用快速启动（推荐）“的选项，此处已勾选，表示打开了系统的快速启动设置，如果想关闭快速启动，可以选择上面的“更改当前不可用的设置“选项。 加强版 WIN+R – nTrun当然如果觉得它还不够强大，可以尝试下nTrun（原名 Win+R Adde）这款软件，可以轻松的帮你完成Win+R功能的定制nTrun官网官方微博：《nTrun 快速启动-使用向导》官方微博：《nTrun 快速启动-详细介绍》]]></content>
      <categories>
        <category>Windows小技巧</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>效率</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows小技巧 - 修改软件默认安装目录]]></title>
    <url>%2Falex.d-blog%2Fposts%2F5e3c350%2F</url>
    <content type="text"><![CDATA[问题描述Windows系统下安装软件时，会提示一个默认的安装路径，如： 64位系统默认安装路径： C:\Program Files\ [软件名称] 32位系统默认安装路径 C:\Program Files (x86)\ [软件名称] 无论64还是32位系统，均会默认提示安装到C盘，而C盘是我们默认的系统盘，如果C盘文件过多那么就会导致我们系统卡顿缓慢，严重者是需要重新安装电脑系统的。所以我们安装软件时，通常会修改软件的安装目录，不过每次都要手动修改，比较麻烦，下面介绍一劳永逸的方式解决这个问题。 技巧使用以 Git-2.10.0-64-bit.exe 安装为例。双击git安装文件后，提示如下界面： 本机系统为 Windows 8.1 64位，这里显示64位程序安装的默认路径。 由于此技巧需要修改注册表，所以不放心的朋友，可以提前备份注册表。修改步骤如下： 打开注册表快捷键 Win + R 打开运行窗口，输入 regedit ： 回车，打开注册表窗口： 找到指定注册表项找到 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion 项，点击CurrentVersion，如下： 修改默认路径参数值点击 CurrentVersion 右侧选项中的 ProgramFilesDir 及 ProgramFilesDir (x86) 项，并修改值为自定义默认目录，下图为 ProgramFilesDir（64位默认安装路径）修改图示：修改路径后（此处可按个人需要修改）如下： 安装软件测试重新打开 Git-2.10.0-64-bit.exe 安装程序，此时安装的默认路径如下： 至此，Windows程序默认安装路径修改成功~]]></content>
      <categories>
        <category>Windows小技巧</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WAMP(Windows + Apache + MySQL + PHP) 环境配置]]></title>
    <url>%2Falex.d-blog%2Fposts%2Ff06be05a%2F</url>
    <content type="text"><![CDATA[WAMP(Windows + Apache + MySQL + PHP) 环境配置wamp集成环境的下载地址：http://www.wampserver.com/，集成环境安装这里不做记录，本文仅记录Windows+Apache+MySQL+PHP集成环境的配置。 各模块下载地址 Apache：http://httpd.apache.org/docs/current/platform/windows.htmlMySQL：http://dev.mysql.com/downloads/mysql/5.0.html#win32PHP：http://windows.php.net/download 独立安装各模块顺序: Apache -&gt; PHP -&gt; MySQL Apache服务安装下载Apache，上面给出的地址是免安装版，用命令行配置可以更加清晰地看到错误信息，方便于调试。 进入下载链接之后有如上的几个下载地址，我们选择第一个。点击进入，就可以看到最终的下载位置，按你的操作系统选择下载32位或64位： 下载完成后，将下载的压缩包解压到D:\PHP\ 目录（目录可以自定义，注意不适用中文） 下，然后命令提示符(管理员模式，非管理员模式进入安装时提示权限问题)进入bin目录下，输入命令：httpd –k install 执行命令后会发现，Apachefu service is successfully installed.但会发现下面出现错误，这里是ServerRoot目录指向没有配置。打开../ApacheXX/conf/目录下的httpd.conf，并定位到ServerRoot，配置当前的apache目录： 然后在命令提示符中使用命令httpd -k uninstall 先卸载服务，然后再执行httpd –k install命令来安装服务，最后执行httpd –k start命令来测试。 浏览器中输入http://localhost/ 出现类似下面含有 it works 字样提示的页面，表示安装完成 如果不成功，可能是本地80端口被占用，可以到 ../ApacheXX/conf/ 目录中的httpd.conf文件里，将所有80的端口改成8080，再次输入http://localhost/，如果出现类似上图提示，表示安装成功。 PHP环境安装下载PHP，注意选择有Thread Safe的版本，php位数根据系统位数选择：同样，将下载的压缩包解压到D:\PHP\ 目录下，方便环境配置。之后将php.ini-development文件修改为php.ini。然后用文本编辑器打开编辑 （不建议使用记事本）,定位到extension_dir，将： ; extension_dir = “./“ 修改为： extension_dir = “D:/PHP/php5.6.24/ext” 定位到date.timezone修改时区 date.timezone = RPC 或date.timezone = Asia/Shanghai 定位到default_charset修改编码格式 default_charset =”UTF-8” 然后修改如下内容：123456789101112131415161718192021222324252627282930313233343536;extension=php_bz2.dllextension=php_curl.dll;extension=php_fileinfo.dllextension=php_gd2.dll;extension=php_gettext.dll;extension=php_gmp.dll;extension=php_intl.dllextension=php_imap.dll;extension=php_interbase.dll;extension=php_ldap.dllextension=php_mbstring.dll;extension=php_exif.dll ; Must be after mbstring as it depends on itextension=php_mysql.dllextension=php_mysqli.dll;extension=php_oci8_12c.dll ; Use with Oracle Database 12c Instant Client;extension=php_openssl.dll;extension=php_pdo_firebird.dllextension=php_pdo_mysql.dll;extension=php_pdo_oci.dll;extension=php_pdo_odbc.dll;extension=php_pdo_pgsql.dll;extension=php_pdo_sqlite.dll;extension=php_pgsql.dll;extension=php_shmop.dll; The MIBS data available in the PHP distribution must be installed.; See http://www.php.net/manual/en/snmp.installation.phpextension=php_snmp.dllextension=php_soap.dllextension=php_sockets.dll;extension=php_sqlite3.dll;extension=php_sybase_ct.dll;extension=php_tidy.dll;extension=php_xmlrpc.dll;extension=php_xsl.dll 即去掉；号（去除注释）来实现php扩展的引入，如下图: 最后将D:\PHP\php5.6.24;D:\PHP\php5.6.24\ext添加到环境变量 MySQL安装MySQL的安装可以看 Windows 7系统安装MySQL5.5.21图解。注意修改安装路径到D:\PHP\ 整合Apache、MySQL、PHP Apache打开 ..\Apache2.x\conf\httpd.conf文件，添加如下信息： 12345678910111213141516171819202122232425262728#添加PHP的php.ini配置文件目录PHPIniDir &quot;D:/PHP/php5.6.24/php.ini&quot;#加载PHP编译模块，注意Apache2.4需要与php5apache2_4.dll配合，否则Apache Server启动时加载出错。LoadModule php5_module &quot;D:/PHP/php5.6.24/php5apache2_4.dll&quot;#设置的PHP支持的文件解析&lt;IfModule mime_module&gt;...AddType application/x-httpd-php .php .html .htm...&lt;/IfModule&gt;#修改网站根目录（此处按自己需要修改，默认为Apache下的htdocs目录）DocumentRoot &quot;D:/PHP/develop&quot;#修改DocumentRoot 同时要修改其下面的Directory标签名后的地址（两者需要统一）&lt;Directory &quot;D:/PHP/develop&quot;&gt;# 添加默认文档类型 （此处按自己需求修改）&lt;IfModule dir_module&gt; #默认为index.html DirectoryIndex index.html index.php &lt;/IfModule&gt;#修改监视端口为8008或其它，避免与IIS的80端口冲突，导致无法启动Apache Server （本地开发学习，可不做修改，视情况而定）Listen 8008ServerName localhost:8008 PHP打开..\php5.x\php.ini文件，配置如下信息： 123doc_root = &quot;D:/PHP/develop&quot;session.save_path = &quot;D:/php/php-5.4.45/tmp&quot; MySQL在MySQL目录中找到mysql安装目录 /lib/libmysql.dll文件，将此文件复制到系统的system32目录下 至此，环境配置完成，可以在工程目录下（本文目录为D:/PHP/develop），创建index.php页面，页面中写入：1234&lt;?php phpinfo();?&gt; 启动服务，浏览器中输入http://localhost/index.php，出现如下页面，说明配置完成：]]></content>
      <categories>
        <category>安装部署</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Windows</tag>
        <tag>Apache</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS计数器]]></title>
    <url>%2Falex.d-blog%2Fposts%2F438c3d31%2F</url>
    <content type="text"><![CDATA[CSS计数器（counter）CSS计数器属性 属性 属性说明 语法 参数含义 counter-reset 定义计数器，包括初始化、作用域等 counter-reset:[&lt;identifier&gt;&lt;integer&gt;?]+/none/inherit 默认值为none&lt;identifier&gt;:计数器名称&lt;integer&gt;:计数器初始值当元素的display为none时，该属性失效 counter-increment 设置计数器的增数 counter-increment:[&lt;user-ident&gt;&lt;integer&gt;?]+/none &lt;user-ident&gt;:需要增数的计数器名称&lt;integer&gt;:计数器增数的值，可以为负数可以同时增数多个计数器当元素的display为none时，该属性失效 content 在::before和::after中生成内容 content:[&lt;counter&gt;]+&lt;counter&gt;=counter(name)/counter(name,list-style-type)/counters(name,string)/counters(name,string，list-style-type) 使用计数器，需要结合::befer和::after使用。可以同时使用多个计数器 counter() 在content属性中使用，用来调用计数器 @counter-style 自定义列表样式 @counter-style counterStyleName{system:算法;range:使用范围;symbols:符号;or additive-symbols:符号;prefix:前缀;suffix:后缀;pad:补零(eg.01,02,03);nagative:负数策略;fallback:出错后的默认值;speakas:语音策略;} @counter-style cjk-heavenly-stem{system:alphabetic;symbols:”\7532””\4E59””\4E19””\4E01”; / 甲 乙 丙 丁 /suffix:”、”;} CSS计数器属性代码示例 属性 代码 代码解析 counter-reset counter-reset:counterA;counter-reset:counterA 6counter-reset:counterA 4 counterB;counter-reset:counterA 4 counterB 2; 定义定时器counterA,初始值为默认值0定义定时器counterA,初始值为6定义定时器counterA、counterB,初始值分别为4和0定义定时器counterA、counterB,初始值分别为4和2 counter-increment counter-increment:counterAcounter-increment:counterA 2counter-increment:counterA 2 counterB -1 增数计算器counterA,每次增加1增数计算器counterA,每次增加2增数计算器counterA、counterB,每次分别增加2、-1 content content:”Fig.” counter(imgCounter);content:”Fig.” counter(imgCounter,lower-alpha);contents(section,”.”)””; contents(section,”.”,”lower-roman”)””; 混合字符串和计数器imgCounter 指定计数器的列表格式在计数器之间加上点号，同时在计数器最后添加一个空格定义计数器为小写罗马数字格式，同时加点好，空格 CSS计数器应用通过CSS计数器功能即实现上图左侧到右侧的效果。 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;ul class="title"&gt; &lt;li&gt;一级标题 &lt;ul class="title2"&gt; &lt;li&gt;二级标题 &lt;ul&gt; &lt;li&gt;三级标题&lt;/li&gt; &lt;li&gt;三级标题&lt;/li&gt; &lt;li&gt;三级标题&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;二级标题 &lt;ul&gt; &lt;li&gt;三级标题&lt;/li&gt; &lt;li&gt;三级标题&lt;/li&gt; &lt;li&gt;三级标题&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;二级标题 &lt;ul&gt; &lt;li&gt;三级标题&lt;/li&gt; &lt;li&gt;三级标题&lt;/li&gt; &lt;li&gt;三级标题&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;一级标题 &lt;ul class="title2"&gt; &lt;li&gt;二级标题&lt;/li&gt; &lt;li&gt;二级标题&lt;/li&gt; &lt;li&gt;二级标题&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;一级标题 &lt;ul class="title2"&gt; &lt;li&gt;二级标题&lt;/li&gt; &lt;li&gt;二级标题&lt;/li&gt; &lt;li&gt;二级标题&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt;&lt;/ul&gt; 1234567891011121314151617181920212223242526272829 ul &#123; list-style: none; &#125;.title &#123; counter-reset: A_title B_title C_title; font-size: 18px; font-weight: bold; font-family: &apos;宋体&apos;;&#125;.title &gt; li:before &#123; counter-increment: A_title ; content: counter(A_title)&quot;、&quot;;&#125;.title .title2 &gt; li &#123; font-size: 14px; font-weight: 500;&#125;.title .title2 &gt; li:before &#123; counter-increment: B_title; content: counter(A_title)&quot;.&quot;counter(B_title)&quot;、&quot;;&#125;.title .title2 ul &gt; li &#123; font-size: 10px;&#125;.title .title2 ul &gt; li:before &#123; counter-increment: C_title; content: counter(A_title)&quot;.&quot;counter(B_title)&quot;.&quot;counter(C_title)&quot;、&quot;;&#125; 阅读参考&amp;扩展阅读 CSS计数器(序列数字字符自动递增)详解 使用CSS计数器 CSS Counter Styles Level 3 CSS计数器实现数值计算小游戏demo]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows下安装MongoDB 3.2]]></title>
    <url>%2Falex.d-blog%2Fposts%2F9a06f51f%2F</url>
    <content type="text"><![CDATA[MongoDB在安装MongoDB 3.2.0版本时，翻看官网安装说明，参照成功安装。为方便日后安装参考，记录此文。文章自己简单翻译，有出入望指教。 MongoDB 安装确定MongoDB版本官网提供了三个版本下载： MongoDB for Windows 64-bit 适合 64 位的 Windows Server 2008 R2, Windows 7 , 及最新版本的 Window 系统。 MongoDB for Windows 32-bit 适合 32 位的 Window 系统及最新的 Windows Vista。 32 位系统上 MongoDB 的数据库最大为 2GB。 MongoDB for Windows 64-bit Legacy 适合 64 位的 Windows Vista, Windows Server 2003, 及 Windows Server 2008 。MongoDB官网下载地址：MongoDB downloads pages, 此时官网最新版本为3.2.4 。 根据系统下载对应版本，64版本的MongoDB不支持Windows 32位系统。不知道本机的位数，可以通过以下代码查看：12wmic os get caption #查看系统的版本 win xp/win 7...wmic os get osarchitecture #查看系统架构（位数） x86/x64 通过查询可以知道，本机是64位系统，所以使用64的mongodb-win32-x86_64-2008plus-ssl-3.2.0-signed.msi 。 安装MongoDB 选择自定义安装模式，选择安装目录 d:\MongoDB 注：MongoDB是独立的，没有任何其他系统的依赖。你可以在任何你选择的文件夹运行MongoDB。所以你可以在任意文件夹中安装MongoDB（如D:\test\ MongoDB）。 注意避免中文目录。 MongoDB 无人值守安装文档中介绍了Unattended Installation的安装方式，想要采用此方式安装，可以参看。要使用无人值守安装，需要用到 msiexec.exe 。 打开管理员命令提示需要通过管理员模式的命令提示符，来执行安装命令。管理员命令提示打开方式： 快捷键win+r打开“运行”窗口，输入cmd 快捷键 Ctrl + Shift + Enter ，则可以打开 ”管理员命令提示“。（win xp/win 7下） Windows安装MongoDB选择修改.msi安装文件的安装路径并执行，语句如下： 123msiexec.exe /q /i mongodb-win32-x86_64-2008plus-ssl-3.2.0-signed.msi ^ INSTALLLOCATION=&quot;C:\mongodb&quot; ^ ADDLOCAL=&quot;all&quot; 通过INSTALLLOCATION值可以指定安装路径。默认使用这种方式安装，可以通过AddLOCAL来安装MongoDB组件集，这里设置all 表示全部安装，也可以选择安装组件集，各组件之间使用逗号隔开。组件集如下：|Component Set| Binaries||:—|:—||Server |mongod.exe||Router |mongos.exe||Client |mongo.exe||MonitoringTools |mongostat.exe, mongotop.exe||ImportExportTools |mongodump.exe, mongorestore.exe, mongoexport.exe, mongoimport.exe||MiscellaneousTools |bsondump.exe, mongofiles.exe, mongooplog.exe, mongoperf.exe|例如只安装MongoDB的工具和调用组件：123msiexec.exe /q /i mongodb-win32-x86_64-2008plus-ssl-3.2.0-signed.msi ^ INSTALLLOCATION=&quot;C:\mongodb&quot; ^ADDLOCAL=&quot;MonitoringTools,ImportExportTools,MiscellaneousTools&quot; MongoDB 运行设置MongoDB运行环境MongoDB需要数据目录来存储所有的数据，其默认的数据目录为\data\db ，可以通过mongod.exe --dbpath命令来指定MongoDB的数据目录。例如：12mkdir D:\MongoDB\data\db;D:\MongoDB\bin\mongod.exe --dbpath D:\MongoDB\data\db 如果路径里面包含空格，就用双引号括住整个路径，例如： 1D:\MongoDB\bin\mongod.exe --dbpath &quot;D:\MongoDB db data&quot; 看到上面的提示底部出现waiting for connections 字样，则表示dbpath配置完成，且MongoDB启动成功。而且此时打开资源管理器，进入MongoDB的dbpath目录，内容如下：可以发现本地确实初始化数据库了。创建成功时，MongoDB会根据系统安全级别，弹出mongod.exe网络通信的安全警告，选择允许，且需要选择网络时，应该选择私有网络，如家庭和工作网络。更多MongoDB的信息安全，请参见 Security Documentation。 运行MongoDB通过运行mongo.exe启动MongoDB。例如：1D:\MongoDB\bin\mongo.exe 命令行窗口显示如下内容：窗口中可以看到当前MongoDB shell的版本，及此时连接的数据库。 注：如果想要使用.net开发应用程序，更多信息可以参看文档 C# and MongoDB 开始使用MongoDB为了帮助您开始使用MongoDB，MongoDB提供了各种驱动版本的入门指南 Getting Started Guides。 在MongoDB Shell中，通过help 来查看命令说明： 在生产环境中部署MongoDB之前，考虑生产记Production Notes录文件。 最后想停止MongoDB，可以在mongod.exe的命令行窗口，使用快捷键Ctrl+c即可。出现如框中的路径时，表示MongoDB已停止。 配置MongoDB的Windows服务在上面的配置中，虽然启动了服务，且可以进行数据库操作，但是开两个窗口很不方便，所以可以通过配置文件，来配置windows服务。 创建目录为您的数据库和日志文件创建目录： 12mkdir D:\MongoDB\data\dbmkdir D:\MongoDB\data\log 创建cfg配置文件创建一个配置文件，文件内必须设置MongoDB日志路径 systemLog.path。包扩一些其他的附加配置选项。例如，在在D:\MongoDB\ 下创建mongod.cfg，并在文件内指定systemlog.path和storage.dbpath： 12345systemLog: destination: file path: D:\MongoDB\data\log\mongod.logstorage: dbPath: D:\MongoDB\data\db 安装MongoDB服务注意：运行所有的命令都应该在管理员命令行窗口内。（管理员权限运行cmd）通过运行mongod.exe的–install安装选项和–config和配置选项，指定先前创建的配置文件安装MongoDB服务。 1&quot;D:\MongoDB\bin\mongod.exe&quot; --config &quot;D:\MongoDB\mongod.cfg&quot; --install 设置独立的数据库地址dbpath，可以通过配置文件或者命令–dbpath来设置。 如果需要，你可以安装多个实例的mongod.exe或mongos.exe服务。安装的每个服务设置唯一的 –serviceName 和–serviceDisplayName。仅当有足够的系统资源和系统设计要求时，设置多个实例。 如要让服务自动启动，可以通过下面命令： 1sc.exe create MongoDB binPath= &quot;D:\MongoDB\bin\mongod.exe --service --config=\&quot;C:\MongoDB\mongod.cfg\&quot;&quot; DisplayName= &quot;MongoDB&quot; start= &quot;auto&quot; sc.exe中在“=”和配置值（如“binpath =”）之间需要一个空格，且用一个“\”转义双引号，以逃避双重引号。 如果成功创建，下面的日志信息将显示：1[SC] CreateService SUCCESS 开启服务1net start MongoDB 关闭和删除服务停止MongoDB服务使用以下命令：1net stop MongoDB 删除MongoDB服务使用以下命令： 1&quot;D:\MongoDB\bin\mongod.exe&quot; --remove 参考内容官网3.2版本文档：安装说明关于无人值守安装，可以看看Microsoft的What Is Unattended Installation?百度百科介绍，点这里：无人值守安装]]></content>
      <categories>
        <category>安装部署</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows下PHP配置成功后phpinfo中找不到MySQL问题处理]]></title>
    <url>%2Falex.d-blog%2Fposts%2F18049353%2F</url>
    <content type="text"><![CDATA[问题描述本地配置php开发环境（Apache + PHP + MySQL）后，测试时 phpinfo中找不到mysql且此时PHP的测试程序怎么也连不上数据库，并报Call to undefined function mysql_connect() 的错误。 问题解决检测配置文件 ApacheApache的配置文件apache安装路径/conf/httpd.conf 中检测以下内容123456[httpd.conf] LoadModule php5_module &quot;D:/php/php-5.4.45/php5apache2_2.dll&quot; PHPIniDir &quot;D:/php/php-5.4.45/php.ini&quot; AddType application/x-httpd-php .php .html .htm DocumentRoot &quot;F:/php&quot; 注意：PHP的配置文件php.ini应该在PHPIniDir路径下 PHPPHP配置文件php安装路径/php.ini 中检测下面内容12345678910111213141516[php.ini] extension=php_curl.dll extension=php_gd2.dll extension=php_imap.dll extension=php_mbstring.dll extension=php_mysql.dll extension=php_mysqli.dll extension=php_pdo_mysql.dll extension=php_snmp.dll extension=php_soap.dll extension=php_sockets.dll doc_root = &quot;F:/php&quot; extension_dir = &quot;D:/php/php-5.4.45/ext&quot; session.save_path = &quot;D:/php/php-5.4.45/tmp&quot; 检测上面extension内容是否去掉了注释，且doc_root等配置路径是否正确。 MySQL在MySQL目录中找到mysql安装目录/lib/libmysql.dll 文件，将此文件复制到系统的system32下，基本就解决了上述问题。 最后，保存修改的文件，重启Apache服务，重新运行，此时可以在phpinfo文件中找到mysql了]]></content>
      <categories>
        <category>问题处理</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Error</tag>
        <tag>PHP</tag>
        <tag>Windows 8.1</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[XAMPP启动MySQL报错]]></title>
    <url>%2Falex.d-blog%2Fposts%2F177b1137%2F</url>
    <content type="text"><![CDATA[问题重述XAMPP启动mysql时，出现错误，提示如下： 问题适用情况在安装XAMPP环境之前，本地独立安装了MySQL开发环境，此时在XAMPP启动MySQL时就会出现上面问题，是这样的情况，可以试试下面的方法来解决。 解决方案打开注册表（快捷打开方式：cmd-&gt;regedit）,找到[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\MySQL] 下的ImagePath项，如下图：此时mysql的ImagePath值为D:\mysql-5.1.73-winx64\bin\mysqld --defaults-file=my.ini MySQL ， 即指向本地mysql安装路径下。将此处修改为 D:\xampp\mysql\bin\mysqld --defaults-file=my.ini MySQL ，其中D:\xampp\mysql\bin\mysqld 为XAMPP环境中mysql的路径，并指定默认的配置文件为my.ini。修改完后，关闭注册表，关闭任务管理器中的mysqld.exe (如果有此项的话) ，打开服务，找到MySQL服务，查看属性，我们可以看到此时MySQL的可执行文件路径指向到了XAMPP下的MySQL路径之后在XAMPP控制台中重新启动MySQL，此时我的MySQL终于启动了。 最终解决不难发现，其实XAMPP并没有启动MySQL，因为在进程中可以看到，任务只是mysqld.exe进程启动，且MySQL显示启动中。通过phpmyadmin，我们可以清晰的看到MySQL服务还是有问题的。此时的MySQL服务会一直启动中，且停止服务时，会出现无法停止服务的提示而此时的进程中，可以发现mysqld.exe进程启动了，但没有正常启动服务进服务管理器（快捷方式cmd-&gt;services.msc）中发现，启动MySQL时出现了1053错误此时，我的解决方法就是再还原MySQL的ImagePath值。然后关闭XAMPP及MySQL服务和mysqld.exe进程，之后运行XAMPP控制台，此时报如下错误：可以发现错误中，说明了是路径问题，所以我复制了Expected Path 后的路径d:\xampp\mysql\bin\mysqld.exe --defaults-file=d:\xampp\mysql\bin\my.ini mysql 到MySQL的ImagePath，此时运行，会出现下面错误于是按照错误打开日志，即XAMPP控制台中，MySQL的后log按钮，打开日志，会看到下面错误日志里面说InnoDB: Cannot create D:\xampp\mysql\data\ib_logfile101 ，于是将D:\xampp\mysql\data 目录下的ib_logfile101删掉了，顺手我还把ibdata1文件删了，之后关闭控制台，重新尝试，发现还是这个错误，再打开日志和上面类似可以看到ib_logfile101 文件创建成功，但是这里Cannot create D:\xampp\mysql\data\ib_logfile1 又不能创建 ib_logfile1 文件了，于是将D:\xampp\mysql\data 下的logfile 和ibdata1 全删了，之后关闭控制台，重新启动，终于启动MySQL了。关闭重新尝试，也没有问题了，此时控制台还会提示如下：就是建议采用管理员模式运行XAMPP。 注：这里要注意的就是，将logfile和ibdata1 文件复制、替换 D:\xampp\mysql\data 下的logfile和ibdata1 文件，使用MySQL启动时，依旧会报上面的错误，具体原因不是很清楚，有知情者，望不吝告知，谢谢。 这里不知道有没有更好的解决方式，因为此法只是可以让XAMPP启动集成环境中的MySQL，此时本地单独安装的MySQL要启动需要换回ImagePath值。所以个人觉得如果要使用XAMPP集成环境，还是卸载本地安装的MySQL，之后重新安装XAMPP环境，可能会省事点。如果有更好的解决方式，希望可以留言告知，谢谢！]]></content>
      <categories>
        <category>问题处理</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Error</tag>
        <tag>XAMPP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub上搭建Hexo个人博客]]></title>
    <url>%2Falex.d-blog%2Fposts%2F9b9a6ada%2F</url>
    <content type="text"><![CDATA[Hexo介绍Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 风一般的速度Hexo基于Node.js，支持多进程，几百篇文章也可以秒生成。 流畅的撰写支持GitHub Flavored Markdown和所有Octopress的插件。 扩展性Hexo支持EJS、Swig和Stylus。通过插件支持Haml、Jade和Less. Hexo安装安装前提 Node.js Git在安装Hexo前，需要确定以上条件是否满足！具体安装步骤不在赘述。 搭建环境 GitHub账号 创建新的github仓库 获得github仓库地址 安装GitHub for Windows 客户端 使用GitHub for Windows 客户端一个是因为不用配置ssh，另外就是使用较方便。 验证ssh 1ssh -T git@github.com 出现如下提示，则表示ssh配置完成了。 Clone新建的github仓库到本地 提示：如果出现问题，请卸载 GitHub for Windows 客户端，重新安装一遍，或转到使用 Git 方法 常见错误请参考： GitHub Help - Generating SSH KeysGitHub Help - Error Permission denied (publickey) Hexo安装 选择本地github仓目录（我的地址为F:\github\anyerblog.github.io），在anyerblog.github.io目录上右击菜单中选择git bash Here,打开git终端。输入如下代码：（注：右键菜单没有选项，则在开始菜单中，找到github程序文件夹，打开git bash，之后cd到github仓目录） 1npm install -g hexo 检查是否安装安装完成后通过`hexo version`查看安装的hexo版本信息 hexo创建 在git bash中输入以下命令，完成hexo的创建:1$ hexo init 将hexo相关的插件安装到githut仓库目录中 1$ npm install 此时github仓库目录内容如下：(搭建完成后补的图，里面会比实际情况多文件夹) Hexo运行生成静态页面安装好hexo后，通过下面代码可以生成静态页面，生成的静态页面存储在public目录下: 1$ hexo generate #可简写为`hexo g` 运行服务开启预览访问端口（默认端口4000，git bash下 ‘ctrl + c’ 关闭server）1$ hexo server #可简写为`hexo s` 运行后出现下图结果，则表示服务已启动： 此时在浏览器中访问http://localhost:4000/ ，即可看到hexo自带的hello world 页面至此，hexo已经在本地搭建完成。 NexT主题修改主题hexo默认使用的是landscape主题，下文将采用NexT主题。 NexT主题 NexT主题特色：精于心，简于形 NexT主题是我接触Hexo的第一款主题，一见钟情的一款Hexo主题。 NexT主题简约却并不简单，功能特性多样；响应式设计，电脑手机访问体验好，超级nice，你值得拥有！ 安装主题将next的代码clone到项目中，保存在github仓库中的themes/next目录下: 1$ git clone https://github.com/iissnan/hexo-theme-next themes/next 修改配置下载完主题后，修改根目录下的_config.yml配置文件：新建的hexo文件中使用的是默认的主题landscape，将其修改为next（next为主题安装的目录名themes/next） 运行新主题 修改完成后保存，运行代码： 1$ hexo server -g #为`hexo generate`及`hexo server`的缩写 此代码运行吼，NexT的主题页面如下： 主题设置 添加blog名称及副标题 修改根目录下配置文件_config.yml 修改语言 修改根目录下的_config.yml文件： 更改主题方案 NexT 通过 Scheme 提供主题中的主题。 Mist 是 NexT 的第一款 Scheme。启用 Mist 仅需在 主题配置文件 中将 #scheme: Mist 前面的 # 注释去掉即可。 修改themes/next目录下的_config.yml文件： 头像设置通过avatar字段设置，站点外头像设置avatar：图片url，站点内头像设置avatar：目录/图片名.图片格式 在根目录下的_config.yml文件中，添加avatar字段：头像图片存储在themes/next/source/images/目录下。 添加页面 标签云页面 1hexo new page tags 修改刚创建的tags文件夹(github仓库目录\source\tags)下的index.md文件： 在themes/next目录下的_config.yml文件中，将 menu关键字 中 about 前面的注释去掉即可 分类页面 1hexo new page categories 修改刚创建的categories文件夹(github仓库目录\source\categories)下的index.md文件： 在themes/next目录下的_config.yml文件中，将 menu关键字 中 about 前面的注释去掉即可 about页面 1hexo new page about 在themes/next目录下的_config.yml文件中，将 menu关键字 中 about 前面的注释去掉即可 404页面 腾讯公益404页面使用方法，新建 404.html 页面，放到主题的 source 目录下(themes/next/source)，内容如下： 123456789101112131415&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv="content-type" content="text/html;charset=utf-8;"/&gt; &lt;meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" /&gt; &lt;meta name="robots" content="all" /&gt; &lt;meta name="robots" content="index,follow"/&gt;&lt;/head&gt;&lt;body&gt;&lt;script type="text/javascript" src="http://www.qq.com/404/search_children.js" charset="utf-8" homePageUrl="your site url " homePageName="回到我的主页"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 第三方插件配置 多说配置登录多说后，点击我要安装：然后按下图填写自己的信息：在themes/next目录下的_config.yml文件中，修改duoshuo_shortname关键字： 百度统计配置登录百度统计，添加统计网站后，获得下面的定位代码，将baidu_analytics字段设置为下面代码中hm.js？后面的代码（本文为43d55965147dc8e978f7b55a19736357，注意自己的这个代码）。 123456789&lt;script&gt; var _hmt = _hmt || []; (function() &#123; var hm = document.createElement(&quot;script&quot;); hm.src = &quot;//hm.baidu.com/hm.js?43d55965147dc8e978f7b55a19736357&quot;; var s = document.getElementsByTagName(&quot;script&quot;)[0]; s.parentNode.insertBefore(hm, s); &#125;)();&lt;/script&gt; 获得上面的代码后，在themes/next目录下的_config.yml文件中，修改baidu_analytics关键字： JiaThis分享配置在themes/next目录下的_config.yml文件中，修改baidu_analytics关键字： RSS配置配置RSS，在此之前需要使用 hexo-generator-feed 插件生成 Feed。此时设置rss:，rss值为空的时，默认会使用站点的 Feed 链接。 1npm install hexo-generator-feed --save 通过上述代码，生成feed，此时在themes/next目录下的_config.yml文件中修改： 添加github绶带通过下面链接，可以获得各种样式的绶带源码，更具自己需要获取： GitHub Ribbons 获取源码后，修改anyer.github.io\themes\next\layout目录下的_layout文件： 将绶带的代码，添加在&lt;/body&gt;上方即可。 完成以上步骤后，运行效果：插件效果： GitHub部署部署设置修改根目录下的_config.yml文件： 部署123hexo cleanhexo generate hexo deploy hexo命令 常用命令：hexo new “postName” #新建文章hexo new page “pageName” #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）hexo deploy #将.deploy目录部署到GitHub 常用复合命令：hexo deploy -ghexo server -g 简写：hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 部署成功提示如下： 部署注意事项 github仓库地址有两种，分别为https和SSH，在配置_config.yml文件时，注意区分。 使用https地址时，部署hexo时，会出现如下选项 使用SSH提交时，github for windows可能会出错，具体解决见上文。 部署完成后，使用xxx.github.com访问时，可能会出现404页面： 若之前操作没有报错，则此时可能是由于解析未完成，等一段时间登录即可；也可能是邮箱没有验证通过（我的就是这个问题吧。。。）。 引用参考 github地址中文官网地址Next 官网Next GitHubhexo-generator-feedHexo搭建Github静态博客hexo你的博客Windows下一步步搭建自己的独立博客——使用 GitHub Pages + Hexo 基础教程（一）]]></content>
      <categories>
        <category>Hexo</category>
        <category>安装部署</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Win8.1的Matlab7卸载问题]]></title>
    <url>%2Falex.d-blog%2Fposts%2F4869e41%2F</url>
    <content type="text"><![CDATA[问题描述使用matlab7自带的uninstaller.exe及控制面板卸载时都提示exeption calling main的错误提示信息。 问题处理 网上有很多都是介绍说是因为主题不符导致的这个问题，处理方法很简单，就是在个性化中，将主题改为windows经典主题样式，然后执行卸载程序就可以解决了。 但有一点很尴尬，我使用的win8.1，在个性化中没有windows经典主题样式 ，这时可以试试下面的方法：1、在matlab的安装目录（或开始菜单中）找到uninstaller.exe；2、右键属性，修改其兼容性中兼容模式为Windows vista;3、确定后，重新运行uninstaller.exe，即可实现卸载。 还有很多推荐使用完美卸载，但是很不理想，也会出现相同的错误提示。]]></content>
      <categories>
        <category>问题处理</category>
      </categories>
      <tags>
        <tag>Error</tag>
        <tag>Windows 8.1</tag>
        <tag>Matlab</tag>
      </tags>
  </entry>
</search>
